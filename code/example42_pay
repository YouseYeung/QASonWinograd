(declare-sort person)
(declare-sort thing)
(declare-const colledgeEducation thing)
(declare-const Bob person)
(declare-const Charlie person)
(declare-rel payFor (person thing))
(declare-rel belongTo (thing person))
(declare-rel generous (person))
(declare-rel grateful (person))


(assert (not (= Bob Charlie)))
(assert (forall ((x person)) (or (= x Bob) (= x Charlie))))
(assert (forall ((x thing)) (= x colledgeEducation)))

(assert (forall ((x person) (y person)) (=> (not (= x y)) (exists ((z thing)) (=> (and (payFor x z) (belongTo z y)) (and (grateful y) (generous x)))))))
(assert (forall ((x person) (y person)) (=> (not (= x y)) (exists ((z thing)) (=> (grateful y) (and (payFor x z) (belongTo z y)))))))
(assert (forall ((x person) (y person)) (=> (not (= x y)) (exists ((z thing)) (=> (generous x) (and (payFor x z) (belongTo z y)))))))

(assert (= (generous Bob) (not (generous Charlie))))
(assert (= (grateful Bob) (not (grateful Charlie))))

(assert (not (=> (and (payFor Bob colledgeEducation) (belongTo colledgeEducation Charlie)) (grateful Charlie))))
;(assert (not (=> (and (payFor Bob colledgeEducation) (belongTo colledgeEducation Charlie)) (generous Bob))))

(check-sat)
(get-model)
