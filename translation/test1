 Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Sid explained his theory to Mark. but he couldn't convince him {
    Tokens: [sid, explained, his, theory, to, mark, ., but, he, could, n't, convince, him]
    Lemmatized tokens: [Sid, explain, he, theory, to, mark, ., but, he, could, not, convince, he]
    POS tags: [NNP, VBD, PRP$, NN, TO, NN, ., CC, PRP, VBD-AUX, RB, VB, PRP]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, nmod:to->5, punct->6], [], [nmod:poss->2], [], [case->4], [], [], [], [], [], [aux->9, neg->10, dobj->12, cc->7, nsubj->8], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B explains something to person C, then person B might not convince person C, and person C might not understand person B {
    Tokens: [if, person, b, explains, something, to, person, c, ,, then, person, b, might, not, convince, person, c, ,, and, person, c, might, not, understand, person, b]
    Lemmatized tokens: [if, person, b, explain, something, to, person, c, ,, then, person, b, might, not, convince, person, c, ,, and, person, c, might, not, understand, person, b]
    POS tags: [IN, NN, NN, VBZ, NN, TO, NN, NN, ,, RB, NN, NN, VBD-AUX, RB, VB, NN, NN, ,, CC, NN, NN, VBD-AUX, RB, VB, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->4, nmod:to->7], [], [], [], [case->5, compound->6], [], [], [], [advmod->9, compound->10], [], [], [dobj->16, punct->17, cc->18, advcl->3, conj:and->23, punct->8, nsubj->11, aux->12, neg->13], [], [compound->15], [], [], [], [compound->19], [], [], [nsubj->20, aux->21, neg->22, dobj->25], [], [compound->24]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who did not convince whom {
    Tokens: [who, did, not, convince, whom]
    Lemmatized tokens: [who, do, not, convince, whom]
    POS tags: [WP, VBD-AUX, RB, VB, WP]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, aux->1, neg->2, dobj->4], []]
  }