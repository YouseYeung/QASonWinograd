(declare-sort thing)
(declare-sort person)
(declare-const Noun_Joe_uncle person)
(declare-const Noun_uncle person)
(declare-const Noun_Joe_p person)
(declare-const Noun_he person)
(declare-const Noun_year person)
(declare-const Noun_Joe_t thing)
(declare-const Noun_tennis thing)
(assert (not (= Noun_Joe_uncle Noun_uncle)))
(assert (not (= Noun_Joe_uncle Noun_Joe_p)))
(assert (not (= Noun_Joe_uncle Noun_he)))
(assert (not (= Noun_Joe_uncle Noun_year)))
(assert (not (= Noun_uncle Noun_Joe_p)))
(assert (not (= Noun_uncle Noun_he)))
(assert (not (= Noun_uncle Noun_year)))
(assert (not (= Noun_Joe_p Noun_he)))
(assert (not (= Noun_Joe_p Noun_year)))
(assert (not (= Noun_he Noun_year)))
(assert (not (= Noun_Joe_t Noun_tennis)))
(assert (forall ((x person)) (or (= x Noun_Joe_uncle) (= x Noun_uncle) (= x Noun_Joe_p) (= x Noun_he) (= x Noun_year) )))
(assert (forall ((x thing)) (or (= x Noun_Joe_t) (= x Noun_tennis) )))
(declare-rel Verb_younger_than (person person ))
(declare-rel Verb_younger_1 (person ))
(declare-rel Verb_younger_2 (person person ))
(declare-rel Verb_beat_at (person person thing ))
(declare-rel Verb_beat_1 (person ))
(declare-rel Verb_beat_2 (person person ))
(declare-rel Verb_beat_3 (person person thing ))
(declare-rel Verb_older_than (person person ))
(declare-rel Verb_older_1 (person ))
(declare-rel Verb_older_2 (person person ))
(declare-rel Verb_possess_pt (person thing))
(declare-rel Verb_possess_tt (thing thing))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (= (Verb_younger_than a b)  (exists ((c thing)(Verb_beat_at a b c) ))))))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (= (Verb_older_than a b)  (Verb_younger_than b a) ))))
(assert (forall ((b person) (c person) ) (=> (Verb_younger_than b c ) (Verb_younger_1 b ))))
(assert (forall ((b person) (c person) ) (= (Verb_younger_than b c ) (Verb_younger_2 b c ))))
(assert (forall ((b person) (c person) (d thing) ) (=> (Verb_beat_at b c d ) (Verb_beat_1 b ))))
(assert (forall ((b person) (c person) (d thing) ) (=> (Verb_beat_at b c d ) (Verb_beat_2 b c ))))
(assert (forall ((b person) (c person) (d thing) ) (= (Verb_beat_at b c d ) (Verb_beat_3 b c d ))))
(assert (forall ((b person) (c person) ) (=> (Verb_older_than b c ) (Verb_older_1 b ))))
(assert (forall ((b person) (c person) ) (= (Verb_older_than b c ) (Verb_older_2 b c ))))
(assert (Verb_beat_3 Noun_Joe_uncle Noun_he Noun_tennis ) )
(assert (not  (Verb_older_1 Noun_year )))
(check-sat)
