(declare-sort thing)
(declare-sort person)
(declare-const Noun_college_c_education thing)
(declare-const Noun_college_education thing)
(declare-const Noun_college_Charlie_education thing)
(declare-const Noun_Charlie_t thing)
(declare-const Noun_Bob person)
(declare-const Noun_Charlie_p person)
(declare-const Noun_he person)
(assert (not (= Noun_college_c_education Noun_college_education)))
(assert (not (= Noun_college_c_education Noun_college_Charlie_education)))
(assert (not (= Noun_college_c_education Noun_Charlie_t)))
(assert (not (= Noun_college_education Noun_college_Charlie_education)))
(assert (not (= Noun_college_education Noun_Charlie_t)))
(assert (not (= Noun_college_Charlie_education Noun_Charlie_t)))
(assert (not (= Noun_Bob Noun_Charlie_p)))
(assert (not (= Noun_Bob Noun_he)))
(assert (not (= Noun_Charlie_p Noun_he)))
(assert (forall ((x thing)) (or (= x Noun_college_c_education) (= x Noun_college_education) (= x Noun_college_Charlie_education) (= x Noun_Charlie_t) )))
(assert (forall ((x person)) (or (= x Noun_Bob) (= x Noun_Charlie_p) (= x Noun_he) )))
(declare-rel Verb_pay_for (person thing ))
(declare-rel Verb_pay_1 (person ))
(declare-rel Verb_pay_2 (person thing ))
(declare-rel Verb_not_pay_for (person thing ))
(declare-rel Verb_grateful (person ))
(declare-rel Verb_not_grateful (person ))
(declare-rel Verb_generous (person ))
(declare-rel Verb_not_generous (person ))
(declare-rel Verb_possess_pt (person thing))
(declare-rel Verb_possess_tt (thing thing))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (=> (Verb_pay_for a Noun_college_c_education)  (and (Verb_generous a) (Verb_grateful b)) ))))
(assert (forall ((b person) ) (= (Verb_pay_for b Noun_college_education ) (not (Verb_not_pay_for b Noun_college_education )))))
(assert (forall ((b person) ) (= (Verb_grateful b ) (not (Verb_not_grateful b )))))
(assert (forall ((b person) ) (= (Verb_generous b ) (not (Verb_not_generous b )))))
(assert (forall ((b person) ) (=> (Verb_pay_for b Noun_college_education ) (Verb_pay_1 b ))))
(assert (forall ((b person) ) (= (Verb_pay_for b Noun_college_education ) (Verb_pay_2 b Noun_college_education ))))
(assert (= (Verb_generous Noun_Bob ) (not (Verb_generous Noun_Charlie_p )) ))
(assert (= (Verb_generous Noun_Charlie_p ) (not (Verb_generous Noun_Bob )) ))
(assert (Verb_pay_for Noun_Bob Noun_college_Charlie_education ) )
(assert (not  (Verb_generous Noun_Bob )))
(check-sat)
