(declare-sort thing)
(declare-sort person)
(declare-const Noun_charity thing)
(declare-const Noun_college_c_education thing)
(declare-const Noun_college_education thing)
(declare-const Noun_college_Charlie_education thing)
(declare-const Noun_Charlie_t thing)
(declare-const Noun_he person)
(declare-const Noun_Bob person)
(declare-const Noun_Charlie_p person)
(assert (not (= Noun_charity Noun_college_c_education)))
(assert (not (= Noun_charity Noun_college_education)))
(assert (not (= Noun_charity Noun_college_Charlie_education)))
(assert (not (= Noun_charity Noun_Charlie_t)))
(assert (not (= Noun_college_c_education Noun_college_education)))
(assert (not (= Noun_college_c_education Noun_college_Charlie_education)))
(assert (not (= Noun_college_c_education Noun_Charlie_t)))
(assert (not (= Noun_college_education Noun_college_Charlie_education)))
(assert (not (= Noun_college_education Noun_Charlie_t)))
(assert (not (= Noun_college_Charlie_education Noun_Charlie_t)))
(assert (not (= Noun_he Noun_Bob)))
(assert (not (= Noun_he Noun_Charlie_p)))
(assert (not (= Noun_Bob Noun_Charlie_p)))
(assert (forall ((x thing)) (or (= x Noun_charity) (= x Noun_college_c_education) (= x Noun_college_education) (= x Noun_college_Charlie_education) (= x Noun_Charlie_t) )))
(assert (forall ((x person)) (or (= x Noun_he) (= x Noun_Bob) (= x Noun_Charlie_p) )))
(declare-rel Verb_generous (person ))
(declare-rel Verb_generous_1 (person ))
(declare-rel Verb_not_generous (person ))
(declare-rel Verb_do (person thing ))
(declare-rel Verb_do_1 (person ))
(declare-rel Verb_do_2 (person thing ))
(declare-rel Verb_not_do (person thing ))
(declare-rel Verb_help (person person ))
(declare-rel Verb_help_1 (person ))
(declare-rel Verb_help_2 (person person ))
(declare-rel Verb_not_help (person person ))
(declare-rel Verb_grateful (person ))
(declare-rel Verb_grateful_1 (person ))
(declare-rel Verb_not_grateful (person ))
(declare-rel Verb_pay_for (person thing ))
(declare-rel Verb_pay_1 (person ))
(declare-rel Verb_pay_2 (person thing ))
(declare-rel Verb_not_pay_for (person thing ))
(declare-rel Verb_possess_pt (person thing))
(declare-rel Verb_possess_tt (thing thing))
(assert (forall ((a person) ) (= (Verb_do a Noun_charity)  (Verb_generous a) )))
(assert (forall ((b person) ) (= (Verb_generous b ) (not (Verb_not_generous b )))))
(assert (forall ((b person) ) (= (Verb_do b Noun_charity ) (not (Verb_not_do b Noun_charity )))))
(assert (forall ((b person) ) (=> (exists ((a person)) (Verb_help a b) ) (Verb_grateful b) )))
(assert (forall ((b person) (c person) ) (= (Verb_help b c ) (not (Verb_not_help b c )))))
(assert (forall ((b person) ) (= (Verb_grateful b ) (not (Verb_not_grateful b )))))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (= (and (Verb_pay_for a Noun_college_education) (Verb_possess_pt b Noun_college_education) )  (and (Verb_do a Noun_charity) (Verb_help a b)) ))))
(assert (forall ((b person) ) (= (Verb_pay_for b Noun_college_education ) (not (Verb_not_pay_for b Noun_college_education )))))
(assert (forall ((b person) (c person) ) (= (Verb_help b c ) (not (Verb_not_help b c )))))
(assert (forall ((b person) ) (= (Verb_do b Noun_charity ) (not (Verb_not_do b Noun_charity )))))
(assert (forall ((b person) ) (= (Verb_generous b ) (Verb_generous_1 b ))))
(assert (forall ((b person) ) (=> (Verb_do b Noun_charity ) (Verb_do_1 b ))))
(assert (forall ((b person) ) (= (Verb_do b Noun_charity ) (Verb_do_2 b Noun_charity ))))
(assert (forall ((b person) (c person) ) (=> (Verb_help b c ) (Verb_help_1 b ))))
(assert (forall ((b person) (c person) ) (= (Verb_help b c ) (Verb_help_2 b c ))))
(assert (forall ((b person) ) (= (Verb_grateful b ) (Verb_grateful_1 b ))))
(assert (forall ((b person) ) (=> (Verb_pay_for b Noun_college_education ) (Verb_pay_1 b ))))
(assert (forall ((b person) ) (= (Verb_pay_for b Noun_college_education ) (Verb_pay_2 b Noun_college_education ))))
(assert (and (Verb_pay_for Noun_Bob Noun_college_education )   (Verb_possess_pt Noun_Charlie_p Noun_college_education) (Verb_possess_tt Noun_Charlie_t Noun_college_education) ))
(assert (not  (Verb_grateful Noun_Bob )))
(check-sat)
