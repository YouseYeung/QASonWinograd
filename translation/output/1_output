(declare-sort thing)
(declare-sort person)
(declare-const Noun_good_luck thing)
(declare-const Noun_red_turban thing)
(declare-const Noun_she person)
(assert (not (= Noun_good_luck Noun_red_turban)))
(assert (forall ((x thing)) (or (= x Noun_good_luck) (= x Noun_red_turban) )))
(assert (forall ((x person)) (= x Noun_she)))
(declare-rel Verb_obvious ())
(declare-rel Verb_not_obvious ())
(declare-rel Verb_have (person thing person ))
(declare-rel Verb_have_1 (person ))
(declare-rel Verb_have_2 (person thing ))
(declare-rel Verb_have_3 (person thing person ))
(declare-rel Verb_not_have (person thing person ))
(declare-rel Verb_wear (person thing ))
(declare-rel Verb_wear_1 (person ))
(declare-rel Verb_wear_2 (person thing ))
(declare-rel Verb_not_wear (person thing ))
(declare-rel Verb_possess_pt (person thing))
(declare-rel Verb_possess_tt (thing thing))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (= (and (Verb_have a Noun_good_luck b) (Verb_obvious) ) ))))
(assert (= (Verb_obvious ) (not (Verb_not_obvious ))))
(assert (forall ((b person) (d person) ) (= (Verb_have b Noun_good_luck d ) (not (Verb_not_have b Noun_good_luck d )))))
(assert (forall ((a person) ) (= (Verb_wear a Noun_red_turban)  (Verb_obvious) )))
(assert (forall ((b person) ) (= (Verb_wear b Noun_red_turban ) (not (Verb_not_wear b Noun_red_turban )))))
(assert (forall ((b person) ) (= (Verb_obvious b ) (not (Verb_not_obvious b )))))
(assert (not  (Verb_wear_2 )))
(check-sat)
