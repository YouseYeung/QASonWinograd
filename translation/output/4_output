(declare-sort thing)
(declare-sort person)
(declare-const Noun_they person)
(declare-const Noun_many_people person)
(declare-const Noun_Paul_p person)
(declare-const Noun_Paul_book thing)
(declare-const Noun_Paul_t thing)
(assert (not (= Noun_they Noun_many_people)))
(assert (not (= Noun_they Noun_Paul_p)))
(assert (not (= Noun_many_people Noun_Paul_p)))
(assert (not (= Noun_Paul_book Noun_Paul_t)))
(assert (forall ((x person)) (or (= x Noun_they) (= x Noun_many_people) (= x Noun_Paul_p) )))
(assert (forall ((x thing)) (or (= x Noun_Paul_book) (= x Noun_Paul_t) )))
(declare-rel Verb_popular (thing ))
(declare-rel Verb_not_popular (thing ))
(declare-rel Verb_read (person thing ))
(declare-rel Verb_not_read (person thing ))
(declare-rel Verb_grip (person ))
(declare-rel Verb_not_grip (person ))
(declare-rel Verb_possess_pt (person thing))
(declare-rel Verb_possess_tt (thing thing))
(assert (forall ((a thing) (b person) ) (=> (Verb_read b a)  (or (Verb_grip b) (Verb_popular a)) )))
(assert (forall ((a person) (b thing) ) (=> (Verb_grip a)  (Verb_read a b) )))
(assert (forall ((a person) (b thing) ) (=> (Verb_popular b)  (Verb_read a b) )))
(assert (forall ((b thing) ) (= (Verb_popular b ) (not (Verb_not_popular b )))))
(assert (forall ((b person) (c thing) ) (= (Verb_read b c ) (not (Verb_not_read b c )))))
(assert (forall ((b person) ) (= (Verb_grip b ) (not (Verb_not_grip b )))))
(assert (Verb_read Noun_many_people Noun_Paul_book ) )
(assert (not  (Verb_grip Noun_Paul_t )))
(check-sat)
