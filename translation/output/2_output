(declare-sort thing)
(declare-sort person)
(declare-const Noun_personal_somebody_problem thing)
(declare-const Noun_personal_problem thing)
(declare-const Noun_personal_Ann_problem thing)
(declare-const Noun_Ann_t thing)
(declare-const Noun_personal_b_problem thing)
(declare-const Noun_Susan person)
(declare-const Noun_Ann_p person)
(declare-const Noun_she person)
(assert (not (= Noun_personal_somebody_problem Noun_personal_problem)))
(assert (not (= Noun_personal_somebody_problem Noun_personal_Ann_problem)))
(assert (not (= Noun_personal_somebody_problem Noun_Ann_t)))
(assert (not (= Noun_personal_somebody_problem Noun_personal_b_problem)))
(assert (not (= Noun_personal_problem Noun_personal_Ann_problem)))
(assert (not (= Noun_personal_problem Noun_Ann_t)))
(assert (not (= Noun_personal_problem Noun_personal_b_problem)))
(assert (not (= Noun_personal_Ann_problem Noun_Ann_t)))
(assert (not (= Noun_personal_Ann_problem Noun_personal_b_problem)))
(assert (not (= Noun_Ann_t Noun_personal_b_problem)))
(assert (not (= Noun_Susan Noun_Ann_p)))
(assert (not (= Noun_Susan Noun_she)))
(assert (not (= Noun_Ann_p Noun_she)))
(assert (forall ((x thing)) (or (= x Noun_personal_somebody_problem) (= x Noun_personal_problem) (= x Noun_personal_Ann_problem) (= x Noun_Ann_t) (= x Noun_personal_b_problem) )))
(assert (forall ((x person)) (or (= x Noun_Susan) (= x Noun_Ann_p) (= x Noun_she) )))
(declare-rel Verb_know_about (person thing ))
(declare-rel Verb_know_1 (person ))
(declare-rel Verb_know_2 (person thing ))
(declare-rel Verb_not_know_about (person thing ))
(declare-rel Verb_nosy (person ))
(declare-rel Verb_not_nosy (person ))
(declare-rel Verb_indiscreet (person ))
(declare-rel Verb_not_indiscreet (person ))
(declare-rel Verb_possess_pt (person thing))
(declare-rel Verb_possess_tt (thing thing))
(assert (forall ((a person) ) (= (Verb_nosy a)  (exists ((b person)) (and (Verb_know_about a Noun_personal_problem) (Verb_possess_pt b Noun_personal_problem) ) ))))
(assert (forall ((b person) ) (= (Verb_know_about b Noun_personal_problem ) (not (Verb_not_know_about b Noun_personal_problem )))))
(assert (forall ((b person) ) (= (Verb_nosy b ) (not (Verb_not_nosy b )))))
(assert (forall ((b person) ) (= (Verb_indiscreet b)  (exists ((a person)) (and (Verb_know_about a Noun_personal_problem) (Verb_possess_pt b Noun_personal_problem) ) ))))
(assert (forall ((b person) ) (= (Verb_know_about b Noun_personal_problem ) (not (Verb_not_know_about b Noun_personal_problem )))))
(assert (forall ((b person) ) (= (Verb_indiscreet b ) (not (Verb_not_indiscreet b )))))
(assert (forall ((b person) ) (=> (Verb_know_about b Noun_personal_problem ) (Verb_know_1 b ))))
(assert (forall ((b person) ) (= (Verb_know_about b Noun_personal_problem ) (Verb_know_2 b Noun_personal_problem ))))
(assert (= (Verb_indiscreet Noun_Susan ) (not (Verb_indiscreet Noun_Ann_p )) ))
(assert (= (Verb_indiscreet Noun_Ann_p ) (not (Verb_indiscreet Noun_Susan )) ))
(assert (and (Verb_know_about Noun_Susan Noun_personal_problem )   (Verb_possess_pt Noun_Ann_p Noun_personal_problem) (Verb_possess_tt Noun_Ann_t Noun_personal_problem) ))
(assert (not  (Verb_indiscreet Noun_Ann_p )))
(check-sat)
