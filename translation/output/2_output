(declare-sort thing)
(declare-sort person)
(declare-const Noun_Sid person)
(declare-const Noun_he_p person)
(declare-const Noun_mark person)
(declare-const Noun_he person)
(declare-const Noun_he_theory thing)
(declare-const Noun_theory thing)
(declare-const Noun_he_t thing)
(assert (not (= Noun_Sid Noun_he_p)))
(assert (not (= Noun_Sid Noun_mark)))
(assert (not (= Noun_Sid Noun_he)))
(assert (not (= Noun_he_p Noun_mark)))
(assert (not (= Noun_he_p Noun_he)))
(assert (not (= Noun_mark Noun_he)))
(assert (not (= Noun_he_theory Noun_theory)))
(assert (not (= Noun_he_theory Noun_he_t)))
(assert (not (= Noun_theory Noun_he_t)))
(assert (forall ((x person)) (or (= x Noun_Sid) (= x Noun_he_p) (= x Noun_mark) (= x Noun_he) )))
(assert (forall ((x thing)) (or (= x Noun_he_theory) (= x Noun_theory) (= x Noun_he_t) )))
(declare-rel Verb_explain_to (person thing person ))
(declare-rel Verb_explain_1 (person ))
(declare-rel Verb_explain_2 (person thing ))
(declare-rel Verb_explain_3 (person thing person ))
(declare-rel Verb_not_explain_to (person thing person ))
(declare-rel Verb_convince (person person ))
(declare-rel Verb_not_convince (person person ))
(declare-rel Verb_understand (person person ))
(declare-rel Verb_not_understand (person person ))
(declare-rel Verb_possess_pt (person thing))
(declare-rel Verb_possess_tt (thing thing))
(assert (forall ((a person) (c person) ) (=> (not (= a c)) (=> (exists ((b thing)) (Verb_explain_to a b c) ) (and (Verb_convince a c) (Verb_understand c a)) ))))
(assert (forall ((b person) (c thing) (d person) ) (= (Verb_explain_to b c d ) (not (Verb_not_explain_to b c d )))))
(assert (forall ((b person) (c person) ) (= (Verb_convince b c ) (not (Verb_not_convince b c )))))
(assert (forall ((b person) (c person) ) (= (Verb_understand b c ) (not (Verb_not_understand b c )))))
(assert (forall ((b person) (c thing) (d person) ) (=> (Verb_explain_to b c d ) (Verb_explain_1 b ))))
(assert (forall ((b person) (c thing) (d person) ) (=> (Verb_explain_to b c d ) (Verb_explain_2 b c ))))
(assert (forall ((b person) (c thing) (d person) ) (= (Verb_explain_to b c d ) (Verb_explain_3 b c d ))))
(assert (= (Verb_not_understand Noun_Sid Noun_mark ) (not (Verb_not_understand Noun_mark Noun_Sid )) ))
(assert (= (Verb_not_understand Noun_mark Noun_Sid ) (not (Verb_not_understand Noun_Sid Noun_mark )) ))
(assert (Verb_explain_to Noun_Sid Noun_he_theory Noun_mark ) )
(assert (not  (Verb_not_understand Noun_mark Noun_Sid )))
(check-sat)
