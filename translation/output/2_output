(declare-sort thing)
(declare-sort person)
(declare-const Noun_chair thing)
(declare-const Noun_it thing)
(declare-const Noun_instrument thing)
(declare-const Noun_piano thing)
(declare-const Noun_he person)
(assert (not (= Noun_chair Noun_it)))
(assert (not (= Noun_chair Noun_instrument)))
(assert (not (= Noun_chair Noun_piano)))
(assert (not (= Noun_it Noun_instrument)))
(assert (not (= Noun_it Noun_piano)))
(assert (not (= Noun_instrument Noun_piano)))
(assert (forall ((x thing)) (or (= x Noun_chair) (= x Noun_it) (= x Noun_instrument) (= x Noun_piano) )))
(assert (forall ((x person)) (= x Noun_he)))
(declare-rel Verb_stand (person ))
(declare-rel Verb_not_stand (person ))
(declare-rel Verb_break (thing ))
(declare-rel Verb_not_break (thing ))
(declare-rel Verb_have (person ))
(declare-rel Verb_not_have (person ))
(declare-rel Verb_sing (person ))
(declare-rel Verb_not_sing (person ))
(declare-rel Verb_instrument (thing ))
(declare-rel Verb_not_instrument (thing ))
(assert (= (Verb_break Noun_chair)  (exists ((b person)) (and (Verb_have b) (Verb_stand b) ))))
(assert (forall ((b person) ) (= (Verb_stand b ) (not (Verb_not_stand b )))))
(assert (= (Verb_break Noun_chair ) (not (Verb_not_break Noun_chair ))))
(assert (forall ((b person) ) (= (Verb_have b ) (not (Verb_not_have b )))))
(assert (forall ((b thing) ) (= (=> (Verb_instrument b) (Verb_break b))  (exists ((c person)) (and (Verb_have c) (Verb_sing c) )))))
(assert (forall ((b person) ) (= (Verb_sing b ) (not (Verb_not_sing b )))))
(assert (= (Verb_break Noun_instrument ) (not (Verb_not_break Noun_instrument ))))
(assert (forall ((b person) ) (= (Verb_have b ) (not (Verb_not_have b )))))
(assert (Verb_instrument Noun_piano ))
(assert (= (Verb_instrument Noun_piano ) (not (Verb_not_instrument Noun_piano ))))
(assert (and (Verb_have Noun_he ) (Verb_sing Noun_he ) ))
(assert (not  (Verb_break Noun_instrument )))
(check-sat)
