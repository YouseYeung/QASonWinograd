(declare-sort thing)
(declare-sort person)
(declare-const Noun_it thing)
(declare-const Noun_bottle thing)
(declare-const Noun_table thing)
(declare-const Noun_I person)
(assert (not (= Noun_it Noun_bottle)))
(assert (not (= Noun_it Noun_table)))
(assert (not (= Noun_bottle Noun_table)))
(assert (forall ((x thing)) (or (= x Noun_it) (= x Noun_bottle) (= x Noun_table) )))
(assert (forall ((x person)) (= x Noun_I)))
(declare-rel Verb_not_balance_on (person thing thing ))
(declare-rel Verb_balance_1 (person ))
(declare-rel Verb_balance_2 (person thing ))
(declare-rel Verb_balance_3 (person thing thing ))
(declare-rel Verb_uneven (thing ))
(declare-rel Verb_not_uneven (thing ))
(declare-rel Verb_heavy_top (thing ))
(declare-rel Verb_heavy_1 (thing ))
(declare-rel Verb_not_heavy_top (thing ))
(assert (forall ((b thing) (c thing) ) (=> (not (= b c)) (=> (exists ((a person)) (Verb_not_balance_on a b c) ) (Verb_heavy_top b) ))))
(assert (forall ((b thing) (c thing) ) (=> (not (= b c)) (=> (exists ((a person)) (Verb_not_balance_on a b c) ) (Verb_uneven c) ))))
(assert (forall ((b thing) ) (= (Verb_uneven b ) (not (Verb_not_uneven b )))))
(assert (forall ((b thing) ) (= (Verb_heavy_top b ) (not (Verb_not_heavy_top b )))))
(assert (forall ((b person) (c thing) (d thing) ) (=> (Verb_not_balance_on b c d ) (Verb_balance_1 b ))))
(assert (forall ((b person) (c thing) (d thing) ) (=> (Verb_not_balance_on b c d ) (Verb_balance_2 b c ))))
(assert (forall ((b person) (c thing) (d thing) ) (= (Verb_not_balance_on b c d ) (Verb_balance_3 b c d ))))
(assert (forall ((b thing) ) (= (Verb_heavy_top b ) (Verb_heavy_1 b ))))
(assert (= (Verb_uneven Noun_bottle ) (not (Verb_uneven Noun_table )) ))
(assert (= (Verb_uneven Noun_table ) (not (Verb_uneven Noun_bottle )) ))
(assert (Verb_balance_3 Noun_I Noun_bottle Noun_table ) )
(assert (not  (Verb_uneven Noun_table )))
(check-sat)
