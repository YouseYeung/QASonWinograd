(declare-sort thing)
(declare-sort person)
(declare-const Noun_permit thing)
(declare-const Noun_violence thing)
(declare-const Noun_they person)
(declare-const Noun_city_councilmen person)
(declare-const Noun_demonstrator person)
(assert (not (= Noun_permit Noun_violence)))
(assert (not (= Noun_they Noun_city_councilmen)))
(assert (not (= Noun_they Noun_demonstrator)))
(assert (not (= Noun_city_councilmen Noun_demonstrator)))
(assert (forall ((x thing)) (or (= x Noun_permit) (= x Noun_violence) )))
(assert (forall ((x person)) (or (= x Noun_they) (= x Noun_city_councilmen) (= x Noun_demonstrator) )))
(declare-rel Verb_refuse (person person thing ))
(declare-rel Verb_advocate (person thing ))
(declare-rel Verb_fear (person thing ))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (= (and (Verb_fear a Noun_violence) (Verb_advocate b Noun_violence))  (Verb_refuse a b Noun_permit) ))))
(assert (= (Verb_advocate Noun_city_councilmen Noun_violence ) (not (Verb_advocate Noun_demonstrator Noun_violence )) ))
(assert (= (Verb_advocate Noun_demonstrator Noun_violence ) (not (Verb_advocate Noun_city_councilmen Noun_violence )) ))
(assert (Verb_refuse Noun_city_councilmen Noun_demonstrator Noun_permit ) )
(assert (not  (Verb_advocate Noun_city_councilmen Noun_violence )))
(check-sat)
