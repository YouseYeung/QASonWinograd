(declare-sort thing)
(declare-sort person)
(declare-const Noun_sack thing)
(declare-const Noun_bag thing)
(declare-const Noun_it thing)
(assert (not (= Noun_sack Noun_bag)))
(assert (not (= Noun_sack Noun_it)))
(assert (not (= Noun_bag Noun_it)))
(assert (forall ((x thing)) (or (= x Noun_sack) (= x Noun_bag) (= x Noun_it) )))
(declare-rel Verb_move (thing ))
(declare-rel Verb_not_move (thing ))
(declare-rel Verb_place_above (thing thing ))
(declare-rel Verb_place_1 (thing ))
(declare-rel Verb_place_2 (thing thing ))
(declare-rel Verb_not_place_above (thing thing ))
(declare-rel Verb_place_below (thing thing ))
(declare-rel Verb_not_place_below (thing thing ))
(declare-rel Verb_have (thing ))
(declare-rel Verb_not_have (thing ))
(assert (forall ((a thing) (b thing) ) (=> (not (= a b)) (=> (or (Verb_place_above a b) (Verb_place_below b a))  (and (Verb_have a) (Verb_move a) )))))
(assert (forall ((b thing) ) (= (Verb_move b ) (not (Verb_not_move b )))))
(assert (forall ((b thing) (c thing) ) (= (Verb_place_above b c ) (not (Verb_not_place_above b c )))))
(assert (forall ((b thing) (c thing) ) (= (Verb_place_below b c ) (not (Verb_not_place_below b c )))))
(assert (forall ((b thing) ) (= (Verb_have b ) (not (Verb_not_have b )))))
(assert (forall ((b thing) (c thing) ) (=> (Verb_place_above b c ) (Verb_place_1 b ))))
(assert (forall ((b thing) (c thing) ) (= (Verb_place_above b c ) (Verb_place_2 b c ))))
(assert (= (Verb_have Noun_sack ) (not (Verb_have Noun_bag )) ))
(assert (= (Verb_have Noun_bag ) (not (Verb_have Noun_sack )) ))
(assert (= (Verb_move Noun_sack ) (not (Verb_move Noun_bag )) ))
(assert (= (Verb_move Noun_bag ) (not (Verb_move Noun_sack )) ))
(assert (Verb_place_below Noun_sack Noun_bag ) )
(assert (not (and  (Verb_have Noun_bag ) (Verb_move Noun_sack ))))
(check-sat)
