(declare-sort thing)
(declare-sort person)
(declare-const Noun_she person)
(declare-const Noun_it person)
(declare-const Noun_Susan person)
(assert (not (= Noun_she Noun_it)))
(assert (not (= Noun_she Noun_Susan)))
(assert (not (= Noun_it Noun_Susan)))
(assert (forall ((x person)) (or (= x Noun_she) (= x Noun_it) (= x Noun_Susan) )))
(declare-rel Verb_tell_to (person thing person ))
(declare-rel Verb_tell_1 (person ))
(declare-rel Verb_tell_2 (person thing ))
(declare-rel Verb_tell_3 (person thing person ))
(declare-rel Verb_know (person thing ))
(declare-rel Verb_tell (person thing ))
(declare-rel Verb_possess_pt (person thing))
(declare-rel Verb_possess_tt (thing thing))
(assert (forall ((a person) ) (=> (exists ((d thing)) (Verb_know a d))   (exists ((c person)) (Verb_tell_to a d c))  )))
(assert (forall ((a person) (c person) ) (=> (not (= a c)) (= (Verb_tell c)  (Verb_know a d) ))))
(assert (forall ((b person) (c thing) (d person) ) (=> (Verb_tell_to b c d ) (Verb_tell_1 b ))))
(assert (forall ((b person) (c thing) (d person) ) (=> (Verb_tell_to b c d ) (Verb_tell_2 b c ))))
(assert (forall ((b person) (c thing) (d person) ) (= (Verb_tell_to b c d ) (Verb_tell_3 b c d ))))
(assert (Verb_know Noun_Susan ) )
(assert (not  (Verb_tell_2 Noun_Susan Noun_accident )))
(check-sat)
