(declare-sort thing)
(declare-const bed thing)
(declare-const he_shoulder thing)
(declare-const shoulder thing)
(declare-const he_t thing)
(declare-sort person)
(declare-const man person)
(declare-const boy person)
(declare-const he_p person)
(assert (not (= bed he_shoulder)))
(assert (not (= bed shoulder)))
(assert (not (= bed he_t)))
(assert (not (= he_shoulder shoulder)))
(assert (not (= he_shoulder he_t)))
(assert (not (= shoulder he_t)))
(assert (not (= man boy)))
(assert (not (= man he_p)))
(assert (not (= boy he_p)))
(assert (forall ((x thing)) (or (= x bed) (= x he_shoulder) (= x shoulder) (= x he_t) )))
(assert (forall ((x person)) (or (= x man) (= x boy) (= x he_p) )))
(declare-rel lift_onto (person person thing ))
(declare-rel lift_1 (person ))
(declare-rel lift_2 (person person ))
(declare-rel lift_3 (person person thing ))
(declare-rel possess (person thing ))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (= (lift_onto a b bed)  (possess b bed) ))))
(assert (forall ((a person) ) (=  (possess a shoulder) )))
(assert (forall ((b person) (c person) ) (=> (lift_onto b c bed ) (lift_1 b ))))
(assert (forall ((b person) (c person) ) (=> (lift_onto b c bed ) (lift_2 b c ))))
(assert (forall ((b person) (c person) ) (= (lift_onto b c bed ) (lift_3 b c bed ))))
(assert (lift_onto man boy he_shoulder ) )
(assert (not (possess_t he_p shoulder)))
(check-sat)
