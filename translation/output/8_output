(declare-sort thing)
(declare-sort person)
(declare-const Noun_question thing)
(declare-const Noun_it thing)
(declare-const Noun_lawyer person)
(declare-const Noun_witness person)
(declare-const Noun_he person)
(assert (not (= Noun_question Noun_it)))
(assert (not (= Noun_lawyer Noun_witness)))
(assert (not (= Noun_lawyer Noun_he)))
(assert (not (= Noun_witness Noun_he)))
(assert (forall ((x thing)) (or (= x Noun_question) (= x Noun_it) )))
(assert (forall ((x person)) (or (= x Noun_lawyer) (= x Noun_witness) (= x Noun_he) )))
(declare-rel Verb__repeat (person thing ))
(declare-rel Verb_answer (person thing ))
(declare-rel Verb_ask (person person thing ))
(declare-rel Verb_reluctant (person ))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (=> (Verb_ask a b Noun_question)  (and (and (Verb_reluctant a) (Verb_reluctant b)) (Verb__repeat a Noun_question) (Verb_answer b Noun_question) )))))
(assert (= (Verb_reluctant Noun_lawyer ) (not (Verb_reluctant Noun_witness )) ))
(assert (= (Verb_reluctant Noun_witness ) (not (Verb_reluctant Noun_lawyer )) ))
(assert (= (Verb_answer Noun_lawyer Noun_question ) (not (Verb_answer Noun_witness Noun_question )) ))
(assert (= (Verb_answer Noun_witness Noun_question ) (not (Verb_answer Noun_lawyer Noun_question )) ))
(assert (Verb_ask Noun_lawyer Noun_witness Noun_question ) )
(assert (not (and  (Verb_reluctant Noun_he ) (Verb_answer Noun_witness Noun_question ))))
(check-sat)
