  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Joan made sure to thank Susan for all the help she had given {
    Tokens: [joan, made, sure, to, thank, susan, for, all, the, help, she, had, given]
    Lemmatized tokens: [Joan, make, sure, to, thank, Susan, for, all, the, help, she, have, give]
    POS tags: [NNP, VBD, JJ, TO, VB, NNP, IN, PDT, DT, NN, PRP, VBD-AUX, VBN]
    NER tags: [PERSON, O, O, O, O, PERSON, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, xcomp->2], [xcomp->4], [], [mark->3, dobj->5], [nmod:for->9], [], [], [], [case->6, det:predet->7, det->8, acl:relcl->12], [], [], [nsubj->10, aux->11]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person C does give help to person B , or person B does receive help from person C , then person B might make sure to thank person C {
    Tokens: [if, person, c, does, give, help, to, person, b, ,, or, person, b, does, receive, help, from, person, c, ,, then, person, b, might, make, sure, to, thank, person, c]
    Lemmatized tokens: [if, person, c, do, give, help, to, person, b, ,, or, person, b, do, receive, help, from, person, c, ,, then, person, b, might, make, sure, to, thank, person, c]
    POS tags: [IN, NN, NN, VBD-AUX, VB, NN, TO, NN, NN, ,, CC, NN, NN, VBD-AUX, VB, NN, IN, NN, NN, ,, RB, NN, NN, VBD-AUX, VB, JJ, TO, VB, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, aux->3, punct->19, dobj->5, nmod:to->8, parataxis->24, punct->9, cc->10, conj:or->14], [], [], [], [case->6, compound->7], [], [], [], [compound->11], [], [dobj->15, nmod:from->18, nsubj->12, aux->13], [], [], [], [case->16, compound->17], [], [], [], [compound->21], [], [advmod->20, nsubj->22, aux->23, xcomp->25], [xcomp->27], [], [mark->26, dobj->29], [], [compound->28]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person C does give help to person B , then person B does receive help from person C {
    Tokens: [if, person, c, does, give, help, to, person, b, ,, then, person, b, does, receive, help, from, person, c]
    Lemmatized tokens: [if, person, c, do, give, help, to, person, b, ,, then, person, b, do, receive, help, from, person, c]
    POS tags: [IN, NN, NN, VBD-AUX, VB, NN, TO, NN, NN, ,, RB, NN, NN, VBD-AUX, VB, NN, IN, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, aux->3, dobj->5, nmod:to->8, punct->9, parataxis->14], [], [], [], [case->6, compound->7], [], [], [], [compound->11], [], [dobj->15, nmod:from->18, advmod->10, nsubj->12, aux->13], [], [], [], [case->16, compound->17]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person C does receive help from person B, then person C does receive help {
    Tokens: [if, person, c, does, receive, help, from, person, b, ,, then, person, c, does, receive, help]
    Lemmatized tokens: [if, person, c, do, receive, help, from, person, b, ,, then, person, c, do, receive, help]
    POS tags: [IN, NN, NN, VBD-AUX, VB, NN, IN, NN, NN, ,, RB, NN, NN, VBD-AUX, VB, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, aux->3, dobj->5, nmod:from->8, punct->9, parataxis->14], [], [], [], [case->6, compound->7], [], [], [], [compound->11], [], [dobj->15, advmod->10, nsubj->12, aux->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who had given help {
    Tokens: [who, had, given, help]
    Lemmatized tokens: [who, have, give, help]
    POS tags: [WP, VBD-AUX, VBN, NN]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, dobj->3], []]
  }
