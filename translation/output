
  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The city councilmen refused the demonstrators a permit, because they feared violence. {
    Tokens: [the, city, councilmen, refused, the, demonstrators, a, permit, ,, because, they, feared, violence, .]
    Lemmatized tokens: [the, city, councilmen, refuse, the, demonstrator, a, permit, ,, because, they, fear, violence, .]
    POS tags: [DT, NN, NN, VBD, DT, NNS, DT, NN, ,, IN, PRP, VBD, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [det->0, compound->1], [nsubj->2, xcomp->7, punct->8, advcl->11, punct->13], [], [det->4], [], [nsubj->5, det->6], [], [], [], [mark->9, nsubj->10, dobj->12], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B does fear violence, and person C does advocate violence, then person B might refuse person C a permit. {
    Tokens: [if, person, b, does, fear, violence, ,, and, person, c, does, advocate, violence, ,, then, person, b, might, refuse, person, c, a, permit, .]
    Lemmatized tokens: [if, person, b, do, fear, violence, ,, and, person, c, do, advocate, violence, ,, then, person, b, might, refuse, person, c, a, permit, .]
    POS tags: [IN, NN, NN, VBD-AUX, VB, NN, ,, CC, NN, NN, VBD-AUX, VB, NN, ,, RB, NN, NN, VBD-AUX, VB, NN, NN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, aux->3, dobj->5, punct->6, cc->7, conj:and->11], [], [], [], [], [compound->8], [], [nsubj->9, aux->10, dobj->12], [], [], [], [], [compound->15, advmod->14], [], [nsubj->16, aux->17, advcl->4, iobj->20, dobj->22, punct->23, advcl->11, punct->13], [], [compound->19], [], [det->21], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who feared violence {
    Tokens: [who, feared, violence]
    Lemmatized tokens: [who, fear, violence]
    POS tags: [WP, VBD, NN]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The city councilmen refused the demonstrators a permit, because they advocated violence. {
    Tokens: [the, city, councilmen, refused, the, demonstrators, a, permit, ,, because, they, advocated, violence, .]
    Lemmatized tokens: [the, city, councilmen, refuse, the, demonstrator, a, permit, ,, because, they, advocate, violence, .]
    POS tags: [DT, NN, NN, VBD, DT, NNS, DT, NN, ,, IN, PRP, VBD, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [det->0, compound->1], [nsubj->2, xcomp->7, punct->8, advcl->11, punct->13], [], [det->4], [], [nsubj->5, det->6], [], [], [], [mark->9, nsubj->10, dobj->12], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B does fear violence, and person C does advocate violence, then person B might refuse person C a permit. {
    Tokens: [if, person, b, does, fear, violence, ,, and, person, c, does, advocate, violence, ,, then, person, b, might, refuse, person, c, a, permit, .]
    Lemmatized tokens: [if, person, b, do, fear, violence, ,, and, person, c, do, advocate, violence, ,, then, person, b, might, refuse, person, c, a, permit, .]
    POS tags: [IN, NN, NN, VBD-AUX, VB, NN, ,, CC, NN, NN, VBD-AUX, VB, NN, ,, RB, NN, NN, VBD-AUX, VB, NN, NN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, aux->3, dobj->5, punct->6, cc->7, conj:and->11], [], [], [], [], [compound->8], [], [nsubj->9, aux->10, dobj->12], [], [], [], [], [compound->15, advmod->14], [], [nsubj->16, aux->17, advcl->4, iobj->20, dobj->22, punct->23, advcl->11, punct->13], [], [compound->19], [], [det->21], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who advocated violence {
    Tokens: [who, advocated, violence]
    Lemmatized tokens: [who, advocate, violence]
    POS tags: [WP, VBN, NN]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The trophy doesn't fit into the brown suitcase, because it's too small. {
    Tokens: [the, trophy, does, n't, fit, into, the, brown, suitcase, ,, because, it, 's, too, small, .]
    Lemmatized tokens: [the, trophy, do, not, fit, into, the, brown, suitcase, ,, because, it, be, too, small, .]
    POS tags: [DT, NN, VBD-AUX, RB, VB, IN, DT, JJ, NN, ,, IN, PRP, VBZ, RB, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [], [punct->15, nsubj->1, aux->2, neg->3, nmod:into->8, punct->9, advcl->14], [], [], [], [case->5, det->6, amod->7], [], [], [], [], [], [mark->10, nsubj->11, cop->12, advmod->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is big and thing C is small, then thing B doesn’t fit into thing C . {
    Tokens: [if, thing, b, is, big, and, thing, c, is, small, ,, then, thing, b, does, n't, fit, into, thing, c, .]
    Lemmatized tokens: [if, thing, b, be, big, and, thing, c, be, small, ,, then, thing, b, do, not, fit, into, thing, c, .]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, JJ, ,, RB, NN, NN, VBD-AUX, RB, VB, IN, NN, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3, cc->5, conj:and->9], [], [], [compound->6], [], [nsubj->7, cop->8], [], [], [], [advmod->11, compound->12], [], [], [neg->15, nmod:into->19, advcl->4, punct->20, advcl->9, punct->10, nsubj->13, aux->14], [], [], [case->17, compound->18], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What is too small {
    Tokens: [what, is, too, small]
    Lemmatized tokens: [what, be, too, small]
    POS tags: [WP, VBD-AUX, RB, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, advmod->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The trophy doesn't fit into the brown suitcase, because it's too large. {
    Tokens: [the, trophy, does, n't, fit, into, the, brown, suitcase, ,, because, it, 's, too, large, .]
    Lemmatized tokens: [the, trophy, do, not, fit, into, the, brown, suitcase, ,, because, it, be, too, large, .]
    POS tags: [DT, NN, VBD-AUX, RB, VB, IN, DT, JJ, NN, ,, IN, PRP, VBZ, RB, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [], [punct->15, nsubj->1, aux->2, neg->3, nmod:into->8, punct->9, advcl->14], [], [], [], [case->5, det->6, amod->7], [], [], [], [], [], [mark->10, nsubj->11, cop->12, advmod->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is big and thing C is small, then thing B doesn’t fit into thing C . {
    Tokens: [if, thing, b, is, big, and, thing, c, is, small, ,, then, thing, b, does, n't, fit, into, thing, c, .]
    Lemmatized tokens: [if, thing, b, be, big, and, thing, c, be, small, ,, then, thing, b, do, not, fit, into, thing, c, .]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, JJ, ,, RB, NN, NN, VBD-AUX, RB, VB, IN, NN, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3, cc->5, conj:and->9], [], [], [compound->6], [], [nsubj->7, cop->8], [], [], [], [advmod->11, compound->12], [], [], [neg->15, nmod:into->19, advcl->4, punct->20, advcl->9, punct->10, nsubj->13, aux->14], [], [], [case->17, compound->18], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What is too large {
    Tokens: [what, is, too, large]
    Lemmatized tokens: [what, be, too, large]
    POS tags: [WP, VBD-AUX, RB, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, advmod->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Joan made sure to thank Susan for all the help she had given. {
    Tokens: [joan, made, sure, to, thank, susan, for, all, the, help, she, had, given, .]
    Lemmatized tokens: [Joan, make, sure, to, thank, Susan, for, all, the, help, she, have, give, .]
    POS tags: [NNP, VBD, JJ, TO, VB, NNP, IN, PDT, DT, NN, PRP, VBD-AUX, VBN, .]
    NER tags: [PERSON, O, O, O, O, PERSON, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, xcomp->2, punct->13], [xcomp->4], [], [mark->3, dobj->5], [nmod:for->9], [], [], [], [case->6, det:predet->7, det->8, acl:relcl->12], [], [], [nsubj->10, aux->11], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person C does give help to person B , or person B does receive help from person C , then person B might make sure to thank person C {
    Tokens: [if, person, c, does, give, help, to, person, b, ,, or, person, b, does, receive, help, from, person, c, ,, then, person, b, might, make, sure, to, thank, person, c]
    Lemmatized tokens: [if, person, c, do, give, help, to, person, b, ,, or, person, b, do, receive, help, from, person, c, ,, then, person, b, might, make, sure, to, thank, person, c]
    POS tags: [IN, NN, NN, VBD-AUX, VB, NN, TO, NN, NN, ,, CC, NN, NN, VBD-AUX, VB, NN, IN, NN, NN, ,, RB, NN, NN, VBD-AUX, VB, JJ, TO, VB, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, aux->3, punct->19, dobj->5, nmod:to->8, parataxis->24, punct->9, cc->10, conj:or->14], [], [], [], [case->6, compound->7], [], [], [], [compound->11], [], [dobj->15, nmod:from->18, nsubj->12, aux->13], [], [], [], [case->16, compound->17], [], [], [], [compound->21], [], [advmod->20, nsubj->22, aux->23, xcomp->25], [xcomp->27], [], [mark->26, dobj->29], [], [compound->28]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person C does give help to person B , then person B does receive help from person C {
    Tokens: [if, person, c, does, give, help, to, person, b, ,, then, person, b, does, receive, help, from, person, c]
    Lemmatized tokens: [if, person, c, do, give, help, to, person, b, ,, then, person, b, do, receive, help, from, person, c]
    POS tags: [IN, NN, NN, VBD-AUX, VB, NN, TO, NN, NN, ,, RB, NN, NN, VBD-AUX, VB, NN, IN, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, aux->3, dobj->5, nmod:to->8, punct->9, parataxis->14], [], [], [], [case->6, compound->7], [], [], [], [compound->11], [], [dobj->15, nmod:from->18, advmod->10, nsubj->12, aux->13], [], [], [], [case->16, compound->17]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person C does receive help from person B, then person C does receive help. {
    Tokens: [if, person, c, does, receive, help, from, person, b, ,, then, person, c, does, receive, help, .]
    Lemmatized tokens: [if, person, c, do, receive, help, from, person, b, ,, then, person, c, do, receive, help, .]
    POS tags: [IN, NN, NN, VBD-AUX, VB, NN, IN, NN, NN, ,, RB, NN, NN, VBD-AUX, VB, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, aux->3, dobj->5, nmod:from->8], [], [], [], [case->6, compound->7], [], [], [], [advmod->10, compound->11], [], [dobj->15, punct->16, advcl->4, punct->9, nsubj->12, aux->13], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who had given help {
    Tokens: [who, had, given, help]
    Lemmatized tokens: [who, have, give, help]
    POS tags: [WP, VBD-AUX, VBN, NN]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, dobj->3], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Joan made sure to thank Susan for all the help she had received. {
    Tokens: [joan, made, sure, to, thank, susan, for, all, the, help, she, had, received, .]
    Lemmatized tokens: [Joan, make, sure, to, thank, Susan, for, all, the, help, she, have, receive, .]
    POS tags: [NNP, VBD, JJ, TO, VB, NNP, IN, PDT, DT, NN, PRP, VBD-AUX, VBN, .]
    NER tags: [PERSON, O, O, O, O, PERSON, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, xcomp->2, punct->13], [xcomp->4], [], [mark->3, dobj->5], [nmod:for->9], [], [], [], [case->6, det:predet->7, det->8, acl:relcl->12], [], [], [nsubj->10, aux->11], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person C does give help to person B , or person B does receive help from person C , then person B might make sure to thank person C {
    Tokens: [if, person, c, does, give, help, to, person, b, ,, or, person, b, does, receive, help, from, person, c, ,, then, person, b, might, make, sure, to, thank, person, c]
    Lemmatized tokens: [if, person, c, do, give, help, to, person, b, ,, or, person, b, do, receive, help, from, person, c, ,, then, person, b, might, make, sure, to, thank, person, c]
    POS tags: [IN, NN, NN, VBD-AUX, VB, NN, TO, NN, NN, ,, CC, NN, NN, VBD-AUX, VB, NN, IN, NN, NN, ,, RB, NN, NN, VBD-AUX, VB, JJ, TO, VB, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, aux->3, punct->19, dobj->5, nmod:to->8, parataxis->24, punct->9, cc->10, conj:or->14], [], [], [], [case->6, compound->7], [], [], [], [compound->11], [], [dobj->15, nmod:from->18, nsubj->12, aux->13], [], [], [], [case->16, compound->17], [], [], [], [compound->21], [], [advmod->20, nsubj->22, aux->23, xcomp->25], [xcomp->27], [], [mark->26, dobj->29], [], [compound->28]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person C does give help to person B , then person B does receive help from person C {
    Tokens: [if, person, c, does, give, help, to, person, b, ,, then, person, b, does, receive, help, from, person, c]
    Lemmatized tokens: [if, person, c, do, give, help, to, person, b, ,, then, person, b, do, receive, help, from, person, c]
    POS tags: [IN, NN, NN, VBD-AUX, VB, NN, TO, NN, NN, ,, RB, NN, NN, VBD-AUX, VB, NN, IN, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, aux->3, dobj->5, nmod:to->8, punct->9, parataxis->14], [], [], [], [case->6, compound->7], [], [], [], [compound->11], [], [dobj->15, nmod:from->18, advmod->10, nsubj->12, aux->13], [], [], [], [case->16, compound->17]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person C does receive help from person B, then person C does receive help. {
    Tokens: [if, person, c, does, receive, help, from, person, b, ,, then, person, c, does, receive, help, .]
    Lemmatized tokens: [if, person, c, do, receive, help, from, person, b, ,, then, person, c, do, receive, help, .]
    POS tags: [IN, NN, NN, VBD-AUX, VB, NN, IN, NN, NN, ,, RB, NN, NN, VBD-AUX, VB, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, aux->3, dobj->5, nmod:from->8], [], [], [], [case->6, compound->7], [], [], [], [advmod->10, compound->11], [], [dobj->15, punct->16, advcl->4, punct->9, nsubj->12, aux->13], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who had received help {
    Tokens: [who, had, received, help]
    Lemmatized tokens: [who, have, receive, help]
    POS tags: [WP, VBD-AUX, VBN, NN]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, dobj->3], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Paul tried to call George on the phone, but he wasn't successful. {
    Tokens: [paul, tried, to, call, george, on, the, phone, ,, but, he, was, n't, successful, .]
    Lemmatized tokens: [Paul, try, to, call, George, on, the, phone, ,, but, he, be, not, successful, .]
    POS tags: [NNP, VBD, TO, VB, NNP, IN, DT, NN, ,, CC, PRP, VBD-AUX, RB, JJ, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, xcomp->3, punct->8, cc->9, conj:but->13, punct->14], [], [mark->2, dobj->4], [nmod:on->7], [], [], [case->5, det->6], [], [], [], [], [], [nsubj->10, cop->11, neg->12], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B does try to call person C , then person B might be not successful and person C might be not available. {
    Tokens: [if, person, b, does, try, to, call, person, c, ,, then, person, b, might, be, not, successful, and, person, c, might, be, not, available, .]
    Lemmatized tokens: [if, person, b, do, try, to, call, person, c, ,, then, person, b, might, be, not, successful, and, person, c, might, be, not, available, .]
    POS tags: [IN, NN, NN, VBD-AUX, VB, TO, VB, NN, NN, ,, RB, NN, NN, VBD-AUX, VBD-AUX, RB, JJ, CC, NN, NN, VBD-AUX, VBD-AUX, RB, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, aux->3, xcomp->6], [], [mark->5, dobj->8], [], [compound->7], [], [], [], [compound->11], [], [], [], [neg->15, cc->17, advcl->4, conj:and->23, punct->24, punct->9, advmod->10, nsubj->12, aux->13, cop->14], [], [], [compound->18], [], [], [], [nsubj->19, aux->20, cop->21, neg->22], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was not successful {
    Tokens: [who, was, not, successful]
    Lemmatized tokens: [who, be, not, successful]
    POS tags: [WP, VBD-AUX, RB, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, neg->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Paul tried to call George on the phone, but he wasn't available. {
    Tokens: [paul, tried, to, call, george, on, the, phone, ,, but, he, was, n't, available, .]
    Lemmatized tokens: [Paul, try, to, call, George, on, the, phone, ,, but, he, be, not, available, .]
    POS tags: [NNP, VBD, TO, VB, NNP, IN, DT, NN, ,, CC, PRP, VBD-AUX, RB, JJ, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, xcomp->3, punct->8, cc->9, conj:but->13, punct->14], [], [mark->2, dobj->4], [nmod:on->7], [], [], [case->5, det->6], [], [], [], [], [], [nsubj->10, cop->11, neg->12], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B does try to call person C , then person B might be not successful and person C might be not available. {
    Tokens: [if, person, b, does, try, to, call, person, c, ,, then, person, b, might, be, not, successful, and, person, c, might, be, not, available, .]
    Lemmatized tokens: [if, person, b, do, try, to, call, person, c, ,, then, person, b, might, be, not, successful, and, person, c, might, be, not, available, .]
    POS tags: [IN, NN, NN, VBD-AUX, VB, TO, VB, NN, NN, ,, RB, NN, NN, VBD-AUX, VBD-AUX, RB, JJ, CC, NN, NN, VBD-AUX, VBD-AUX, RB, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, aux->3, xcomp->6], [], [mark->5, dobj->8], [], [compound->7], [], [], [], [compound->11], [], [], [], [neg->15, cc->17, advcl->4, conj:and->23, punct->24, punct->9, advmod->10, nsubj->12, aux->13, cop->14], [], [], [compound->18], [], [], [], [nsubj->19, aux->20, cop->21, neg->22], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was not available {
    Tokens: [who, was, not, available]
    Lemmatized tokens: [who, be, not, available]
    POS tags: [WP, VBD-AUX, RB, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, neg->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The lawyer asked the witness a question, but he was reluctant to answer it . {
    Tokens: [the, lawyer, asked, the, witness, a, question, ,, but, he, was, reluctant, to, answer, it, .]
    Lemmatized tokens: [the, lawyer, ask, the, witness, a, question, ,, but, he, be, reluctant, to, answer, it, .]
    POS tags: [DT, NN, VBD, DT, NN, DT, NN, ,, CC, PRP, VBD-AUX, JJ, TO, VB, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [punct->15, nsubj->1, xcomp->6, punct->7, cc->8, conj:but->11], [], [det->3], [], [nsubj->4, det->5], [], [], [], [], [nsubj->9, cop->10, xcomp->13], [], [mark->12, dobj->14], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B does ask person C a question, then person B might not repeat the question again and person C might not answer the question. {
    Tokens: [if, person, b, does, ask, person, c, a, question, ,, then, person, b, might, not, repeat, the, question, again, and, person, c, might, not, answer, the, question, .]
    Lemmatized tokens: [if, person, b, do, ask, person, c, a, question, ,, then, person, b, might, not, repeat, the, question, again, and, person, c, might, not, answer, the, question, .]
    POS tags: [IN, NN, NN, VBD-AUX, VB, NN, NN, DT, NN, ,, RB, NN, NN, VBD-AUX, RB, VB, DT, NN, RB, CC, NN, NN, VBD-AUX, RB, VB, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, aux->3, xcomp->8], [], [compound->5], [], [nsubj->6, det->7], [], [], [], [compound->11], [], [], [dobj->17, advmod->18, cc->19, advcl->4, conj:and->24, punct->9, advmod->10, punct->27, nsubj->12, aux->13, neg->14], [], [det->16], [], [], [], [compound->20], [], [], [nsubj->21, aux->22, neg->23, dobj->26], [], [det->25], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was reluctant to answer the question {
    Tokens: [who, was, reluctant, to, answer, the, question]
    Lemmatized tokens: [who, be, reluctant, to, answer, the, question]
    POS tags: [WP, VBD-AUX, JJ, TO, VB, DT, NN]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1, xcomp->4], [], [mark->3, dobj->6], [], [det->5]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The lawyer asked the witness a question, but he was reluctant to repeat it . {
    Tokens: [the, lawyer, asked, the, witness, a, question, ,, but, he, was, reluctant, to, repeat, it, .]
    Lemmatized tokens: [the, lawyer, ask, the, witness, a, question, ,, but, he, be, reluctant, to, repeat, it, .]
    POS tags: [DT, NN, VBD, DT, NN, DT, NN, ,, CC, PRP, VBD-AUX, JJ, TO, VB, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [punct->15, nsubj->1, xcomp->6, punct->7, cc->8, conj:but->11], [], [det->3], [], [nsubj->4, det->5], [], [], [], [], [nsubj->9, cop->10, xcomp->13], [], [mark->12, dobj->14], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B does ask person C a question, then person B might not repeat the question again and person C might not answer the question. {
    Tokens: [if, person, b, does, ask, person, c, a, question, ,, then, person, b, might, not, repeat, the, question, again, and, person, c, might, not, answer, the, question, .]
    Lemmatized tokens: [if, person, b, do, ask, person, c, a, question, ,, then, person, b, might, not, repeat, the, question, again, and, person, c, might, not, answer, the, question, .]
    POS tags: [IN, NN, NN, VBD-AUX, VB, NN, NN, DT, NN, ,, RB, NN, NN, VBD-AUX, RB, VB, DT, NN, RB, CC, NN, NN, VBD-AUX, RB, VB, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, aux->3, xcomp->8], [], [compound->5], [], [nsubj->6, det->7], [], [], [], [compound->11], [], [], [dobj->17, advmod->18, cc->19, advcl->4, conj:and->24, punct->9, advmod->10, punct->27, nsubj->12, aux->13, neg->14], [], [det->16], [], [], [], [compound->20], [], [], [nsubj->21, aux->22, neg->23, dobj->26], [], [det->25], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was reluctant to repeat the question {
    Tokens: [who, was, reluctant, to, repeat, the, question]
    Lemmatized tokens: [who, be, reluctant, to, repeat, the, question]
    POS tags: [WP, VBD-AUX, JJ, TO, VB, DT, NN]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1, xcomp->4], [], [mark->3, dobj->6], [], [det->5]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The delivery truck zoomed by the school bus because it was going so fast. {
    Tokens: [the, delivery, truck, zoomed, by, the, school, bus, because, it, was, going, so, fast, .]
    Lemmatized tokens: [the, delivery, truck, zoom, by, the, school, bus, because, it, be, go, so, fast, .]
    POS tags: [DT, NN, NN, VBN, IN, DT, NN, NN, IN, PRP, VBD-AUX, VBG, RB, RB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [det->0, compound->1], [nsubj->2, nmod:by->7, advcl->11, punct->14], [], [], [], [case->4, det->5, compound->6], [], [], [], [mark->8, nsubj->9, aux->10, advmod->13], [], [advmod->12], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B does go so fast, and thing C does go so slow, then thing B might zoom by thing C . {
    Tokens: [if, thing, b, does, go, so, fast, ,, and, thing, c, does, go, so, slow, ,, then, thing, b, might, zoom, by, thing, c, .]
    Lemmatized tokens: [if, thing, b, do, go, so, fast, ,, and, thing, c, do, go, so, slow, ,, then, thing, b, might, zoom, by, thing, c, .]
    POS tags: [IN, NN, NN, VBD-AUX, VB, RB, RB, ,, CC, NN, NN, VBD-AUX, VB, RB, JJ, ,, RB, NN, NN, VBD-AUX, VB, IN, NN, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, aux->3, advmod->6, punct->7, cc->8, conj:and->12], [], [advmod->5], [], [], [], [compound->9], [], [nsubj->10, aux->11, xcomp->14], [], [advmod->13], [], [], [], [advmod->16, compound->17], [], [punct->15, nsubj->18, aux->19, advcl->4, nmod:by->23, punct->24, advcl->12], [], [], [case->21, compound->22], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What was going so fast {
    Tokens: [what, was, going, so, fast]
    Lemmatized tokens: [what, be, go, so, fast]
    POS tags: [WP, VBD-AUX, VBG, RB, RB]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, advmod->4], [], [advmod->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The delivery truck zoomed by the school bus because it was going so slow. {
    Tokens: [the, delivery, truck, zoomed, by, the, school, bus, because, it, was, going, so, slow, .]
    Lemmatized tokens: [the, delivery, truck, zoom, by, the, school, bus, because, it, be, go, so, slow, .]
    POS tags: [DT, NN, NN, VBN, IN, DT, NN, NN, IN, PRP, VBD-AUX, VBG, RB, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [det->0, compound->1], [nsubj->2, nmod:by->7, advcl->11, punct->14], [], [], [], [case->4, det->5, compound->6], [], [], [], [mark->8, nsubj->9, aux->10, xcomp->13], [], [advmod->12], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B does go so fast, and thing C does go so slow, then thing B might zoom by thing C . {
    Tokens: [if, thing, b, does, go, so, fast, ,, and, thing, c, does, go, so, slow, ,, then, thing, b, might, zoom, by, thing, c, .]
    Lemmatized tokens: [if, thing, b, do, go, so, fast, ,, and, thing, c, do, go, so, slow, ,, then, thing, b, might, zoom, by, thing, c, .]
    POS tags: [IN, NN, NN, VBD-AUX, VB, RB, RB, ,, CC, NN, NN, VBD-AUX, VB, RB, JJ, ,, RB, NN, NN, VBD-AUX, VB, IN, NN, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, aux->3, advmod->6, punct->7, cc->8, conj:and->12], [], [advmod->5], [], [], [], [compound->9], [], [nsubj->10, aux->11, xcomp->14], [], [advmod->13], [], [], [], [advmod->16, compound->17], [], [punct->15, nsubj->18, aux->19, advcl->4, nmod:by->23, punct->24, advcl->12], [], [], [case->21, compound->22], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What was going so slow {
    Tokens: [what, was, going, so, slow]
    Lemmatized tokens: [what, be, go, so, slow]
    POS tags: [WP, VBD-AUX, VBG, RB, JJ]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, xcomp->4], [], [advmod->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Frank felt vindicated when his longtime rival Bill revealed that he was the winner of the competition. {
    Tokens: [frank, felt, vindicated, when, his, longtime, rival, bill, revealed, that, he, was, the, winner, of, the, competition, .]
    Lemmatized tokens: [Frank, feel, vindicate, when, he, longtime, rival, bill, reveal, that, he, be, the, winner, of, the, competition, .]
    POS tags: [NNP, VBD, VBN, WRB, PRP$, NN, JJ, NN, VBD, IN, PRP, VBD-AUX, DT, NN, IN, DT, NN, .]
    NER tags: [PERSON, PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, punct->17, dep->2], [advcl->8], [], [], [], [], [nmod:poss->4, compound->5, amod->6], [advmod->3, nsubj->7, ccomp->13], [], [], [], [], [nmod:of->16, mark->9, nsubj->10, cop->11, det->12], [], [], [det->15, case->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person C and person B is rival, and person C is the winner of the competition, then person C will feel vindicated and person B will feel crushed. {
    Tokens: [if, person, c, and, person, b, is, rival, ,, and, person, c, is, the, winner, of, the, competition, ,, then, person, c, will, feel, vindicated, and, person, b, will, feel, crushed, .]
    Lemmatized tokens: [if, person, c, and, person, b, be, rival, ,, and, person, c, be, the, winner, of, the, competition, ,, then, person, c, will, feel, vindicate, and, person, b, will, feel, crushed, .]
    POS tags: [IN, NN, NN, CC, NN, NN, VBD-AUX, JJ, ,, CC, NN, NN, VBD-AUX, DT, NN, IN, DT, NN, ,, RB, NN, NN, VBD-AUX, VB, VBN, CC, NN, NN, VBD-AUX, VB, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1, cc->3, conj:and->5], [], [], [compound->4], [], [mark->0, nsubj->2, nsubj->5, cop->6, punct->8, cc->9, conj:and->14], [], [], [], [compound->10], [], [], [nmod:of->17, nsubj->11, cop->12, det->13], [], [], [case->15, det->16], [], [], [], [compound->20], [], [punct->31, punct->18, advmod->19, nsubj->21, aux->22, advcl->7, dep->24, cc->25, conj:and->29, advcl->14], [], [], [], [compound->26], [], [nsubj->27, aux->28, dobj->30], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was the winner of the competition {
    Tokens: [who, was, the, winner, of, the, competition]
    Lemmatized tokens: [who, be, the, winner, of, the, competition]
    POS tags: [WP, VBD-AUX, DT, NN, IN, DT, NN]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[cop->1, nsubj->3], [], [], [det->2, nmod:of->6], [], [], [case->4, det->5]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Frank felt crushed when his longtime rival Bill revealed that he was the winner of the competition. {
    Tokens: [frank, felt, crushed, when, his, longtime, rival, bill, revealed, that, he, was, the, winner, of, the, competition, .]
    Lemmatized tokens: [Frank, feel, crushed, when, he, longtime, rival, bill, reveal, that, he, be, the, winner, of, the, competition, .]
    POS tags: [NNP, VBD, JJ, WRB, PRP$, NN, JJ, NN, VBD, IN, PRP, VBD-AUX, DT, NN, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, punct->17, dobj->2], [acl:relcl->8], [], [], [], [], [nmod:poss->4, compound->5, amod->6], [advmod->3, nsubj->7, ccomp->13], [], [], [], [], [nmod:of->16, mark->9, nsubj->10, cop->11, det->12], [], [], [det->15, case->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was the winner of the competition {
    Tokens: [who, was, the, winner, of, the, competition]
    Lemmatized tokens: [who, be, the, winner, of, the, competition]
    POS tags: [WP, VBD-AUX, DT, NN, IN, DT, NN]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[cop->1, nsubj->3], [], [], [det->2, nmod:of->6], [], [], [case->4, det->5]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person C and person B is rival, and person C is the winner of the competition, then person C will feel vindicated and person B will feel crushed. {
    Tokens: [if, person, c, and, person, b, is, rival, ,, and, person, c, is, the, winner, of, the, competition, ,, then, person, c, will, feel, vindicated, and, person, b, will, feel, crushed, .]
    Lemmatized tokens: [if, person, c, and, person, b, be, rival, ,, and, person, c, be, the, winner, of, the, competition, ,, then, person, c, will, feel, vindicate, and, person, b, will, feel, crushed, .]
    POS tags: [IN, NN, NN, CC, NN, NN, VBD-AUX, JJ, ,, CC, NN, NN, VBD-AUX, DT, NN, IN, DT, NN, ,, RB, NN, NN, VBD-AUX, VB, VBN, CC, NN, NN, VBD-AUX, VB, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1, cc->3, conj:and->5], [], [], [compound->4], [], [mark->0, nsubj->2, nsubj->5, cop->6, punct->8, cc->9, conj:and->14], [], [], [], [compound->10], [], [], [nmod:of->17, nsubj->11, cop->12, det->13], [], [], [case->15, det->16], [], [], [], [compound->20], [], [punct->31, punct->18, advmod->19, nsubj->21, aux->22, advcl->7, dep->24, cc->25, conj:and->29, advcl->14], [], [], [], [compound->26], [], [nsubj->27, aux->28, dobj->30], [], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The man couldn't lift his son because he was so weak. {
    Tokens: [the, man, could, n't, lift, his, son, because, he, was, so, weak, .]
    Lemmatized tokens: [the, man, could, not, lift, he, son, because, he, be, so, weak, .]
    POS tags: [DT, NN, VBD-AUX, RB, VB, PRP$, NN, IN, PRP, VBD-AUX, RB, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [], [nsubj->1, aux->2, neg->3, dobj->6, advcl->11, punct->12], [], [nmod:poss->5], [], [], [], [], [mark->7, nsubj->8, cop->9, advmod->10], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is weak, and person C is heavy, then person B couldn’t lift person C . {
    Tokens: [if, person, b, is, weak, ,, and, person, c, is, heavy, ,, then, person, b, could, n't, lift, person, c, .]
    Lemmatized tokens: [if, person, b, be, weak, ,, and, person, c, be, heavy, ,, then, person, b, could, not, lift, person, c, .]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, ,, CC, NN, NN, VBD-AUX, JJ, ,, RB, NN, NN, VBD-AUX, RB, VB, NN, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3, punct->5, cc->6, conj:and->10], [], [], [], [compound->7], [], [nsubj->8, cop->9], [], [], [], [advmod->12, compound->13], [], [], [aux->15, neg->16, dobj->19, advcl->4, punct->20, advcl->10, punct->11, nsubj->14], [], [compound->18], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was weak {
    Tokens: [who, was, weak]
    Lemmatized tokens: [who, be, weak]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The man couldn't lift his son because he was so heavy. {
    Tokens: [the, man, could, n't, lift, his, son, because, he, was, so, heavy, .]
    Lemmatized tokens: [the, man, could, not, lift, he, son, because, he, be, so, heavy, .]
    POS tags: [DT, NN, VBD-AUX, RB, VB, PRP$, NN, IN, PRP, VBD-AUX, RB, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [], [nsubj->1, aux->2, neg->3, dobj->6, advcl->11, punct->12], [], [nmod:poss->5], [], [], [], [], [mark->7, nsubj->8, cop->9, advmod->10], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is weak, and person C is heavy, then person B couldn’t lift person C . {
    Tokens: [if, person, b, is, weak, ,, and, person, c, is, heavy, ,, then, person, b, could, n't, lift, person, c, .]
    Lemmatized tokens: [if, person, b, be, weak, ,, and, person, c, be, heavy, ,, then, person, b, could, not, lift, person, c, .]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, ,, CC, NN, NN, VBD-AUX, JJ, ,, RB, NN, NN, VBD-AUX, RB, VB, NN, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3, punct->5, cc->6, conj:and->10], [], [], [], [compound->7], [], [nsubj->8, cop->9], [], [], [], [advmod->12, compound->13], [], [], [aux->15, neg->16, dobj->19, advcl->4, punct->20, advcl->10, punct->11, nsubj->14], [], [compound->18], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was heavy {
    Tokens: [who, was, heavy]
    Lemmatized tokens: [who, be, heavy]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The large ball crashed right through the table because it was made of steel. {
    Tokens: [the, large, ball, crashed, right, through, the, table, because, it, was, made, of, steel, .]
    Lemmatized tokens: [the, large, ball, crash, right, through, the, table, because, it, be, make, of, steel, .]
    POS tags: [DT, JJ, NN, VBD, RB, IN, DT, NN, IN, PRP, VBD-AUX, VBN, IN, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [det->0, amod->1], [nsubj->2, advmod->4, advcl->11, punct->14], [nmod:through->7], [], [], [case->5, det->6], [], [], [], [mark->8, nsubjpass->9, auxpass->10, nmod:of->13], [], [case->12], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is solid, and thing C is fragile, then thing B can crash right through thing C {
    Tokens: [if, thing, b, is, solid, ,, and, thing, c, is, fragile, ,, then, thing, b, can, crash, right, through, thing, c]
    Lemmatized tokens: [if, thing, b, be, solid, ,, and, thing, c, be, fragile, ,, then, thing, b, can, crash, right, through, thing, c]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, ,, CC, NN, NN, VBD-AUX, JJ, ,, RB, NN, NN, VBD-AUX, VB, RB, IN, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, parataxis->16, nsubj->2, cop->3, punct->5, cc->6, conj:and->10, punct->11], [], [], [], [compound->7], [], [nsubj->8, cop->9], [], [], [], [compound->13], [], [aux->15, advmod->17, nmod:through->20, advmod->12, nsubj->14], [], [], [], [case->18, compound->19]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is made of steel, then thing B is solid {
    Tokens: [if, thing, b, is, made, of, steel, ,, then, thing, b, is, solid]
    Lemmatized tokens: [if, thing, b, be, make, of, steel, ,, then, thing, b, be, solid]
    POS tags: [IN, NN, NN, VBD-AUX, VBN, IN, NN, ,, RB, NN, NN, VBD-AUX, JJ]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubjpass->2, auxpass->3, nmod:of->6, punct->7, parataxis->12], [], [case->5], [], [], [], [compound->9], [], [advmod->8, nsubj->10, cop->11]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is made of styrofoam, then thing B is fragile. {
    Tokens: [if, thing, b, is, made, of, styrofoam, ,, then, thing, b, is, fragile, .]
    Lemmatized tokens: [if, thing, b, be, make, of, styrofoam, ,, then, thing, b, be, fragile, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBN, IN, NN, ,, RB, NN, NN, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubjpass->2, auxpass->3, nmod:of->6], [], [case->5], [], [], [], [advmod->8, compound->9], [], [advcl->4, punct->7, nsubj->10, cop->11, punct->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What was made of steel {
    Tokens: [what, was, made, of, steel]
    Lemmatized tokens: [what, be, make, of, steel]
    POS tags: [WP, VBD-AUX, VBN, IN, NN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [], [nsubjpass->0, auxpass->1, nmod:of->4], [], [case->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The large ball crashed right through the table because it was made of styrofoam. {
    Tokens: [the, large, ball, crashed, right, through, the, table, because, it, was, made, of, styrofoam, .]
    Lemmatized tokens: [the, large, ball, crash, right, through, the, table, because, it, be, make, of, styrofoam, .]
    POS tags: [DT, JJ, NN, VBD, RB, IN, DT, NN, IN, PRP, VBD-AUX, VBN, IN, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [det->0, amod->1], [nsubj->2, advmod->4, advcl->11, punct->14], [nmod:through->7], [], [], [case->5, det->6], [], [], [], [mark->8, nsubjpass->9, auxpass->10, nmod:of->13], [], [case->12], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is solid, and thing C is fragile, then thing B can crash right through thing C {
    Tokens: [if, thing, b, is, solid, ,, and, thing, c, is, fragile, ,, then, thing, b, can, crash, right, through, thing, c]
    Lemmatized tokens: [if, thing, b, be, solid, ,, and, thing, c, be, fragile, ,, then, thing, b, can, crash, right, through, thing, c]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, ,, CC, NN, NN, VBD-AUX, JJ, ,, RB, NN, NN, VBD-AUX, VB, RB, IN, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, parataxis->16, nsubj->2, cop->3, punct->5, cc->6, conj:and->10, punct->11], [], [], [], [compound->7], [], [nsubj->8, cop->9], [], [], [], [compound->13], [], [aux->15, advmod->17, nmod:through->20, advmod->12, nsubj->14], [], [], [], [case->18, compound->19]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is made of steel, then thing B is solid {
    Tokens: [if, thing, b, is, made, of, steel, ,, then, thing, b, is, solid]
    Lemmatized tokens: [if, thing, b, be, make, of, steel, ,, then, thing, b, be, solid]
    POS tags: [IN, NN, NN, VBD-AUX, VBN, IN, NN, ,, RB, NN, NN, VBD-AUX, JJ]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubjpass->2, auxpass->3, nmod:of->6, punct->7, parataxis->12], [], [case->5], [], [], [], [compound->9], [], [advmod->8, nsubj->10, cop->11]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is made of styrofoam, then thing B is fragile. {
    Tokens: [if, thing, b, is, made, of, styrofoam, ,, then, thing, b, is, fragile, .]
    Lemmatized tokens: [if, thing, b, be, make, of, styrofoam, ,, then, thing, b, be, fragile, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBN, IN, NN, ,, RB, NN, NN, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubjpass->2, auxpass->3, nmod:of->6], [], [case->5], [], [], [], [advmod->8, compound->9], [], [advcl->4, punct->7, nsubj->10, cop->11, punct->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What was made of styrofoam {
    Tokens: [what, was, made, of, styrofoam]
    Lemmatized tokens: [what, be, make, of, styrofoam]
    POS tags: [WP, VBD-AUX, VBN, IN, NN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [], [nsubjpass->0, auxpass->1, nmod:of->4], [], [case->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: John couldn't see the stage with Billy in front of him because he is so short. {
    Tokens: [john, could, n't, see, the, stage, with, billy, in, front, of, him, because, he, is, so, short, .]
    Lemmatized tokens: [John, could, not, see, the, stage, with, Billy, in, front, of, he, because, he, be, so, short, .]
    POS tags: [NNP, VBD-AUX, RB, VB, DT, NN, IN, NNP, IN, NN, IN, PRP, IN, PRP, VBD-AUX, RB, JJ, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, advcl->16, aux->1, punct->17, neg->2, dobj->5, nmod:in_front_of->11], [], [det->4, nmod:with->7], [], [case->6], [mwe->9, mwe->10], [], [], [case->8], [], [], [], [], [advmod->15, mark->12, nsubj->13, cop->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is short, and person C is tall, and person C stands in front of person B, then person B can’t see something. {
    Tokens: [if, person, b, is, short, ,, and, person, c, is, tall, ,, and, person, c, stands, in, front, of, person, b, ,, then, person, b, ca, n't, see, something, .]
    Lemmatized tokens: [if, person, b, be, short, ,, and, person, c, be, tall, ,, and, person, c, stand, in, front, of, person, b, ,, then, person, b, can, not, see, something, .]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, ,, CC, NN, NN, VBD-AUX, JJ, ,, CC, NN, NN, VBZ, IN, NN, IN, NN, NN, ,, RB, NN, NN, MD, RB, VB, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [conj:and->15, mark->0, nsubj->2, cop->3, punct->5, cc->6, conj:and->10, punct->11, cc->12], [], [], [], [compound->7], [], [nsubj->8, cop->9], [], [], [], [compound->13], [nmod:in_front_of->20, nsubj->14], [mwe->17, mwe->18], [], [], [], [case->16, compound->19], [], [], [], [advmod->22, compound->23], [], [], [advcl->15, advcl->4, punct->21, nsubj->24, aux->25, advcl->10, neg->26, dobj->28, punct->29], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who is so short {
    Tokens: [who, is, so, short]
    Lemmatized tokens: [who, be, so, short]
    POS tags: [WP, VBD-AUX, RB, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, advmod->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: John couldn't see the stage with Billy in front of him because he is so tall. {
    Tokens: [john, could, n't, see, the, stage, with, billy, in, front, of, him, because, he, is, so, tall, .]
    Lemmatized tokens: [John, could, not, see, the, stage, with, Billy, in, front, of, he, because, he, be, so, tall, .]
    POS tags: [NNP, VBD-AUX, RB, VB, DT, NN, IN, NNP, IN, NN, IN, PRP, IN, PRP, VBD-AUX, RB, JJ, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, advcl->16, aux->1, punct->17, neg->2, dobj->5, nmod:in_front_of->11], [], [det->4, nmod:with->7], [], [case->6], [mwe->9, mwe->10], [], [], [case->8], [], [], [], [], [advmod->15, mark->12, nsubj->13, cop->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is short and person C is tall, and person C stands in front of person B, then person B can’t see something. {
    Tokens: [if, person, b, is, short, and, person, c, is, tall, ,, and, person, c, stands, in, front, of, person, b, ,, then, person, b, ca, n't, see, something, .]
    Lemmatized tokens: [if, person, b, be, short, and, person, c, be, tall, ,, and, person, c, stand, in, front, of, person, b, ,, then, person, b, can, not, see, something, .]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, JJ, ,, CC, NN, NN, VBZ, IN, NN, IN, NN, NN, ,, RB, NN, NN, MD, RB, VB, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3, cc->5, conj:and->9, conj:and->14], [], [], [compound->6], [], [nsubj->7, cop->8, punct->10, cc->11, conj:and->14], [], [], [], [compound->12], [nmod:in_front_of->19, nsubj->13], [mwe->16, mwe->17], [], [], [], [case->15, compound->18], [], [], [], [advmod->21, compound->22], [], [], [advcl->4, punct->20, nsubj->23, aux->24, advcl->9, neg->25, dobj->27, punct->28], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who is so tall {
    Tokens: [who, is, so, tall]
    Lemmatized tokens: [who, be, so, tall]
    POS tags: [WP, VBD-AUX, RB, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, advmod->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Tom threw his schoolbag down to Ray after he reached the top of the stairs. {
    Tokens: [tom, threw, his, schoolbag, down, to, ray, after, he, reached, the, top, of, the, stairs, .]
    Lemmatized tokens: [Tom, throw, he, schoolbag, down, to, Ray, after, he, reach, the, top, of, the, stair, .]
    POS tags: [NNP, VBD, PRP$, NN, IN, TO, NNP, IN, PRP, VBD, DT, NN, IN, DT, NNS, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [punct->15, nsubj->0, dobj->3, advmod->4, advcl->9], [], [nmod:poss->2], [nmod:to->6], [], [case->5], [], [], [mark->7, nsubj->8, dobj->11], [], [det->10, nmod:of->14], [], [], [case->12, det->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If  person B is at the top, and person C is at the bottom, then person B can throw something to person C . {
    Tokens: [if, person, b, is, at, the, top, ,, and, person, c, is, at, the, bottom, ,, then, person, b, can, throw, something, to, person, c, .]
    Lemmatized tokens: [if, person, b, be, at, the, top, ,, and, person, c, be, at, the, bottom, ,, then, person, b, can, throw, something, to, person, c, .]
    POS tags: [IN, NN, NN, VBD-AUX, IN, DT, NN, ,, CC, NN, NN, VBD-AUX, IN, DT, NN, ,, RB, NN, NN, VBD-AUX, VB, NN, TO, NN, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [], [mark->0, nsubj->2, cop->3, case->4, det->5, punct->7], [], [], [], [compound->9], [], [], [], [nsubj->10, cop->11, case->12, det->13], [], [], [], [advmod->16, compound->17], [], [punct->15, nsubj->18, aux->19, conj:and->20, dobj->21, advcl:at->6, cc->8, nmod:to->24, punct->25], [], [], [], [case->22, compound->23], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who reached the top of the stairs {
    Tokens: [who, reached, the, top, of, the, stairs]
    Lemmatized tokens: [who, reach, the, top, of, the, stair]
    POS tags: [WP, VBD, DT, NN, IN, DT, NNS]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3], [], [det->2, nmod:of->6], [], [], [case->4, det->5]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Tom threw his schoolbag down to Ray after he reached the bottom of the stairs. {
    Tokens: [tom, threw, his, schoolbag, down, to, ray, after, he, reached, the, bottom, of, the, stairs, .]
    Lemmatized tokens: [Tom, throw, he, schoolbag, down, to, Ray, after, he, reach, the, bottom, of, the, stair, .]
    POS tags: [NNP, VBD, PRP$, NN, IN, TO, NNP, IN, PRP, VBD, DT, NN, IN, DT, NNS, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [punct->15, nsubj->0, dobj->3, advmod->4, advcl->9], [], [nmod:poss->2], [nmod:to->6], [], [case->5], [], [], [mark->7, nsubj->8, dobj->11], [], [det->10, nmod:of->14], [], [], [case->12, det->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If  person B is at the top, and person C is at the bottom, then person B can throw something to person C . {
    Tokens: [if, person, b, is, at, the, top, ,, and, person, c, is, at, the, bottom, ,, then, person, b, can, throw, something, to, person, c, .]
    Lemmatized tokens: [if, person, b, be, at, the, top, ,, and, person, c, be, at, the, bottom, ,, then, person, b, can, throw, something, to, person, c, .]
    POS tags: [IN, NN, NN, VBD-AUX, IN, DT, NN, ,, CC, NN, NN, VBD-AUX, IN, DT, NN, ,, RB, NN, NN, VBD-AUX, VB, NN, TO, NN, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [], [mark->0, nsubj->2, cop->3, case->4, det->5, punct->7], [], [], [], [compound->9], [], [], [], [nsubj->10, cop->11, case->12, det->13], [], [], [], [advmod->16, compound->17], [], [punct->15, nsubj->18, aux->19, conj:and->20, dobj->21, advcl:at->6, cc->8, nmod:to->24, punct->25], [], [], [], [case->22, compound->23], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who reached the bottom of the stairs {
    Tokens: [who, reached, the, bottom, of, the, stairs]
    Lemmatized tokens: [who, reach, the, bottom, of, the, stair]
    POS tags: [WP, VBD, DT, NN, IN, DT, NNS]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3], [], [det->2, nmod:of->6], [], [], [case->4, det->5]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Although they ran at about the same speed, Sue beat Sally because she had such a good start. {
    Tokens: [although, they, ran, at, about, the, same, speed, ,, sue, beat, sally, because, she, had, such, a, good, start, .]
    Lemmatized tokens: [although, they, run, at, about, the, same, speed, ,, sue, beat, Sally, because, she, have, such, a, good, start, .]
    POS tags: [IN, PRP, VBD, IN, IN, DT, JJ, NN, ,, VB, JJ, NNP, IN, PRP, VBD-AUX, JJ, DT, JJ, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [mark->0, nsubj->1, nmod:about->7], [], [], [], [], [case->3, case->4, det->5, amod->6], [], [advcl->2, punct->19, punct->8, xcomp->10, advcl->14], [], [], [], [], [nmod:such->18, dep->11, mark->12, nsubj->13], [], [], [], [case->15, det->16, amod->17], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B has a good start, and person C has bad start, and person B and person C ran at about the same speed, then person B might beat person C {
    Tokens: [if, person, b, has, a, good, start, ,, and, person, c, has, bad, start, ,, and, person, b, and, person, c, ran, at, about, the, same, speed, ,, then, person, b, might, beat, person, c]
    Lemmatized tokens: [if, person, b, have, a, good, start, ,, and, person, c, have, bad, start, ,, and, person, b, and, person, c, run, at, about, the, same, speed, ,, then, person, b, might, beat, person, c]
    POS tags: [IN, NN, NN, VBD-AUX, DT, JJ, NN, ,, CC, NN, NN, VBD-AUX, JJ, NN, ,, CC, NN, NN, CC, NN, NN, VBD, IN, IN, DT, JJ, NN, ,, RB, NN, NN, VBD-AUX, VB, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, parataxis->32, nsubj->2, conj:and->21, dobj->6, punct->7, cc->8, conj:and->11, punct->27], [], [], [det->4, amod->5], [], [], [], [compound->9], [cc->15, conj:and->21, nsubj->10, dobj->13, punct->14], [], [amod->12], [], [], [], [compound->16, cc->18, conj:and->20], [], [], [compound->19], [nsubj->17, nsubj->20, nmod:about->26], [], [], [], [], [case->22, case->23, det->24, amod->25], [], [], [], [compound->29], [], [aux->31, dobj->34, advmod->28, nsubj->30], [], [compound->33]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B and person C ran at about the same speed, then person C and person B might run at about the same speed. {
    Tokens: [if, person, b, and, person, c, ran, at, about, the, same, speed, ,, then, person, c, and, person, b, might, run, at, about, the, same, speed, .]
    Lemmatized tokens: [if, person, b, and, person, c, run, at, about, the, same, speed, ,, then, person, c, and, person, b, might, run, at, about, the, same, speed, .]
    POS tags: [IN, NN, NN, CC, NN, NN, VBD, IN, IN, DT, JJ, NN, ,, RB, NN, NN, CC, NN, NN, VBD-AUX, VB, IN, IN, DT, JJ, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1, cc->3, conj:and->5], [], [], [compound->4], [mark->0, nsubj->2, nsubj->5, nmod:about->11, punct->12, advmod->13], [], [], [], [], [case->7, case->8, det->9, amod->10], [], [], [], [cc->16, conj:and->18, compound->14], [], [], [compound->17], [], [nsubj->15, nsubj->18, aux->19, advcl->6, nmod:about->25, punct->26], [], [], [], [], [case->21, case->22, det->23, amod->24], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who had a good start {
    Tokens: [who, had, a, good, start]
    Lemmatized tokens: [who, have, a, good, start]
    POS tags: [WP, VBD-AUX, DT, JJ, NN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->4], [], [], [det->2, amod->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Although they ran at about the same speed, Sue beat Sally because she had such a bad start. {
    Tokens: [although, they, ran, at, about, the, same, speed, ,, sue, beat, sally, because, she, had, such, a, bad, start, .]
    Lemmatized tokens: [although, they, run, at, about, the, same, speed, ,, sue, beat, Sally, because, she, have, such, a, bad, start, .]
    POS tags: [IN, PRP, VBD, IN, IN, DT, JJ, NN, ,, VB, JJ, NNP, IN, PRP, VBD-AUX, JJ, DT, JJ, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [mark->0, nsubj->1, nmod:about->7], [], [], [], [], [case->3, case->4, det->5, amod->6], [], [advcl->2, punct->19, punct->8, xcomp->10, advcl->14], [], [], [], [], [nmod:such->18, dep->11, mark->12, nsubj->13], [], [], [], [case->15, det->16, amod->17], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B has a good start and person C has bad start and person B and person C ran about at the same speed, then person B might beat person C {
    Tokens: [if, person, b, has, a, good, start, and, person, c, has, bad, start, and, person, b, and, person, c, ran, about, at, the, same, speed, ,, then, person, b, might, beat, person, c]
    Lemmatized tokens: [if, person, b, have, a, good, start, and, person, c, have, bad, start, and, person, b, and, person, c, run, about, at, the, same, speed, ,, then, person, b, might, beat, person, c]
    POS tags: [IN, NN, NN, VBD-AUX, DT, JJ, NN, CC, NN, NN, VBD-AUX, JJ, NN, CC, NN, NN, CC, NN, NN, VBD, RB, IN, DT, JJ, NN, ,, RB, NN, NN, VBD-AUX, VB, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, xcomp->19, xcomp->10], [], [], [det->4, amod->5, cc->7, conj:and->9], [], [], [compound->8], [dobj->15, cc->16, conj:and->19, nsubj->6, nsubj->9, punct->25, dobj->12, parataxis->30], [], [conj:and->15, amod->11, cc->13], [], [], [compound->14], [], [], [compound->17], [nsubj->18, advmod->20, nmod:at->24], [], [], [], [], [case->21, det->22, amod->23], [], [], [], [compound->27], [], [dobj->32, advmod->26, nsubj->28, aux->29], [], [compound->31]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B and person C ran at about the same speed, person C and person B might run at about the same speed. {
    Tokens: [if, person, b, and, person, c, ran, at, about, the, same, speed, ,, person, c, and, person, b, might, run, at, about, the, same, speed, .]
    Lemmatized tokens: [if, person, b, and, person, c, run, at, about, the, same, speed, ,, person, c, and, person, b, might, run, at, about, the, same, speed, .]
    POS tags: [IN, NN, NN, CC, NN, NN, VBD, IN, IN, DT, JJ, NN, ,, NN, NN, CC, NN, NN, VBD-AUX, VB, IN, IN, DT, JJ, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1, cc->3, conj:and->5], [], [], [compound->4], [mark->0, nsubj->2, nsubj->5, nmod:about->11], [], [], [], [], [case->7, case->8, det->9, amod->10], [], [], [cc->15, conj:and->17, compound->13], [], [], [compound->16], [], [nsubj->17, aux->18, advcl->6, nmod:about->24, punct->25, punct->12, nsubj->14], [], [], [], [], [case->20, case->21, det->22, amod->23], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who had a bad start {
    Tokens: [who, had, a, bad, start]
    Lemmatized tokens: [who, have, a, bad, start]
    POS tags: [WP, VBD-AUX, DT, JJ, NN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->4], [], [], [det->2, amod->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The sculpture rolled off the shelf because it wasn't anchored. {
    Tokens: [the, sculpture, rolled, off, the, shelf, because, it, was, n't, anchored, .]
    Lemmatized tokens: [the, sculpture, roll, off, the, shelf, because, it, be, not, anchor, .]
    POS tags: [DT, NN, VBD, RP, DT, NN, IN, PRP, VBD-AUX, RB, VBN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [nsubj->1, compound:prt->3, dobj->5, advcl->10, punct->11], [], [], [det->4], [], [], [], [], [mark->6, nsubjpass->7, auxpass->8, neg->9], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B isn’t anchored, or thing C isn’t level, then thing B runs off thing C. {
    Tokens: [if, thing, b, is, n't, anchored, ,, or, thing, c, is, n't, level, ,, then, thing, b, runs, off, thing, c.]
    Lemmatized tokens: [if, thing, b, be, not, anchor, ,, or, thing, c, be, not, level, ,, then, thing, b, run, off, thing, C.]
    POS tags: [IN, NN, NN, VBD-AUX, RB, VBN, ,, CC, NN, NN, VBD-AUX, RB, NN, ,, RB, NN, NN, VBZ, RP, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, parataxis->17, nsubjpass->2, auxpass->3, neg->4, punct->6, cc->7, conj:or->12, punct->13], [], [], [], [compound->8], [], [], [nsubj->9, cop->10, neg->11], [], [], [], [compound->15], [nsubj->16, compound:prt->18, dobj->20, advmod->14], [], [], [compound->19]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What wasn't anchored {
    Tokens: [what, was, n't, anchored]
    Lemmatized tokens: [what, be, not, anchor]
    POS tags: [WP, VBD-AUX, RB, VBN]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubjpass->0, auxpass->1, neg->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The sculpture rolled off the shelf because it wasn't level. {
    Tokens: [the, sculpture, rolled, off, the, shelf, because, it, was, n't, level, .]
    Lemmatized tokens: [the, sculpture, roll, off, the, shelf, because, it, be, not, level, .]
    POS tags: [DT, NN, VBD, RP, DT, NN, IN, PRP, VBD-AUX, RB, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [nsubj->1, compound:prt->3, dobj->5, advcl->10, punct->11], [], [], [det->4], [], [], [], [], [mark->6, nsubj->7, cop->8, neg->9], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B isn’t anchored, or thing C isn’t level, then thing B runs off thing C. {
    Tokens: [if, thing, b, is, n't, anchored, ,, or, thing, c, is, n't, level, ,, then, thing, b, runs, off, thing, c.]
    Lemmatized tokens: [if, thing, b, be, not, anchor, ,, or, thing, c, be, not, level, ,, then, thing, b, run, off, thing, C.]
    POS tags: [IN, NN, NN, VBD-AUX, RB, VBN, ,, CC, NN, NN, VBD-AUX, RB, NN, ,, RB, NN, NN, VBZ, RP, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, parataxis->17, nsubjpass->2, auxpass->3, neg->4, punct->6, cc->7, conj:or->12, punct->13], [], [], [], [compound->8], [], [], [nsubj->9, cop->10, neg->11], [], [], [], [compound->15], [nsubj->16, compound:prt->18, dobj->20, advmod->14], [], [], [compound->19]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What wasn't level {
    Tokens: [what, was, n't, level]
    Lemmatized tokens: [what, be, not, level]
    POS tags: [WP, VBD-AUX, RB, NN]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, neg->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Sam's drawing was hung just above Tina's and it did look much better with another one below it. {
    Tokens: [sam, 's, drawing, was, hung, just, above, tina, 's, and, it, did, look, much, better, with, another, one, below, it, .]
    Lemmatized tokens: [Sam, 's, drawing, be, hang, just, above, Tina, 's, and, it, do, look, much, better, with, another, one, below, it, .]
    POS tags: [NNP, POS, NN, VBD-AUX, VBN, RB, IN, NNP, POS, CC, PRP, VBD-AUX, VB, RB, RBR, IN, DT, CD, IN, PRP, .]
    NER tags: [PERSON, O, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O, NUMBER, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1.0, null, null, null]
    Dependency children: [[case->1], [], [nmod:poss->0], [], [nsubjpass->2, auxpass->3, punct->20, advmod->5, nmod:'s->7, cc->9, conj:and->12], [], [], [case->6, case->8], [], [], [], [], [nmod:with->17, nmod:below->19, nsubj->10, aux->11, advmod->14], [], [advmod->13], [], [], [case->15, det->16], [], [case->18], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Which looked better {
    Tokens: [which, looked, better]
    Lemmatized tokens: [which, look, better]
    POS tags: [WDT, VBD, JJR]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [nsubj->0, xcomp->2], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Sam's drawing was hung just above Tina's and it did look much better with another one above it. {
    Tokens: [sam, 's, drawing, was, hung, just, above, tina, 's, and, it, did, look, much, better, with, another, one, above, it, .]
    Lemmatized tokens: [Sam, 's, drawing, be, hang, just, above, Tina, 's, and, it, do, look, much, better, with, another, one, above, it, .]
    POS tags: [NNP, POS, NN, VBD-AUX, VBN, RB, IN, NNP, POS, CC, PRP, VBD-AUX, VB, RB, RBR, IN, DT, CD, IN, PRP, .]
    NER tags: [PERSON, O, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O, NUMBER, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1.0, null, null, null]
    Dependency children: [[case->1], [], [nmod:poss->0], [], [nsubjpass->2, auxpass->3, punct->20, advmod->5, nmod:'s->7, cc->9, conj:and->12], [], [], [case->6, case->8], [], [], [], [], [nmod:with->17, nmod:above->19, nsubj->10, aux->11, advmod->14], [], [advmod->13], [], [], [case->15, det->16], [], [case->18], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Which looked better {
    Tokens: [which, looked, better]
    Lemmatized tokens: [which, look, better]
    POS tags: [WDT, VBD, JJR]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [nsubj->0, xcomp->2], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Anna did a lot better than her good friend Lucy on the test because she had studied so hard. {
    Tokens: [anna, did, a, lot, better, than, her, good, friend, lucy, on, the, test, because, she, had, studied, so, hard, .]
    Lemmatized tokens: [Anna, do, a, lot, better, than, she, good, friend, Lucy, on, the, test, because, she, have, study, so, hard, .]
    POS tags: [NNP, VBD-AUX, DT, NN, JJR, IN, PRP$, JJ, NN, NNP, IN, DT, NN, IN, PRP, VBD-AUX, VBN, RB, RB, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, advcl->16, punct->19, xcomp->4, nmod:on->12], [], [det->2], [nmod:npmod->3, nmod:than->9], [], [], [], [], [case->5, nmod:poss->6, amod->7, compound->8], [], [], [case->10, det->11], [], [], [], [aux->15, advmod->18, mark->13, nsubj->14], [], [advmod->17], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B studies hard, then person B does better than person C, and person C does worse than person B. {
    Tokens: [if, person, b, studies, hard, ,, then, person, b, does, better, than, person, c, ,, and, person, c, does, worse, than, person, b.]
    Lemmatized tokens: [if, person, b, study, hard, ,, then, person, b, do, better, than, person, c, ,, and, person, c, do, worse, than, person, B.]
    POS tags: [IN, NN, NN, NNS, RB, ,, RB, NN, NN, VBD-AUX, JJR, IN, NN, NN, ,, CC, NN, NN, VBD-AUX, JJR, IN, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [compound->1, compound->2, advmod->4], [], [], [], [], [advmod->6, compound->7], [cc->15, mark->0, conj:and->18, nsubj->3, punct->5, nsubj->8, dobj->10, nmod:than->13, punct->14], [], [], [], [case->11, compound->12], [], [], [], [compound->16], [nsubj->17, xcomp->19], [nmod:than->22], [], [], [case->20, compound->21]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who studied hard {
    Tokens: [who, studied, hard]
    Lemmatized tokens: [who, study, hard]
    POS tags: [WP, VBD, RB]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [nsubj->0, advmod->2], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Anna did a lot worse than her good friend Lucy on the test because she had studied so hard. {
    Tokens: [anna, did, a, lot, worse, than, her, good, friend, lucy, on, the, test, because, she, had, studied, so, hard, .]
    Lemmatized tokens: [Anna, do, a, lot, worse, than, she, good, friend, Lucy, on, the, test, because, she, have, study, so, hard, .]
    POS tags: [NNP, VBD-AUX, DT, NN, JJR, IN, PRP$, JJ, NN, NNP, IN, DT, NN, IN, PRP, VBD-AUX, VBN, RB, RB, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, advcl->16, punct->19, xcomp->4, nmod:on->12], [], [det->2], [nmod:npmod->3, nmod:than->9], [], [], [], [], [case->5, nmod:poss->6, amod->7, compound->8], [], [], [case->10, det->11], [], [], [], [aux->15, advmod->18, mark->13, nsubj->14], [], [advmod->17], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B studies hard, then person B does better than person C, and person C does worse than person B. {
    Tokens: [if, person, b, studies, hard, ,, then, person, b, does, better, than, person, c, ,, and, person, c, does, worse, than, person, b.]
    Lemmatized tokens: [if, person, b, study, hard, ,, then, person, b, do, better, than, person, c, ,, and, person, c, do, worse, than, person, B.]
    POS tags: [IN, NN, NN, NNS, RB, ,, RB, NN, NN, VBD-AUX, JJR, IN, NN, NN, ,, CC, NN, NN, VBD-AUX, JJR, IN, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [compound->1, compound->2, advmod->4], [], [], [], [], [advmod->6, compound->7], [cc->15, mark->0, conj:and->18, nsubj->3, punct->5, nsubj->8, dobj->10, nmod:than->13, punct->14], [], [], [], [case->11, compound->12], [], [], [], [compound->16], [nsubj->17, xcomp->19], [nmod:than->22], [], [], [case->20, compound->21]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who studied hard {
    Tokens: [who, studied, hard]
    Lemmatized tokens: [who, study, hard]
    POS tags: [WP, VBD, RB]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [nsubj->0, advmod->2], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The firemen arrived after the police because they were coming from so far away. {
    Tokens: [the, firemen, arrived, after, the, police, because, they, were, coming, from, so, far, away, .]
    Lemmatized tokens: [the, fireman, arrive, after, the, police, because, they, be, come, from, so, far, away, .]
    POS tags: [DT, NNS, VBD, IN, DT, NN, IN, PRP, VBD-AUX, VBG, IN, RB, RB, RB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [nsubj->1, nmod:after->5, advcl->9, punct->14], [], [], [case->3, det->4], [], [], [], [mark->6, nsubj->7, aux->8, advcl:from->13], [], [], [advmod->11], [case->10, advmod->12], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B comes from far away, person B comes after person C and person C comes before person B. {
    Tokens: [if, person, b, comes, from, far, away, ,, person, b, comes, after, person, c, and, person, c, comes, before, person, b.]
    Lemmatized tokens: [if, person, b, come, from, far, away, ,, person, b, come, after, person, c, and, person, c, come, before, person, B.]
    POS tags: [IN, NN, NN, VBZ, IN, RB, RB, ,, NN, NN, VBZ, IN, NN, NN, CC, NN, NN, VBZ, IN, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, advcl:from->6], [], [], [case->4, advmod->5], [], [], [compound->8], [advcl->17, advcl->3, punct->7, nsubj->9], [], [], [conj:and->16, compound->12, cc->14], [], [], [compound->15], [nsubj->16, nmod:before->20, mark->11, nsubj->13], [], [], [case->18, compound->19]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who came from far away {
    Tokens: [who, came, from, far, away]
    Lemmatized tokens: [who, come, from, far, away]
    POS tags: [WP, VBD, IN, RB, RB]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, advcl:from->4], [], [], [case->2, advmod->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The firemen arrived before the police because they were coming from so far away. {
    Tokens: [the, firemen, arrived, before, the, police, because, they, were, coming, from, so, far, away, .]
    Lemmatized tokens: [the, fireman, arrive, before, the, police, because, they, be, come, from, so, far, away, .]
    POS tags: [DT, NNS, VBD, IN, DT, NN, IN, PRP, VBD-AUX, VBG, IN, RB, RB, RB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [nsubj->1, nmod:before->5, advcl->9, punct->14], [], [], [case->3, det->4], [], [], [], [mark->6, nsubj->7, aux->8, advcl:from->13], [], [], [advmod->11], [case->10, advmod->12], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B comes from far away, person B comes after person C and person C comes before person B. {
    Tokens: [if, person, b, comes, from, far, away, ,, person, b, comes, after, person, c, and, person, c, comes, before, person, b.]
    Lemmatized tokens: [if, person, b, come, from, far, away, ,, person, b, come, after, person, c, and, person, c, come, before, person, B.]
    POS tags: [IN, NN, NN, VBZ, IN, RB, RB, ,, NN, NN, VBZ, IN, NN, NN, CC, NN, NN, VBZ, IN, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, advcl:from->6], [], [], [case->4, advmod->5], [], [], [compound->8], [advcl->17, advcl->3, punct->7, nsubj->9], [], [], [conj:and->16, compound->12, cc->14], [], [], [compound->15], [nsubj->16, nmod:before->20, mark->11, nsubj->13], [], [], [case->18, compound->19]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who came from far away {
    Tokens: [who, came, from, far, away]
    Lemmatized tokens: [who, come, from, far, away]
    POS tags: [WP, VBD, IN, RB, RB]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, advcl:from->4], [], [], [case->2, advmod->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Frank was upset with Tom because the toaster he had bought from him didn't work. {
    Tokens: [frank, was, upset, with, tom, because, the, toaster, he, had, bought, from, him, did, n't, work, .]
    Lemmatized tokens: [Frank, be, upset, with, Tom, because, the, toaster, he, have, buy, from, he, do, not, work, .]
    POS tags: [NNP, VBD-AUX, VBN, IN, NNP, IN, DT, NN, PRP, VBD-AUX, VBN, IN, PRP, VBD-AUX, RB, VB, .]
    NER tags: [O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [advcl->15, nsubjpass->0, punct->16, auxpass->1, nmod:with->4], [], [case->3], [], [], [det->6, acl:relcl->10], [], [], [nsubj->8, aux->9, nmod:from->12], [], [case->11], [], [], [mark->5, nsubj->7, aux->13, neg->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is upset with person C, person C does something bad to person B. If something person B bought from person C doesn’t work or something person C sold to person B doesn’t work, person C does something bad to person B.. {
    Tokens: [if, person, b, is, upset, with, person, c, ,, person, c, does, something, bad, to, person, b, ., if, something, person, b, bought, from, person, c, does, n't, work, or, something, person, c, sold, to, person, b, does, n't, work, ,, person, c, does, something, bad, to, person, b., .]
    Lemmatized tokens: [if, person, b, be, upset, with, person, c, ,, person, c, do, something, bad, to, person, b, ., if, something, person, b, buy, from, person, c, do, not, work, or, something, person, c, sell, to, person, b, do, not, work, ,, person, c, do, something, bad, to, person, B., .]
    POS tags: [IN, NN, NN, VBD-AUX, VBN, IN, NN, NN, ,, NN, NN, VBD-AUX, NN, JJ, TO, NN, NN, ., IN, NN, NN, NN, VBD, IN, NN, NN, VBD-AUX, RB, VB, CC, NN, NN, NN, VBD, TO, NN, NN, VBD-AUX, RB, VB, ,, NN, NN, VBD-AUX, NN, JJ, TO, NN, NNP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubjpass->2, auxpass->3, nmod:with->7], [], [], [case->5, compound->6], [], [], [compound->9], [punct->17, advcl->4, punct->8, nsubj->10, xcomp->13], [], [nmod:to->16, nsubj->12], [], [], [compound->15, case->14], [], [], [], [], [compound->20, compound->19], [nsubj->21, advcl->39, advcl->28, mark->18], [], [], [compound->24], [], [], [mark->23, conj:or->39, nsubj->25, aux->26, neg->27, cc->29], [], [], [], [compound->30, compound->31, acl->33], [nmod:to->36], [], [], [case->34, compound->35], [], [], [aux->37, neg->38, nsubj->32], [], [], [compound->41], [advcl->22, punct->40, nsubj->42, xcomp->45, punct->49], [], [nsubj->44, nmod:to->48], [], [], [case->46, compound->47], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who had bought the toaster {
    Tokens: [who, had, bought, the, toaster]
    Lemmatized tokens: [who, have, buy, the, toaster]
    POS tags: [WP, VBD-AUX, VBN, DT, NN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, dobj->4], [], [det->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Frank was upset with Tom because the toaster he had sold to him didn't work. {
    Tokens: [frank, was, upset, with, tom, because, the, toaster, he, had, sold, to, him, did, n't, work, .]
    Lemmatized tokens: [Frank, be, upset, with, Tom, because, the, toaster, he, have, sell, to, he, do, not, work, .]
    POS tags: [NNP, VBD-AUX, VBN, IN, NNP, IN, DT, NN, PRP, VBD-AUX, VBN, TO, PRP, VBD-AUX, RB, VB, .]
    NER tags: [O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [advcl->15, nsubjpass->0, punct->16, auxpass->1, nmod:with->4], [], [case->3], [], [], [det->6, acl:relcl->10], [], [], [nsubj->8, aux->9, nmod:to->12], [], [case->11], [], [], [mark->5, nsubj->7, aux->13, neg->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is upset with person C, person C does something bad to person B. If something person B bought from person C doesn’t work or something person C sold to person B doesn’t work, person C does something bad to person B.. {
    Tokens: [if, person, b, is, upset, with, person, c, ,, person, c, does, something, bad, to, person, b, ., if, something, person, b, bought, from, person, c, does, n't, work, or, something, person, c, sold, to, person, b, does, n't, work, ,, person, c, does, something, bad, to, person, b., .]
    Lemmatized tokens: [if, person, b, be, upset, with, person, c, ,, person, c, do, something, bad, to, person, b, ., if, something, person, b, buy, from, person, c, do, not, work, or, something, person, c, sell, to, person, b, do, not, work, ,, person, c, do, something, bad, to, person, B., .]
    POS tags: [IN, NN, NN, VBD-AUX, VBN, IN, NN, NN, ,, NN, NN, VBD-AUX, NN, JJ, TO, NN, NN, ., IN, NN, NN, NN, VBD, IN, NN, NN, VBD-AUX, RB, VB, CC, NN, NN, NN, VBD, TO, NN, NN, VBD-AUX, RB, VB, ,, NN, NN, VBD-AUX, NN, JJ, TO, NN, NNP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubjpass->2, auxpass->3, nmod:with->7], [], [], [case->5, compound->6], [], [], [compound->9], [punct->17, advcl->4, punct->8, nsubj->10, xcomp->13], [], [nmod:to->16, nsubj->12], [], [], [compound->15, case->14], [], [], [], [], [compound->20, compound->19], [nsubj->21, advcl->39, advcl->28, mark->18], [], [], [compound->24], [], [], [mark->23, conj:or->39, nsubj->25, aux->26, neg->27, cc->29], [], [], [], [compound->30, compound->31, acl->33], [nmod:to->36], [], [], [case->34, compound->35], [], [], [aux->37, neg->38, nsubj->32], [], [], [compound->41], [advcl->22, punct->40, nsubj->42, xcomp->45, punct->49], [], [nsubj->44, nmod:to->48], [], [], [case->46, compound->47], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who had sold the toaster {
    Tokens: [who, had, sold, the, toaster]
    Lemmatized tokens: [who, have, sell, the, toaster]
    POS tags: [WP, VBD-AUX, VBN, DT, NN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, dobj->4], [], [det->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Jim yelled at Kevin because he was so upset. {
    Tokens: [jim, yelled, at, kevin, because, he, was, so, upset, .]
    Lemmatized tokens: [Jim, yell, at, Kevin, because, he, be, so, upset, .]
    POS tags: [NNP, VBD, IN, NNP, IN, PRP, VBD-AUX, RB, JJ, .]
    NER tags: [PERSON, O, O, PERSON, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:at->3, advcl->8, punct->9], [], [case->2], [], [], [], [], [mark->4, nsubj->5, cop->6, advmod->7], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is upset, then person B might do something strange or somebody might comfort person B. If person B yells at person C, person B is doing something strange. {
    Tokens: [if, person, b, is, upset, ,, then, person, b, might, do, something, strange, or, somebody, might, comfort, person, b, ., if, person, b, yells, at, person, c, ,, person, b, is, doing, something, strange, .]
    Lemmatized tokens: [if, person, b, be, upset, ,, then, person, b, might, do, something, strange, or, somebody, might, comfort, person, b, ., if, person, b, yell, at, person, c, ,, person, b, be, do, something, strange, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBN, ,, RB, NN, NN, VBD-AUX, VBD-AUX, NN, JJ, CC, NN, VBD-AUX, VB, NN, NN, ., IN, NN, NN, VBZ, IN, NN, NN, ,, NN, NN, VBD-AUX, VBG, NN, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubjpass->2, auxpass->3], [], [], [], [compound->7], [], [conj:or->16, punct->19, advcl->4, punct->5, advmod->6, nsubj->8, aux->9, dobj->11, cc->13], [amod->12], [], [], [], [], [aux->15, dobj->18, nsubj->14], [], [compound->17], [], [], [], [compound->21], [nsubj->22, nmod:at->26, mark->20], [], [], [case->24, compound->25], [], [], [compound->28], [], [advcl->23, punct->27, nsubj->29, aux->30, dobj->32, punct->34], [amod->33], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was upset {
    Tokens: [who, was, upset]
    Lemmatized tokens: [who, be, upset]
    POS tags: [WP, VBD-AUX, VBN]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Jim comforted Kevin because he was so upset. {
    Tokens: [jim, comforted, kevin, because, he, was, so, upset, .]
    Lemmatized tokens: [Jim, comfort, Kevin, because, he, be, so, upset, .]
    POS tags: [NNP, VBD, NNP, IN, PRP, VBD-AUX, RB, JJ, .]
    NER tags: [PERSON, O, PERSON, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2, advcl->7, punct->8], [], [], [], [], [], [mark->3, nsubj->4, cop->5, advmod->6], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is upset, person B might do something strange or somebody might comfort person B. If person B yells at person C, person B is doing something strange. {
    Tokens: [if, person, b, is, upset, ,, person, b, might, do, something, strange, or, somebody, might, comfort, person, b, ., if, person, b, yells, at, person, c, ,, person, b, is, doing, something, strange, .]
    Lemmatized tokens: [if, person, b, be, upset, ,, person, b, might, do, something, strange, or, somebody, might, comfort, person, b, ., if, person, b, yell, at, person, c, ,, person, b, be, do, something, strange, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBN, ,, NN, NN, VBD-AUX, VBD-AUX, NN, JJ, CC, NN, VBD-AUX, VB, NN, NN, ., IN, NN, NN, VBZ, IN, NN, NN, ,, NN, NN, VBD-AUX, VBG, NN, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubjpass->2, auxpass->3], [], [], [compound->6], [], [punct->18, advcl->4, punct->5, nsubj->7, aux->8, dobj->10], [acl:relcl->15], [cc->12, conj:or->13], [], [], [], [dobj->17, nsubj->11, nsubj->13, aux->14], [], [compound->16], [], [], [], [compound->20], [nsubj->21, nmod:at->25, mark->19], [], [], [case->23, compound->24], [], [], [compound->27], [], [advcl->22, punct->26, nsubj->28, aux->29, dobj->31, punct->33], [amod->32], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was upset {
    Tokens: [who, was, upset]
    Lemmatized tokens: [who, be, upset]
    POS tags: [WP, VBD-AUX, VBN]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The sack of potatoes had been placed above the bag of flour, so it had to be moved first. {
    Tokens: [the, sack, of, potatoes, had, been, placed, above, the, bag, of, flour, ,, so, it, had, to, be, moved, first, .]
    Lemmatized tokens: [the, sack, of, potato, have, be, place, above, the, bag, of, flour, ,, so, it, have, to, be, move, first, .]
    POS tags: [DT, NN, IN, NNS, VBD-AUX, VBD-AUX, VBN, IN, DT, NN, IN, NN, ,, IN, PRP, VBD-AUX, TO, VBD-AUX, VBN, RB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, ORDINAL, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1.0, null]
    Dependency children: [[], [det->0, nmod:of->3], [], [case->2], [], [], [parataxis->15, nsubjpass->1, aux->4, punct->20, auxpass->5, nmod:above->9, punct->12, dep->13], [], [], [case->7, det->8, nmod:of->11], [], [case->10], [], [], [], [xcomp->18, nsubj->14], [], [], [mark->16, auxpass->17, advmod->19], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is placed above thing C or thing C is placed below thing B,  thing B has to be moved first. {
    Tokens: [if, thing, b, is, placed, above, thing, c, or, thing, c, is, placed, below, thing, b, ,, thing, b, has, to, be, moved, first, .]
    Lemmatized tokens: [if, thing, b, be, place, above, thing, c, or, thing, c, be, place, below, thing, b, ,, thing, b, have, to, be, move, first, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBN, IN, NN, NN, CC, NN, NN, VBD-AUX, VBN, IN, NN, NN, ,, NN, NN, VBD-AUX, TO, VBD-AUX, VBN, RB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, ORDINAL, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1.0, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubjpass->2, auxpass->3, nmod:above->7, nmod:above->10], [], [], [case->5, compound->6, cc->8, conj:or->10, acl:relcl->12], [], [], [compound->9], [], [nmod:below->15, auxpass->11], [], [], [case->13, compound->14], [], [], [compound->17], [punct->16, nsubj->18, advcl->4, xcomp->22, punct->24], [], [], [mark->20, auxpass->21, advmod->23], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What had to be moved first {
    Tokens: [what, had, to, be, moved, first]
    Lemmatized tokens: [what, have, to, be, move, first]
    POS tags: [WDT, VBD-AUX, TO, VBD-AUX, VBN, RB]
    NER tags: [O, O, O, O, O, ORDINAL]
    NER values: [null, null, null, null, null, 1.0]
    Dependency children: [[], [nsubj->0, xcomp->4], [], [], [mark->2, auxpass->3, advmod->5], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The sack of potatoes had been placed below the bag of flour, so it had to be moved first. {
    Tokens: [the, sack, of, potatoes, had, been, placed, below, the, bag, of, flour, ,, so, it, had, to, be, moved, first, .]
    Lemmatized tokens: [the, sack, of, potato, have, be, place, below, the, bag, of, flour, ,, so, it, have, to, be, move, first, .]
    POS tags: [DT, NN, IN, NNS, VBD-AUX, VBD-AUX, VBN, IN, DT, NN, IN, NN, ,, IN, PRP, VBD-AUX, TO, VBD-AUX, VBN, RB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, ORDINAL, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1.0, null]
    Dependency children: [[], [det->0, nmod:of->3], [], [case->2], [], [], [parataxis->15, nsubjpass->1, aux->4, punct->20, auxpass->5, nmod:below->9, punct->12, dep->13], [], [], [case->7, det->8, nmod:of->11], [], [case->10], [], [], [], [xcomp->18, nsubj->14], [], [], [mark->16, auxpass->17, advmod->19], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is placed above thing C or thing C is placed below thing B,  thing B has to be moved first. {
    Tokens: [if, thing, b, is, placed, above, thing, c, or, thing, c, is, placed, below, thing, b, ,, thing, b, has, to, be, moved, first, .]
    Lemmatized tokens: [if, thing, b, be, place, above, thing, c, or, thing, c, be, place, below, thing, b, ,, thing, b, have, to, be, move, first, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBN, IN, NN, NN, CC, NN, NN, VBD-AUX, VBN, IN, NN, NN, ,, NN, NN, VBD-AUX, TO, VBD-AUX, VBN, RB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, ORDINAL, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1.0, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubjpass->2, auxpass->3, nmod:above->7, nmod:above->10], [], [], [case->5, compound->6, cc->8, conj:or->10, acl:relcl->12], [], [], [compound->9], [], [nmod:below->15, auxpass->11], [], [], [case->13, compound->14], [], [], [compound->17], [punct->16, nsubj->18, advcl->4, xcomp->22, punct->24], [], [], [mark->20, auxpass->21, advmod->23], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What had to be moved first {
    Tokens: [what, had, to, be, moved, first]
    Lemmatized tokens: [what, have, to, be, move, first]
    POS tags: [WDT, VBD-AUX, TO, VBD-AUX, VBN, RB]
    NER tags: [O, O, O, O, O, ORDINAL]
    NER values: [null, null, null, null, null, 1.0]
    Dependency children: [[], [nsubj->0, xcomp->4], [], [], [mark->2, auxpass->3, advmod->5], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Pete envies Martin because he is very successful. {
    Tokens: [pete, envies, martin, because, he, is, very, successful, .]
    Lemmatized tokens: [Pete, envy, Martin, because, he, be, very, successful, .]
    POS tags: [NNP, VBZ, NNP, IN, PRP, VBD-AUX, RB, JJ, .]
    NER tags: [PERSON, O, PERSON, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2, advcl->7, punct->8], [], [], [], [], [], [mark->3, nsubj->4, cop->5, advmod->6], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is successful, somebody might envy person B. {
    Tokens: [if, person, b, is, successful, ,, somebody, might, envy, person, b.]
    Lemmatized tokens: [if, person, b, be, successful, ,, somebody, might, envy, person, B.]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, ,, NN, VBD-AUX, VB, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3], [], [], [], [advcl->4, punct->5, nsubj->6, aux->7, dobj->10], [], [compound->9]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who is very successful {
    Tokens: [who, is, very, successful]
    Lemmatized tokens: [who, be, very, successful]
    POS tags: [WP, VBD-AUX, RB, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, advmod->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Pete envies Martin although he is very successful. {
    Tokens: [pete, envies, martin, although, he, is, very, successful, .]
    Lemmatized tokens: [Pete, envy, Martin, although, he, be, very, successful, .]
    POS tags: [NNP, VBZ, NNP, IN, PRP, VBD-AUX, RB, JJ, .]
    NER tags: [PERSON, O, PERSON, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2, advcl->7, punct->8], [], [], [], [], [], [mark->3, nsubj->4, cop->5, advmod->6], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is successful, somebody might envy person B. {
    Tokens: [if, person, b, is, successful, ,, somebody, might, envy, person, b.]
    Lemmatized tokens: [if, person, b, be, successful, ,, somebody, might, envy, person, B.]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, ,, NN, VBD-AUX, VB, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3], [], [], [], [advcl->4, punct->5, nsubj->6, aux->7, dobj->10], [], [compound->9]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who is very successful {
    Tokens: [who, is, very, successful]
    Lemmatized tokens: [who, be, very, successful]
    POS tags: [WP, VBD-AUX, RB, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, advmod->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I was trying to balance the bottle upside down on the table, but I couldn't do it because it was so top-heavy. {
    Tokens: [i, was, trying, to, balance, the, bottle, upside, down, on, the, table, ,, but, i, could, n't, do, it, because, it, was, so, top, heavy, .]
    Lemmatized tokens: [I, be, try, to, balance, the, bottle, upside, down, on, the, table, ,, but, I, could, not, do, it, because, it, be, so, top, heavy, .]
    POS tags: [PRP, VBD-AUX, VBG, TO, VB, DT, NN, RB, RB, IN, DT, NN, ,, CC, PRP, VBD-AUX, RB, VBD-AUX, PRP, IN, PRP, VBD-AUX, RB, JJ, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, conj:but->17, xcomp->4, punct->25, punct->12, cc->13], [], [mark->3, dobj->6, advmod->8, nmod:on->11], [], [det->5], [], [advmod->7], [], [], [case->9, det->10], [], [], [], [], [], [aux->15, neg->16, dobj->18, advcl->24, nsubj->14], [], [], [], [], [], [], [mark->19, nsubj->20, cop->21, advmod->22, amod->23], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If  thing B is top-heavy or thing C is uneven, somebody can’t balance thing B on thing C. {
    Tokens: [if, thing, b, is, top, heavy, or, thing, c, is, uneven, ,, somebody, ca, n't, balance, thing, b, on, thing, c.]
    Lemmatized tokens: [if, thing, b, be, top, heavy, or, thing, c, be, uneven, ,, somebody, can, not, balance, thing, b, on, thing, C.]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, NN, CC, NN, NN, VBD-AUX, JJ, ,, NN, MD, RB, VB, NN, NN, IN, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubj->2, cop->3, amod->4, cc->6, conj:or->8, acl:relcl->10], [], [], [compound->7], [], [cop->9], [], [], [], [], [dobj->17, nmod:on->20, advcl->5, advcl->8, punct->11, nsubj->12, aux->13, neg->14], [], [compound->16], [], [], [case->18, compound->19]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What was top-heavy {
    Tokens: [what, was, top, heavy]
    Lemmatized tokens: [what, be, top, heavy]
    POS tags: [WP, VBD-AUX, JJ, NN]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[cop->1, nsubj->3], [], [], [amod->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I was trying to balance the bottle upside down on the table, but I couldn't do it because it was so uneven. {
    Tokens: [i, was, trying, to, balance, the, bottle, upside, down, on, the, table, ,, but, i, could, n't, do, it, because, it, was, so, uneven, .]
    Lemmatized tokens: [I, be, try, to, balance, the, bottle, upside, down, on, the, table, ,, but, I, could, not, do, it, because, it, be, so, uneven, .]
    POS tags: [PRP, VBD-AUX, VBG, TO, VB, DT, NN, RB, RB, IN, DT, NN, ,, CC, PRP, VBD-AUX, RB, VBD-AUX, PRP, IN, PRP, VBD-AUX, RB, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, conj:but->17, xcomp->4, punct->24, punct->12, cc->13], [], [mark->3, dobj->6, advmod->8, nmod:on->11], [], [det->5], [], [advmod->7], [], [], [case->9, det->10], [], [], [], [], [], [aux->15, neg->16, dobj->18, advcl->23, nsubj->14], [], [], [], [], [], [mark->19, nsubj->20, cop->21, advmod->22], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If  thing B is top-heavy or thing C is uneven, somebody can’t balance thing B on thing C. {
    Tokens: [if, thing, b, is, top, heavy, or, thing, c, is, uneven, ,, somebody, ca, n't, balance, thing, b, on, thing, c.]
    Lemmatized tokens: [if, thing, b, be, top, heavy, or, thing, c, be, uneven, ,, somebody, can, not, balance, thing, b, on, thing, C.]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, NN, CC, NN, NN, VBD-AUX, JJ, ,, NN, MD, RB, VB, NN, NN, IN, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubj->2, cop->3, amod->4, cc->6, conj:or->8, acl:relcl->10], [], [], [compound->7], [], [cop->9], [], [], [], [], [dobj->17, nmod:on->20, advcl->5, advcl->8, punct->11, nsubj->12, aux->13, neg->14], [], [compound->16], [], [], [case->18, compound->19]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What was uneven {
    Tokens: [what, was, uneven]
    Lemmatized tokens: [what, be, uneven]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I spread the cloth on the table in order to protect it. {
    Tokens: [i, spread, the, cloth, on, the, table, in, order, to, protect, it, .]
    Lemmatized tokens: [I, spread, the, cloth, on, the, table, in, order, to, protect, it, .]
    POS tags: [PRP, VBD, DT, NN, IN, DT, NN, IN, NN, TO, VB, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, nmod:on->6, advcl->10, punct->12], [], [det->2], [], [], [case->4, det->5], [mwe->8], [], [], [mark->7, mark->9, dobj->11], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: To protect what {
    Tokens: [to, protect, what]
    Lemmatized tokens: [to, protect, what]
    POS tags: [TO, VB, WP]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [mark->0, dobj->2], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If somebody spread thing B on thing C, thing B is displayed and thing C is covered by thing B. If thing C is covered by thing B, thing C is protected. {
    Tokens: [if, somebody, spread, thing, b, on, thing, c, ,, thing, b, is, displayed, and, thing, c, is, covered, by, thing, b, ., if, thing, c, is, covered, by, thing, b, ,, thing, c, is, protected, .]
    Lemmatized tokens: [if, somebody, spread, thing, b, on, thing, c, ,, thing, b, be, display, and, thing, c, be, cover, by, thing, b, ., if, thing, c, be, cover, by, thing, b, ,, thing, c, be, protect, .]
    POS tags: [IN, NN, NN, NN, NN, IN, NN, NN, ,, NN, NN, VBD-AUX, VBN, CC, NN, NN, VBD-AUX, VBN, IN, NN, NN, ., IN, NN, NN, VBD-AUX, VBN, IN, NN, NN, ,, NN, NN, VBD-AUX, VBN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [mark->0, compound->1, compound->2, compound->3, nmod:on->7], [], [], [case->5, compound->6], [], [], [compound->9], [], [conj:and->17, advcl->4, punct->21, punct->8, nsubjpass->10, auxpass->11, cc->13], [], [], [compound->14], [], [nsubjpass->15, auxpass->16, nmod:agent->20], [], [], [case->18, compound->19], [], [], [], [compound->23], [], [nsubjpass->24, auxpass->25, nmod:agent->29, mark->22], [], [], [case->27, compound->28], [], [], [compound->31], [], [advcl->26, punct->30, nsubjpass->32, auxpass->33, punct->35], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I spread the cloth on the table in order to display it. {
    Tokens: [i, spread, the, cloth, on, the, table, in, order, to, display, it, .]
    Lemmatized tokens: [I, spread, the, cloth, on, the, table, in, order, to, display, it, .]
    POS tags: [PRP, VBD, DT, NN, IN, DT, NN, IN, NN, TO, VB, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, nmod:on->6, advcl->10, punct->12], [], [det->2], [], [], [case->4, det->5], [mwe->8], [], [], [mark->7, mark->9, dobj->11], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: To display what {
    Tokens: [to, display, what]
    Lemmatized tokens: [to, display, what]
    POS tags: [TO, VB, WP]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [mark->0, dobj->2], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If somebody spread thing B on thing C, thing B is displayed and thing C is covered by thing B. If thing C is covered by thing B, thing C is protected. {
    Tokens: [if, somebody, spread, thing, b, on, thing, c, ,, thing, b, is, displayed, and, thing, c, is, covered, by, thing, b, ., if, thing, c, is, covered, by, thing, b, ,, thing, c, is, protected, .]
    Lemmatized tokens: [if, somebody, spread, thing, b, on, thing, c, ,, thing, b, be, display, and, thing, c, be, cover, by, thing, b, ., if, thing, c, be, cover, by, thing, b, ,, thing, c, be, protect, .]
    POS tags: [IN, NN, NN, NN, NN, IN, NN, NN, ,, NN, NN, VBD-AUX, VBN, CC, NN, NN, VBD-AUX, VBN, IN, NN, NN, ., IN, NN, NN, VBD-AUX, VBN, IN, NN, NN, ,, NN, NN, VBD-AUX, VBN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [mark->0, compound->1, compound->2, compound->3, nmod:on->7], [], [], [case->5, compound->6], [], [], [compound->9], [], [conj:and->17, advcl->4, punct->21, punct->8, nsubjpass->10, auxpass->11, cc->13], [], [], [compound->14], [], [nsubjpass->15, auxpass->16, nmod:agent->20], [], [], [case->18, compound->19], [], [], [], [compound->23], [], [nsubjpass->24, auxpass->25, nmod:agent->29, mark->22], [], [], [case->27, compound->28], [], [], [compound->31], [], [advcl->26, punct->30, nsubjpass->32, auxpass->33, punct->35], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The older students were bullying the younger ones, so we rescued them. {
    Tokens: [the, older, students, were, bullying, the, younger, ones, ,, so, we, rescued, them, .]
    Lemmatized tokens: [the, older, student, be, bully, the, younger, one, ,, so, we, rescue, they, .]
    POS tags: [DT, JJR, NNS, VBD-AUX, VBG, DT, JJR, NNS, ,, IN, PRP, VBD, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [det->0, amod->1], [], [nsubj->2, aux->3, dobj->7, punct->8, dep->9, parataxis->11, punct->13], [], [], [det->5, amod->6], [], [], [], [nsubj->10, dobj->12], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B bully person C, person B does something bad and person C is in danger. If person B is in danger, person B will be rescued. If person B does something bad, person B will be punished. {
    Tokens: [if, person, b, bully, person, c, ,, person, b, does, something, bad, and, person, c, is, in, danger, ., if, person, b, is, in, danger, ,, person, b, will, be, rescued, ., if, person, b, does, something, bad, ,, person, b, will, be, punished, .]
    Lemmatized tokens: [if, person, b, bully, person, c, ,, person, b, do, something, bad, and, person, c, be, in, danger, ., if, person, b, be, in, danger, ,, person, b, will, be, rescue, ., if, person, b, do, something, bad, ,, person, b, will, be, punish, .]
    POS tags: [IN, NN, NN, NN, NN, NN, ,, NN, NN, VBD-AUX, NN, JJ, CC, NN, NN, VBD-AUX, IN, NN, ., IN, NN, NN, VBD-AUX, IN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, ., IN, NN, NN, VBD-AUX, NN, JJ, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [mark->0, dep->5], [], [], [], [compound->2, compound->3, compound->4], [], [], [compound->7], [advcl->1, conj:and->17, punct->18, punct->6, nsubj->8, xcomp->11, cc->12], [], [nsubj->10], [], [], [compound->13], [], [], [cop->15, case->16, nsubj->14], [], [], [], [compound->20], [], [], [nsubj->21, cop->22, case->23, mark->19], [], [], [compound->26], [], [], [advcl:in->24, punct->25, nsubjpass->27, aux->28, auxpass->29, punct->31], [], [], [], [compound->33], [xcomp->37, mark->32, nsubj->34], [], [nsubj->36], [], [], [compound->39], [], [], [punct->38, nsubjpass->40, aux->41, auxpass->42, punct->44, advcl->35], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whom did we rescue {
    Tokens: [whom, did, we, rescue]
    Lemmatized tokens: [whom, do, we, rescue]
    POS tags: [WP, VBD-AUX, PRP, NN]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [nsubj->0, xcomp->3], [], [nsubj->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The older students were bullying the younger ones, so we punished them. {
    Tokens: [the, older, students, were, bullying, the, younger, ones, ,, so, we, punished, them, .]
    Lemmatized tokens: [the, older, student, be, bully, the, younger, one, ,, so, we, punish, they, .]
    POS tags: [DT, JJR, NNS, VBD-AUX, VBG, DT, JJR, NNS, ,, IN, PRP, VBD, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [det->0, amod->1], [], [nsubj->2, aux->3, dobj->7, punct->8, dep->9, parataxis->11, punct->13], [], [], [det->5, amod->6], [], [], [], [nsubj->10, dobj->12], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B bully person C, person B does something bad and person C is in danger. If person B is in danger, person B will be rescued. If person B does something bad, person B will be punished. {
    Tokens: [if, person, b, bully, person, c, ,, person, b, does, something, bad, and, person, c, is, in, danger, ., if, person, b, is, in, danger, ,, person, b, will, be, rescued, ., if, person, b, does, something, bad, ,, person, b, will, be, punished, .]
    Lemmatized tokens: [if, person, b, bully, person, c, ,, person, b, do, something, bad, and, person, c, be, in, danger, ., if, person, b, be, in, danger, ,, person, b, will, be, rescue, ., if, person, b, do, something, bad, ,, person, b, will, be, punish, .]
    POS tags: [IN, NN, NN, NN, NN, NN, ,, NN, NN, VBD-AUX, NN, JJ, CC, NN, NN, VBD-AUX, IN, NN, ., IN, NN, NN, VBD-AUX, IN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, ., IN, NN, NN, VBD-AUX, NN, JJ, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [mark->0, dep->5], [], [], [], [compound->2, compound->3, compound->4], [], [], [compound->7], [advcl->1, conj:and->17, punct->18, punct->6, nsubj->8, xcomp->11, cc->12], [], [nsubj->10], [], [], [compound->13], [], [], [cop->15, case->16, nsubj->14], [], [], [], [compound->20], [], [], [nsubj->21, cop->22, case->23, mark->19], [], [], [compound->26], [], [], [advcl:in->24, punct->25, nsubjpass->27, aux->28, auxpass->29, punct->31], [], [], [], [compound->33], [xcomp->37, mark->32, nsubj->34], [], [nsubj->36], [], [], [compound->39], [], [], [punct->38, nsubjpass->40, aux->41, auxpass->42, punct->44, advcl->35], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whom did we punish {
    Tokens: [whom, did, we, punish]
    Lemmatized tokens: [whom, do, we, punish]
    POS tags: [WP, VBD-AUX, PRP, VBP]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [dobj->0, aux->1, nsubj->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I poured water from the bottle into the cup until it was full. {
    Tokens: [i, poured, water, from, the, bottle, into, the, cup, until, it, was, full, .]
    Lemmatized tokens: [I, pour, water, from, the, bottle, into, the, cup, until, it, be, full, .]
    POS tags: [PRP, VBD, NN, IN, DT, NN, IN, DT, NN, IN, PRP, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2, nmod:from->5, nmod:into->8, advcl->12, punct->13], [], [], [], [case->3, det->4], [], [], [case->6, det->7], [], [], [], [mark->9, nsubj->10, cop->11], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If somebody pours something from thing B into thing C, thing B will be empty and thing C will be full. {
    Tokens: [if, somebody, pours, something, from, thing, b, into, thing, c, ,, thing, b, will, be, empty, and, thing, c, will, be, full, .]
    Lemmatized tokens: [if, somebody, pour, something, from, thing, b, into, thing, c, ,, thing, b, will, be, empty, and, thing, c, will, be, full, .]
    POS tags: [IN, NN, VBZ, NN, IN, NN, NN, IN, NN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [mark->0, nsubj->1, dobj->3, nmod:into->9], [nmod:from->6], [], [], [case->4, compound->5], [], [], [case->7, compound->8], [], [], [compound->11], [], [], [cc->16, advcl->2, conj:and->21, punct->22, punct->10, nsubj->12, aux->13, cop->14], [], [], [compound->17], [], [], [nsubj->18, aux->19, cop->20], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What was full {
    Tokens: [what, was, full]
    Lemmatized tokens: [what, be, full]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I poured water from the bottle into the cup until it was empty. {
    Tokens: [i, poured, water, from, the, bottle, into, the, cup, until, it, was, empty, .]
    Lemmatized tokens: [I, pour, water, from, the, bottle, into, the, cup, until, it, be, empty, .]
    POS tags: [PRP, VBD, NN, IN, DT, NN, IN, DT, NN, IN, PRP, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2, nmod:from->5, nmod:into->8, advcl->12, punct->13], [], [], [], [case->3, det->4], [], [], [case->6, det->7], [], [], [], [mark->9, nsubj->10, cop->11], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If somebody pours something from thing B into thing C, thing B will be empty and thing C will be full. {
    Tokens: [if, somebody, pours, something, from, thing, b, into, thing, c, ,, thing, b, will, be, empty, and, thing, c, will, be, full, .]
    Lemmatized tokens: [if, somebody, pour, something, from, thing, b, into, thing, c, ,, thing, b, will, be, empty, and, thing, c, will, be, full, .]
    POS tags: [IN, NN, VBZ, NN, IN, NN, NN, IN, NN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [mark->0, nsubj->1, dobj->3, nmod:into->9], [nmod:from->6], [], [], [case->4, compound->5], [], [], [case->7, compound->8], [], [], [compound->11], [], [], [cc->16, advcl->2, conj:and->21, punct->22, punct->10, nsubj->12, aux->13, cop->14], [], [], [compound->17], [], [], [nsubj->18, aux->19, cop->20], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What was empty {
    Tokens: [what, was, empty]
    Lemmatized tokens: [what, be, empty]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Susan knows all about Ann's personal problems because she is nosy. {
    Tokens: [susan, knows, all, about, ann, 's, personal, problems, because, she, is, nosy, .]
    Lemmatized tokens: [Susan, know, all, about, Ann, 's, personal, problem, because, she, be, nosy, .]
    POS tags: [NNP, VBZ, DT, IN, NNP, POS, JJ, NNS, IN, PRP, VBD-AUX, JJ, .]
    NER tags: [PERSON, O, O, O, PERSON, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2, advcl->11, punct->12], [nmod:about->7], [], [case->5], [], [], [case->3, nmod:poss->4, amod->6], [], [], [], [mark->8, nsubj->9, cop->10], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is nosy, person B will know about somebody’s personal problems. If person B is indiscreet, somebody will know about person B’s personal problems. {
    Tokens: [if, person, b, is, nosy, ,, person, b, will, know, about, somebody, 's, personal, problems, ., if, person, b, is, indiscreet, ,, somebody, will, know, about, person, b, 's, personal, problems, .]
    Lemmatized tokens: [if, person, b, be, nosy, ,, person, b, will, know, about, somebody, 's, personal, problem, ., if, person, b, be, indiscreet, ,, somebody, will, know, about, person, b, 's, personal, problem, .]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, ,, NN, NN, VBD-AUX, VB, IN, NN, POS, JJ, NNS, ., IN, NN, NN, VBD-AUX, JJ, ,, NN, VBD-AUX, VB, IN, NN, NN, POS, JJ, NNS, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3], [], [], [compound->6], [], [punct->15, advcl->4, punct->5, nsubj->7, aux->8, nmod:about->14], [], [case->12], [], [], [case->10, nmod:poss->11, amod->13], [], [], [], [compound->17], [], [nsubj->18, cop->19, mark->16], [], [], [], [advcl->20, punct->21, nsubj->22, aux->23, nmod:about->30, punct->31], [], [], [compound->26, case->28], [], [], [case->25, nmod:poss->27, amod->29], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who is nosy {
    Tokens: [who, is, nosy]
    Lemmatized tokens: [who, be, nosy]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Susan knows all about Ann's personal problems because she is indiscreet. {
    Tokens: [susan, knows, all, about, ann, 's, personal, problems, because, she, is, indiscreet, .]
    Lemmatized tokens: [Susan, know, all, about, Ann, 's, personal, problem, because, she, be, indiscreet, .]
    POS tags: [NNP, VBZ, DT, IN, NNP, POS, JJ, NNS, IN, PRP, VBD-AUX, JJ, .]
    NER tags: [PERSON, O, O, O, PERSON, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2, advcl->11, punct->12], [nmod:about->7], [], [case->5], [], [], [case->3, nmod:poss->4, amod->6], [], [], [], [mark->8, nsubj->9, cop->10], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is nosy, person B will know about somebody’s personal problems. If person B is indiscreet, somebody will know about person B’s personal problems. {
    Tokens: [if, person, b, is, nosy, ,, person, b, will, know, about, somebody, 's, personal, problems, ., if, person, b, is, indiscreet, ,, somebody, will, know, about, person, b, 's, personal, problems, .]
    Lemmatized tokens: [if, person, b, be, nosy, ,, person, b, will, know, about, somebody, 's, personal, problem, ., if, person, b, be, indiscreet, ,, somebody, will, know, about, person, b, 's, personal, problem, .]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, ,, NN, NN, VBD-AUX, VB, IN, NN, POS, JJ, NNS, ., IN, NN, NN, VBD-AUX, JJ, ,, NN, VBD-AUX, VB, IN, NN, NN, POS, JJ, NNS, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3], [], [], [compound->6], [], [punct->15, advcl->4, punct->5, nsubj->7, aux->8, nmod:about->14], [], [case->12], [], [], [case->10, nmod:poss->11, amod->13], [], [], [], [compound->17], [], [nsubj->18, cop->19, mark->16], [], [], [], [advcl->20, punct->21, nsubj->22, aux->23, nmod:about->30, punct->31], [], [], [compound->26, case->28], [], [], [case->25, nmod:poss->27, amod->29], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who is indiscreet {
    Tokens: [who, is, indiscreet]
    Lemmatized tokens: [who, be, indiscreet]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Sid explained his theory to Mark but he couldn't convince him. {
    Tokens: [sid, explained, his, theory, to, mark, but, he, could, n't, convince, him, .]
    Lemmatized tokens: [Sid, explain, he, theory, to, mark, but, he, could, not, convince, he, .]
    POS tags: [NNP, VBD, PRP$, NN, TO, NN, CC, PRP, VBD-AUX, RB, VB, PRP, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, nmod:to->5, cc->6, conj:but->10, punct->12], [], [nmod:poss->2], [], [case->4], [], [], [], [], [nsubj->7, aux->8, neg->9, dobj->11], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B explains something to person C, person B might not convince person C and person C might not understand person B. {
    Tokens: [if, person, b, explains, something, to, person, c, ,, person, b, might, not, convince, person, c, and, person, c, might, not, understand, person, b.]
    Lemmatized tokens: [if, person, b, explain, something, to, person, c, ,, person, b, might, not, convince, person, c, and, person, c, might, not, understand, person, B.]
    POS tags: [IN, NN, NN, VBZ, NN, TO, NN, NN, ,, NN, NN, VBD-AUX, RB, VB, NN, NN, CC, NN, NN, VBD-AUX, RB, VB, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->4, nmod:to->7], [], [], [], [case->5, compound->6], [], [], [compound->9], [], [], [dobj->15, dobj->18, advcl->3, punct->8, nsubj->10, aux->11, neg->12], [], [cc->16, conj:and->18, compound->14], [], [], [compound->17], [], [], [aux->19, neg->20, dobj->22, nsubj->23, dep->13], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who did not convince whom {
    Tokens: [who, did, not, convince, whom]
    Lemmatized tokens: [who, do, not, convince, whom]
    POS tags: [WP, VBD-AUX, RB, VB, WP]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, aux->1, neg->2, dobj->4], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Sid explained his theory to Mark but he couldn't understand him. {
    Tokens: [sid, explained, his, theory, to, mark, but, he, could, n't, understand, him, .]
    Lemmatized tokens: [Sid, explain, he, theory, to, mark, but, he, could, not, understand, he, .]
    POS tags: [NNP, VBD, PRP$, NN, TO, NN, CC, PRP, VBD-AUX, RB, VB, PRP, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, nmod:to->5, cc->6, conj:but->10, punct->12], [], [nmod:poss->2], [], [case->4], [], [], [], [], [nsubj->7, aux->8, neg->9, dobj->11], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B explains something to person C, person B might not convince person C and person C might not understand person B. {
    Tokens: [if, person, b, explains, something, to, person, c, ,, person, b, might, not, convince, person, c, and, person, c, might, not, understand, person, b.]
    Lemmatized tokens: [if, person, b, explain, something, to, person, c, ,, person, b, might, not, convince, person, c, and, person, c, might, not, understand, person, B.]
    POS tags: [IN, NN, NN, VBZ, NN, TO, NN, NN, ,, NN, NN, VBD-AUX, RB, VB, NN, NN, CC, NN, NN, VBD-AUX, RB, VB, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->4, nmod:to->7], [], [], [], [case->5, compound->6], [], [], [compound->9], [], [], [dobj->15, dobj->18, advcl->3, punct->8, nsubj->10, aux->11, neg->12], [], [cc->16, conj:and->18, compound->14], [], [], [compound->17], [], [], [aux->19, neg->20, dobj->22, nsubj->23, dep->13], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who did not understand whom {
    Tokens: [who, did, not, understand, whom]
    Lemmatized tokens: [who, do, not, understand, whom]
    POS tags: [WP, VBD-AUX, RB, VB, WP]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, aux->1, neg->2, dobj->4], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Susan knew that Ann's son had been in a car accident, so she told her about it. {
    Tokens: [susan, knew, that, ann, 's, son, had, been, in, a, car, accident, ,, so, she, told, her, about, it, .]
    Lemmatized tokens: [Susan, know, that, Ann, 's, son, have, be, in, a, car, accident, ,, so, she, tell, she, about, it, .]
    POS tags: [NNP, VBD, IN, NNP, POS, NN, VBD-AUX, VBD-AUX, IN, DT, NN, NN, ,, IN, PRP, VBD, PRP, IN, PRP, .]
    NER tags: [PERSON, O, O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [parataxis->15, nsubj->0, punct->19, ccomp->11, punct->12, dep->13], [], [case->4], [], [nmod:poss->3], [], [], [], [], [], [mark->2, nsubj->5, aux->6, cop->7, case->8, det->9, compound->10], [], [], [], [dobj->16, nmod:about->18, nsubj->14], [], [], [case->17], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B knows sth, person B might tell sth to somebody. If person B tells person C srth, person C knows sth. {
    Tokens: [if, person, b, knows, sth, ,, person, b, might, tell, sth, to, somebody, ., if, person, b, tells, person, c, srth, ,, person, c, knows, sth, .]
    Lemmatized tokens: [if, person, b, know, sth, ,, person, b, might, tell, sth, to, somebody, ., if, person, b, tell, person, c, srth, ,, person, c, know, sth, .]
    POS tags: [IN, NN, NN, VBZ, NN, ,, NN, NN, VBD-AUX, VB, NN, TO, NN, ., IN, NN, NN, VBZ, NN, NN, NN, ,, NN, NN, VBZ, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->4], [], [], [], [compound->6], [], [advcl->3, punct->5, nsubj->7, aux->8, dobj->10, nmod:to->12, punct->13], [], [], [case->11], [], [], [], [compound->15], [nsubj->16, dobj->20, mark->14], [], [], [compound->18, compound->19], [], [], [compound->22], [advcl->17, punct->21, nsubj->23, dobj->25, punct->26], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who told the other about the accident {
    Tokens: [who, told, the, other, about, the, accident]
    Lemmatized tokens: [who, tell, the, other, about, the, accident]
    POS tags: [WP, VBD, DT, JJ, IN, DT, NN]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, nmod:about->6], [], [det->2], [], [], [case->4, det->5]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Susan knew that Ann's son had been in a car accident, because she told her about it. {
    Tokens: [susan, knew, that, ann, 's, son, had, been, in, a, car, accident, ,, because, she, told, her, about, it, .]
    Lemmatized tokens: [Susan, know, that, Ann, 's, son, have, be, in, a, car, accident, ,, because, she, tell, she, about, it, .]
    POS tags: [NNP, VBD, IN, NNP, POS, NN, VBD-AUX, VBD-AUX, IN, DT, NN, NN, ,, IN, PRP, VBD, PRP, IN, PRP, .]
    NER tags: [PERSON, O, O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, punct->19, ccomp->11], [], [case->4], [], [nmod:poss->3], [], [], [], [], [], [advcl->15, mark->2, nsubj->5, aux->6, cop->7, case->8, det->9, compound->10, punct->12], [], [], [], [dobj->16, nmod:about->18, mark->13, nsubj->14], [], [], [case->17], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B knows sth, person B might tell sth to somebody. If person B tells person C srth, person C knows sth. {
    Tokens: [if, person, b, knows, sth, ,, person, b, might, tell, sth, to, somebody, ., if, person, b, tells, person, c, srth, ,, person, c, knows, sth, .]
    Lemmatized tokens: [if, person, b, know, sth, ,, person, b, might, tell, sth, to, somebody, ., if, person, b, tell, person, c, srth, ,, person, c, know, sth, .]
    POS tags: [IN, NN, NN, VBZ, NN, ,, NN, NN, VBD-AUX, VB, NN, TO, NN, ., IN, NN, NN, VBZ, NN, NN, NN, ,, NN, NN, VBZ, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->4], [], [], [], [compound->6], [], [advcl->3, punct->5, nsubj->7, aux->8, dobj->10, nmod:to->12, punct->13], [], [], [case->11], [], [], [], [compound->15], [nsubj->16, dobj->20, mark->14], [], [], [compound->18, compound->19], [], [], [compound->22], [advcl->17, punct->21, nsubj->23, dobj->25, punct->26], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who told the other about the accident {
    Tokens: [who, told, the, other, about, the, accident]
    Lemmatized tokens: [who, tell, the, other, about, the, accident]
    POS tags: [WP, VBD, DT, JJ, IN, DT, NN]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, nmod:about->6], [], [det->2], [], [], [case->4, det->5]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Joe's uncle can still beat him at tennis, even though he is 30 years older. {
    Tokens: [joe, 's, uncle, can, still, beat, him, at, tennis, ,, even, though, he, is, 30, years, older, .]
    Lemmatized tokens: [Joe, 's, uncle, can, still, beat, he, at, tennis, ,, even, though, he, be, 30, year, older, .]
    POS tags: [NNP, POS, NNP, VBD-AUX, RB, VB, PRP, IN, NN, ,, RB, IN, PRP, VBD-AUX, CD, NNS, JJR, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, DURATION, DURATION, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, P30Y, P30Y, null, null]
    Dependency children: [[case->1], [], [nmod:poss->0], [], [], [advcl->16, punct->17, nsubj->2, aux->3, advmod->4, dobj->6, nmod:at->8, punct->9], [], [], [case->7], [], [], [], [], [], [], [nummod->14], [nmod:npmod->15, advmod->10, mark->11, nsubj->12, cop->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is younger than person C, person B can beat person C. If person B is older than person C, person C is younger than person B. {
    Tokens: [if, person, b, is, younger, than, person, c, ,, person, b, can, beat, person, c, ., if, person, b, is, older, than, person, c, ,, person, c, is, younger, than, person, b.]
    Lemmatized tokens: [if, person, b, be, younger, than, person, c, ,, person, b, can, beat, person, c, ., if, person, b, be, older, than, person, c, ,, person, c, be, younger, than, person, B.]
    POS tags: [IN, NN, NN, VBD-AUX, JJR, IN, NN, NN, ,, NN, NN, VBD-AUX, VB, NN, NN, ., IN, NN, NN, VBD-AUX, JJR, IN, NN, NN, ,, NN, NN, VBD-AUX, JJR, IN, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3, nmod:than->7], [], [], [case->5, compound->6], [], [], [compound->9], [], [punct->15, advcl->4, punct->8, nsubj->10, aux->11, dobj->14], [], [compound->13], [], [], [], [compound->17], [], [nsubj->18, cop->19, nmod:than->23, mark->16], [], [], [case->21, compound->22], [], [], [compound->25], [], [advcl->20, punct->24, nsubj->26, cop->27, nmod:than->31], [], [], [case->29, compound->30]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who is older {
    Tokens: [who, is, older]
    Lemmatized tokens: [who, be, older]
    POS tags: [WP, VBD-AUX, JJR]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Joe's uncle can still beat him at tennis, even though he is 30 years younger. {
    Tokens: [joe, 's, uncle, can, still, beat, him, at, tennis, ,, even, though, he, is, 30, years, younger, .]
    Lemmatized tokens: [Joe, 's, uncle, can, still, beat, he, at, tennis, ,, even, though, he, be, 30, year, younger, .]
    POS tags: [NNP, POS, NNP, VBD-AUX, RB, VB, PRP, IN, NN, ,, RB, IN, PRP, VBD-AUX, CD, NNS, JJR, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, DURATION, DURATION, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, P30Y, P30Y, null, null]
    Dependency children: [[case->1], [], [nmod:poss->0], [], [], [advcl->16, punct->17, nsubj->2, aux->3, advmod->4, dobj->6, nmod:at->8, punct->9], [], [], [case->7], [], [], [], [], [], [], [nummod->14], [dep->15, advmod->10, mark->11, nsubj->12, cop->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is younger than person C, person B can beat person C. If person B is older than person C, person C is younger than person B. {
    Tokens: [if, person, b, is, younger, than, person, c, ,, person, b, can, beat, person, c, ., if, person, b, is, older, than, person, c, ,, person, c, is, younger, than, person, b.]
    Lemmatized tokens: [if, person, b, be, younger, than, person, c, ,, person, b, can, beat, person, c, ., if, person, b, be, older, than, person, c, ,, person, c, be, younger, than, person, B.]
    POS tags: [IN, NN, NN, VBD-AUX, JJR, IN, NN, NN, ,, NN, NN, VBD-AUX, VB, NN, NN, ., IN, NN, NN, VBD-AUX, JJR, IN, NN, NN, ,, NN, NN, VBD-AUX, JJR, IN, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3, nmod:than->7], [], [], [case->5, compound->6], [], [], [compound->9], [], [punct->15, advcl->4, punct->8, nsubj->10, aux->11, dobj->14], [], [compound->13], [], [], [], [compound->17], [], [nsubj->18, cop->19, nmod:than->23, mark->16], [], [], [case->21, compound->22], [], [], [compound->25], [], [advcl->20, punct->24, nsubj->26, cop->27, nmod:than->31], [], [], [case->29, compound->30]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who is younger {
    Tokens: [who, is, younger]
    Lemmatized tokens: [who, be, younger]
    POS tags: [WP, VBD-AUX, JJR]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The police left the house and went into the garage, where they found the murder weapon. {
    Tokens: [the, police, left, the, house, and, went, into, the, garage, ,, where, they, found, the, murder, weapon, .]
    Lemmatized tokens: [the, police, leave, the, house, and, go, into, the, garage, ,, where, they, find, the, murder, weapon, .]
    POS tags: [DT, NN, VBD, DT, NNP, CC, VBD, IN, DT, NN, ,, WRB, PRP, VBD, DT, NN, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [nsubj->1, punct->17, dobj->4, cc->5, conj:and->6], [], [det->3], [], [nsubj->1, nmod:into->9], [], [], [case->7, det->8, punct->10, acl:relcl->13], [], [], [], [dobj->16, advmod->11, nsubj->12], [], [], [compound->15, det->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B did sth in place C, person B might leave place C after person B did sth. {
    Tokens: [if, person, b, did, sth, in, place, c, ,, person, b, might, leave, place, c, after, person, b, did, sth, .]
    Lemmatized tokens: [if, person, b, do, sth, in, place, c, ,, person, b, might, leave, place, c, after, person, b, do, sth, .]
    POS tags: [IN, NN, NN, VBD-AUX, NN, IN, NN, NN, ,, NN, NN, VBD-AUX, VB, NN, NN, IN, NN, NN, VBD-AUX, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->4, nmod:in->7], [], [], [], [case->5, compound->6], [], [], [compound->9], [], [advcl->18, advcl->3, punct->20, punct->8, nsubj->10, aux->11, dobj->14], [], [compound->13], [], [], [compound->16], [mark->15, nsubj->17, dobj->19], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Where did they find the murder weapon {
    Tokens: [where, did, they, find, the, murder, weapon]
    Lemmatized tokens: [where, do, they, find, the, murder, weapon]
    POS tags: [WRB, VBD-AUX, PRP, VBP, DT, NN, NN]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [advmod->0, aux->1, nsubj->2, dobj->6], [], [], [det->4, compound->5]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The police left the house and went into the garage, after they found the murder weapon. {
    Tokens: [the, police, left, the, house, and, went, into, the, garage, ,, after, they, found, the, murder, weapon, .]
    Lemmatized tokens: [the, police, leave, the, house, and, go, into, the, garage, ,, after, they, find, the, murder, weapon, .]
    POS tags: [DT, NN, VBD, DT, NNP, CC, VBD, IN, DT, NN, ,, IN, PRP, VBD, DT, NN, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [nsubj->1, punct->17, dobj->4, cc->5, conj:and->6], [], [det->3], [], [nsubj->1, nmod:into->9, punct->10, advcl->13], [], [], [case->7, det->8], [], [], [], [dobj->16, mark->11, nsubj->12], [], [], [compound->15, det->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B did sth in place C, person B might leave place C after person B did sth. {
    Tokens: [if, person, b, did, sth, in, place, c, ,, person, b, might, leave, place, c, after, person, b, did, sth, .]
    Lemmatized tokens: [if, person, b, do, sth, in, place, c, ,, person, b, might, leave, place, c, after, person, b, do, sth, .]
    POS tags: [IN, NN, NN, VBD-AUX, NN, IN, NN, NN, ,, NN, NN, VBD-AUX, VB, NN, NN, IN, NN, NN, VBD-AUX, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->4, nmod:in->7], [], [], [], [case->5, compound->6], [], [], [compound->9], [], [advcl->18, advcl->3, punct->20, punct->8, nsubj->10, aux->11, dobj->14], [], [compound->13], [], [], [compound->16], [mark->15, nsubj->17, dobj->19], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Where did they find the murder weapon {
    Tokens: [where, did, they, find, the, murder, weapon]
    Lemmatized tokens: [where, do, they, find, the, murder, weapon]
    POS tags: [WRB, VBD-AUX, PRP, VBP, DT, NN, NN]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [advmod->0, aux->1, nsubj->2, dobj->6], [], [], [det->4, compound->5]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The painting in Mark's living room shows an oak tree {
    Tokens: [the, painting, in, mark, 's, living, room, shows, an, oak, tree]
    Lemmatized tokens: [the, painting, in, mark, 's, living, room, show, a, oak, tree]
    POS tags: [DT, NN, IN, NN, POS, NN, NN, VBZ, DT, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0, nmod:in->6], [], [case->4], [], [], [case->2, nmod:poss->3, compound->5], [nsubj->1, dobj->10], [], [], [det->8, compound->9]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: It is to the right of the bookcase. {
    Tokens: [it, is, to, the, right, of, the, bookcase, .]
    Lemmatized tokens: [it, be, to, the, right, of, the, bookcase, .]
    POS tags: [PRP, VBD-AUX, TO, DT, NN, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [nsubj->0, cop->1, case->2, det->3, nmod:of->7, punct->8], [], [], [case->5, det->6], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is to the right of thing C, thing B is near thing C. If thing B is near thing C, thing B is in the same place with thing C. B tree can not be in a room. B bookcase can be in a room. {
    Tokens: [if, thing, b, is, to, the, right, of, thing, c, ,, thing, b, is, near, thing, c, ., if, thing, b, is, near, thing, c, ,, thing, b, is, in, the, same, place, with, thing, c., b, tree, can, not, be, in, a, room, ., b, bookcase, can, be, in, a, room, .]
    Lemmatized tokens: [if, thing, b, be, to, the, right, of, thing, c, ,, thing, b, be, near, thing, c, ., if, thing, b, be, near, thing, c, ,, thing, b, be, in, the, same, place, with, thing, c., b, tree, can, not, be, in, a, room, ., b, bookcase, can, be, in, a, room, .]
    POS tags: [IN, NN, NN, VBD-AUX, TO, DT, NN, IN, NN, NN, ,, NN, NN, VBD-AUX, IN, NN, NN, ., IN, NN, NN, VBD-AUX, IN, NN, NN, ,, NN, NN, VBD-AUX, IN, DT, JJ, NN, IN, NN, JJ, NN, NN, VBD-AUX, RB, VBD-AUX, IN, DT, NN, ., NN, NN, VBD-AUX, VBD-AUX, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [], [mark->0, nsubj->2, cop->3, case->4, det->5, nmod:of->9], [], [], [case->7, compound->8], [], [], [compound->11], [], [], [], [compound->15, punct->17, advcl:to->6, punct->10, nsubj->12, cop->13, case->14], [], [], [], [compound->19], [], [], [], [nsubj->20, cop->21, case->22, compound->23, mark->18], [], [], [compound->26], [], [], [], [], [advcl:near->24, punct->25, nsubj->27, cop->28, punct->44, case->29, det->30, amod->31, nmod:with->34], [], [acl:relcl->43, case->33], [], [], [compound->36, amod->35], [], [], [], [], [], [nsubj->37, aux->38, neg->39, cop->40, case->41, det->42], [], [], [compound->45], [], [], [], [], [det->50, punct->52, nsubj->46, aux->47, cop->48, case->49], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What is to the right of the bookcase {
    Tokens: [what, is, to, the, right, of, the, bookcase]
    Lemmatized tokens: [what, be, to, the, right, of, the, bookcase]
    POS tags: [WP, VBD-AUX, TO, DT, NN, IN, DT, NN]
    NER tags: [O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:to->4], [], [], [case->2, det->3, nmod:of->7], [], [], [case->5, det->6]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The painting in Mark's living room shows an oak tree {
    Tokens: [the, painting, in, mark, 's, living, room, shows, an, oak, tree]
    Lemmatized tokens: [the, painting, in, mark, 's, living, room, show, a, oak, tree]
    POS tags: [DT, NN, IN, NN, POS, NN, NN, VBZ, DT, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0, nmod:in->6], [], [case->4], [], [], [case->2, nmod:poss->3, compound->5], [nsubj->1, dobj->10], [], [], [det->8, compound->9]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: It is to the right of a house. {
    Tokens: [it, is, to, the, right, of, a, house, .]
    Lemmatized tokens: [it, be, to, the, right, of, a, house, .]
    POS tags: [PRP, VBD-AUX, TO, DT, NN, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [nsubj->0, cop->1, case->2, det->3, nmod:of->7, punct->8], [], [], [case->5, det->6], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is to the right of thing C, thing B is near thing C. If thing B is near thing C, thing B is in the same place with thing C. B tree can not be in a room. B bookcase can be in a room. {
    Tokens: [if, thing, b, is, to, the, right, of, thing, c, ,, thing, b, is, near, thing, c, ., if, thing, b, is, near, thing, c, ,, thing, b, is, in, the, same, place, with, thing, c., b, tree, can, not, be, in, a, room, ., b, bookcase, can, be, in, a, room, .]
    Lemmatized tokens: [if, thing, b, be, to, the, right, of, thing, c, ,, thing, b, be, near, thing, c, ., if, thing, b, be, near, thing, c, ,, thing, b, be, in, the, same, place, with, thing, c., b, tree, can, not, be, in, a, room, ., b, bookcase, can, be, in, a, room, .]
    POS tags: [IN, NN, NN, VBD-AUX, TO, DT, NN, IN, NN, NN, ,, NN, NN, VBD-AUX, IN, NN, NN, ., IN, NN, NN, VBD-AUX, IN, NN, NN, ,, NN, NN, VBD-AUX, IN, DT, JJ, NN, IN, NN, JJ, NN, NN, VBD-AUX, RB, VBD-AUX, IN, DT, NN, ., NN, NN, VBD-AUX, VBD-AUX, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [], [mark->0, nsubj->2, cop->3, case->4, det->5, nmod:of->9], [], [], [case->7, compound->8], [], [], [compound->11], [], [], [], [compound->15, punct->17, advcl:to->6, punct->10, nsubj->12, cop->13, case->14], [], [], [], [compound->19], [], [], [], [nsubj->20, cop->21, case->22, compound->23, mark->18], [], [], [compound->26], [], [], [], [], [advcl:near->24, punct->25, nsubj->27, cop->28, punct->44, case->29, det->30, amod->31, nmod:with->34], [], [acl:relcl->43, case->33], [], [], [compound->36, amod->35], [], [], [], [], [], [nsubj->37, aux->38, neg->39, cop->40, case->41, det->42], [], [], [compound->45], [], [], [], [], [det->50, punct->52, nsubj->46, aux->47, cop->48, case->49], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What is to the right of a house {
    Tokens: [what, is, to, the, right, of, a, house]
    Lemmatized tokens: [what, be, to, the, right, of, a, house]
    POS tags: [WP, VBD-AUX, TO, DT, NN, IN, DT, NNP]
    NER tags: [O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:to->4], [], [], [case->2, det->3, nmod:of->7], [], [], [case->5, det->6]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: There is a gap in the wall {
    Tokens: [there, is, a, gap, in, the, wall]
    Lemmatized tokens: [there, be, a, gap, in, the, wall]
    POS tags: [EX, VBD-AUX, DT, NN, IN, DT, NN]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [expl->0, nsubj->3], [], [det->2, nmod:in->6], [], [], [case->4, det->5]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: You can see the garden through it. {
    Tokens: [you, can, see, the, garden, through, it, .]
    Lemmatized tokens: [you, can, see, the, garden, through, it, .]
    POS tags: [PRP, VBD-AUX, VB, DT, NN, IN, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, dobj->4, nmod:through->6, punct->7], [], [det->3], [], [case->5], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Person B can see thing B through a gap. Person B can see thing B behind a wall. {
    Tokens: [person, b, can, see, thing, b, through, a, gap, ., person, b, can, see, thing, b, behind, a, wall, .]
    Lemmatized tokens: [person, b, can, see, thing, b, through, a, gap, ., person, b, can, see, thing, b, behind, a, wall, .]
    POS tags: [NN, NN, VBD-AUX, VB, NN, NN, IN, DT, NN, ., NN, NN, VBD-AUX, VB, NN, NN, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [compound->0], [], [nsubj->1, aux->2, dobj->5, nmod:through->8, punct->9], [], [compound->4], [], [], [case->6, det->7], [], [], [compound->10], [], [aux->12, dobj->15, nmod:behind->18, punct->19, nsubj->11], [], [compound->14], [], [], [case->16, det->17], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: You can see the garden through what {
    Tokens: [you, can, see, the, garden, through, what]
    Lemmatized tokens: [you, can, see, the, garden, through, what]
    POS tags: [PRP, VBD-AUX, VB, DT, NN, IN, WP]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, dobj->4], [], [det->3, nmod:through->6], [], [case->5]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: There is a gap in the wall {
    Tokens: [there, is, a, gap, in, the, wall]
    Lemmatized tokens: [there, be, a, gap, in, the, wall]
    POS tags: [EX, VBD-AUX, DT, NN, IN, DT, NN]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [expl->0, nsubj->3], [], [det->2, nmod:in->6], [], [], [case->4, det->5]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: You can see the garden behind it. {
    Tokens: [you, can, see, the, garden, behind, it, .]
    Lemmatized tokens: [you, can, see, the, garden, behind, it, .]
    POS tags: [PRP, VBD-AUX, VB, DT, NN, IN, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, dobj->4, nmod:behind->6, punct->7], [], [det->3], [], [case->5], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Person B can see thing B through a gap. Person B can see thing B behind a wall. {
    Tokens: [person, b, can, see, thing, b, through, a, gap, ., person, b, can, see, thing, b, behind, a, wall, .]
    Lemmatized tokens: [person, b, can, see, thing, b, through, a, gap, ., person, b, can, see, thing, b, behind, a, wall, .]
    POS tags: [NN, NN, VBD-AUX, VB, NN, NN, IN, DT, NN, ., NN, NN, VBD-AUX, VB, NN, NN, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [compound->0], [], [nsubj->1, aux->2, dobj->5, nmod:through->8, punct->9], [], [compound->4], [], [], [case->6, det->7], [], [], [compound->10], [], [aux->12, dobj->15, nmod:behind->18, punct->19, nsubj->11], [], [compound->14], [], [], [case->16, det->17], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: You can see the garden behind what {
    Tokens: [you, can, see, the, garden, behind, what]
    Lemmatized tokens: [you, can, see, the, garden, behind, what]
    POS tags: [PRP, VBD-AUX, VB, DT, NN, IN, WP]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, dobj->4, nmod:behind->6], [], [det->3], [], [case->5]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The drain is clogged with hair {
    Tokens: [the, drain, is, clogged, with, hair]
    Lemmatized tokens: [the, drain, be, clog, with, hair]
    POS tags: [DT, NN, VBD-AUX, VBN, IN, NN]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [nsubjpass->1, auxpass->2, nmod:with->5], [], [case->4]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: It has to be cleaned. {
    Tokens: [it, has, to, be, cleaned, .]
    Lemmatized tokens: [it, have, to, be, clean, .]
    POS tags: [PRP, VBD-AUX, TO, VBD-AUX, VBN, .]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, xcomp->4, punct->5], [], [], [mark->2, auxpass->3], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is clogged with thing C, thing B must be cleaned and thing C must be removed. {
    Tokens: [if, thing, b, is, clogged, with, thing, c, ,, thing, b, must, be, cleaned, and, thing, c, must, be, removed, .]
    Lemmatized tokens: [if, thing, b, be, clog, with, thing, c, ,, thing, b, must, be, clean, and, thing, c, must, be, remove, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBN, IN, NN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, CC, NN, NN, VBD-AUX, VBD-AUX, VBN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubjpass->2, auxpass->3, nmod:with->7], [], [], [case->5, compound->6], [], [], [compound->9], [], [], [conj:and->19, advcl->4, punct->20, punct->8, nsubjpass->10, aux->11, auxpass->12, cc->14], [], [], [compound->15], [], [], [nsubjpass->16, aux->17, auxpass->18], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What has to be cleaned {
    Tokens: [what, has, to, be, cleaned]
    Lemmatized tokens: [what, have, to, be, clean]
    POS tags: [WDT, VBD-AUX, TO, VBD-AUX, VBN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, xcomp->4], [], [], [mark->2, auxpass->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The drain is clogged with hair {
    Tokens: [the, drain, is, clogged, with, hair]
    Lemmatized tokens: [the, drain, be, clog, with, hair]
    POS tags: [DT, NN, VBD-AUX, VBN, IN, NN]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [nsubjpass->1, auxpass->2, nmod:with->5], [], [case->4]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: It has to be removed. {
    Tokens: [it, has, to, be, removed, .]
    Lemmatized tokens: [it, have, to, be, remove, .]
    POS tags: [PRP, VBD-AUX, TO, VBD-AUX, VBN, .]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, xcomp->4, punct->5], [], [], [mark->2, auxpass->3], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is clogged with thing C, thing B must be cleaned and thing C must be removed. {
    Tokens: [if, thing, b, is, clogged, with, thing, c, ,, thing, b, must, be, cleaned, and, thing, c, must, be, removed, .]
    Lemmatized tokens: [if, thing, b, be, clog, with, thing, c, ,, thing, b, must, be, clean, and, thing, c, must, be, remove, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBN, IN, NN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, CC, NN, NN, VBD-AUX, VBD-AUX, VBN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubjpass->2, auxpass->3, nmod:with->7], [], [], [case->5, compound->6], [], [], [compound->9], [], [], [conj:and->19, advcl->4, punct->20, punct->8, nsubjpass->10, aux->11, auxpass->12, cc->14], [], [], [compound->15], [], [], [nsubjpass->16, aux->17, auxpass->18], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What has to be removed {
    Tokens: [what, has, to, be, removed]
    Lemmatized tokens: [what, have, to, be, remove]
    POS tags: [WDT, VBD-AUX, TO, VBD-AUX, VBN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, xcomp->4], [], [], [mark->2, auxpass->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: My meeting started at 4:00 and I needed to catch the train at 4:30, so there wasn't much time {
    Tokens: [my, meeting, started, at, 4:00, and, i, needed, to, catch, the, train, at, 4:30, ,, so, there, was, n't, much, time]
    Lemmatized tokens: [my, meeting, start, at, 4:00, and, I, need, to, catch, the, train, at, 4:30, ,, so, there, be, not, much, time]
    POS tags: [PRP$, NN, VBD, IN, CD, CC, PRP, VBD, TO, VB, DT, NN, IN, CD, ,, RB, EX, VBD-AUX, RB, JJ, NN]
    NER tags: [O, O, O, O, TIME, O, O, O, O, O, O, O, O, TIME, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, T04:00, null, null, null, null, null, null, null, null, T04:30, null, null, null, null, null, null, null]
    Dependency children: [[], [nmod:poss->0], [nsubj->1, nmod:at->4, cc->5, conj:and->7], [], [case->3], [], [], [advmod->15, parataxis->17, nsubj->6, xcomp->9, punct->14], [], [mark->8, dobj->11, nmod:at->13], [], [det->10], [], [case->12], [], [], [], [expl->16, neg->18, nsubj->20], [], [], [amod->19]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Luckily, it was short, so it worked out. {
    Tokens: [luckily, ,, it, was, short, ,, so, it, worked, out, .]
    Lemmatized tokens: [luckily, ,, it, be, short, ,, so, it, work, out, .]
    POS tags: [RB, ,, PRP, VBD-AUX, JJ, ,, IN, PRP, VBD, RP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [advmod->0, punct->1, nsubj->2, cop->3, punct->5, advcl->8, punct->10], [], [], [], [mark->6, nsubj->7, compound:prt->9], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is short, thing B costs less time. If thing B begins before thing C, and thing B costs less time, it is lucky. If thing B begins before thing C and thing C is delayed, it is lucky. {
    Tokens: [if, thing, b, is, short, ,, thing, b, costs, less, time, ., if, thing, b, begins, before, thing, c, ,, and, thing, b, costs, less, time, ,, it, is, lucky, ., if, thing, b, begins, before, thing, c, and, thing, c, is, delayed, ,, it, is, lucky, .]
    Lemmatized tokens: [if, thing, b, be, short, ,, thing, b, cost, less, time, ., if, thing, b, begin, before, thing, c, ,, and, thing, b, cost, less, time, ,, it, be, lucky, ., if, thing, b, begin, before, thing, c, and, thing, c, be, delay, ,, it, be, lucky, .]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, ,, NN, NN, NNS, JJR, NN, ., IN, NN, NN, VBZ, IN, NN, NN, ,, CC, NN, NN, NNS, JJR, NN, ,, PRP, VBD-AUX, JJ, ., IN, NN, NN, VBZ, IN, NN, NN, CC, NN, NN, VBD-AUX, VBN, ,, PRP, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[dep->1], [], [], [], [dep->0, nsubj->2, cop->3, punct->5, parataxis->10, punct->11], [], [], [], [compound->6, compound->7], [], [dep->8, amod->9], [], [], [], [compound->13], [nsubj->14, nmod:before->18, punct->19, cc->20, conj:and->25, mark->12], [], [], [case->16, compound->17], [], [], [], [], [compound->21, compound->22], [], [dep->23, amod->24], [], [], [], [punct->30, advcl->15, advcl->25, punct->26, nsubj->27, cop->28], [], [], [], [compound->32], [advcl->42, mark->31, nsubj->33], [], [], [compound->36, cc->38, conj:and->40], [], [], [compound->39], [], [nsubjpass->37, nsubjpass->40, auxpass->41, mark->35], [], [], [], [punct->43, nsubj->44, cop->45, punct->47, advcl->34], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What was short {
    Tokens: [what, was, short]
    Lemmatized tokens: [what, be, short]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: My meeting started at 4:00 and I needed to catch the train at 4:30, so there wasn't much time {
    Tokens: [my, meeting, started, at, 4:00, and, i, needed, to, catch, the, train, at, 4:30, ,, so, there, was, n't, much, time]
    Lemmatized tokens: [my, meeting, start, at, 4:00, and, I, need, to, catch, the, train, at, 4:30, ,, so, there, be, not, much, time]
    POS tags: [PRP$, NN, VBD, IN, CD, CC, PRP, VBD, TO, VB, DT, NN, IN, CD, ,, RB, EX, VBD-AUX, RB, JJ, NN]
    NER tags: [O, O, O, O, TIME, O, O, O, O, O, O, O, O, TIME, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, T04:00, null, null, null, null, null, null, null, null, T04:30, null, null, null, null, null, null, null]
    Dependency children: [[], [nmod:poss->0], [nsubj->1, nmod:at->4, cc->5, conj:and->7], [], [case->3], [], [], [advmod->15, parataxis->17, nsubj->6, xcomp->9, punct->14], [], [mark->8, dobj->11, nmod:at->13], [], [det->10], [], [case->12], [], [], [], [expl->16, neg->18, nsubj->20], [], [], [amod->19]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Luckily, it was delayed, so it worked out. {
    Tokens: [luckily, ,, it, was, delayed, ,, so, it, worked, out, .]
    Lemmatized tokens: [luckily, ,, it, be, delay, ,, so, it, work, out, .]
    POS tags: [RB, ,, PRP, VBD-AUX, VBN, ,, IN, PRP, VBD, RP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [advmod->0, punct->1, nsubjpass->2, auxpass->3, punct->5, dep->6, parataxis->8, punct->10], [], [], [], [nsubj->7, compound:prt->9], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is short, thing B costs less time. If thing B begins before thing C, and thing B costs less time, it is lucky. If thing B begins before thing C and thing C is delayed, it is lucky. {
    Tokens: [if, thing, b, is, short, ,, thing, b, costs, less, time, ., if, thing, b, begins, before, thing, c, ,, and, thing, b, costs, less, time, ,, it, is, lucky, ., if, thing, b, begins, before, thing, c, and, thing, c, is, delayed, ,, it, is, lucky, .]
    Lemmatized tokens: [if, thing, b, be, short, ,, thing, b, cost, less, time, ., if, thing, b, begin, before, thing, c, ,, and, thing, b, cost, less, time, ,, it, be, lucky, ., if, thing, b, begin, before, thing, c, and, thing, c, be, delay, ,, it, be, lucky, .]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, ,, NN, NN, NNS, JJR, NN, ., IN, NN, NN, VBZ, IN, NN, NN, ,, CC, NN, NN, NNS, JJR, NN, ,, PRP, VBD-AUX, JJ, ., IN, NN, NN, VBZ, IN, NN, NN, CC, NN, NN, VBD-AUX, VBN, ,, PRP, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[dep->1], [], [], [], [dep->0, nsubj->2, cop->3, punct->5, parataxis->10, punct->11], [], [], [], [compound->6, compound->7], [], [dep->8, amod->9], [], [], [], [compound->13], [nsubj->14, nmod:before->18, punct->19, cc->20, conj:and->25, mark->12], [], [], [case->16, compound->17], [], [], [], [], [compound->21, compound->22], [], [dep->23, amod->24], [], [], [], [punct->30, advcl->15, advcl->25, punct->26, nsubj->27, cop->28], [], [], [], [compound->32], [advcl->42, mark->31, nsubj->33], [], [], [compound->36, cc->38, conj:and->40], [], [], [compound->39], [], [nsubjpass->37, nsubjpass->40, auxpass->41, mark->35], [], [], [], [punct->43, nsubj->44, cop->45, punct->47, advcl->34], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What was delayed {
    Tokens: [what, was, delayed]
    Lemmatized tokens: [what, be, delay]
    POS tags: [WP, VBD-AUX, VBN]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubjpass->0, auxpass->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: There is a pillar between me and the stage, and I can't see it. {
    Tokens: [there, is, a, pillar, between, me, and, the, stage, ,, and, i, ca, n't, see, it, .]
    Lemmatized tokens: [there, be, a, pillar, between, I, and, the, stage, ,, and, I, can, not, see, it, .]
    POS tags: [EX, VBD-AUX, DT, NN, IN, PRP, CC, DT, NN, ,, CC, PRP, MD, RB, VB, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [expl->0, punct->16, nsubj->3, punct->9, cc->10, conj:and->14], [], [det->2, nmod:between->5, nmod:between->8], [], [case->4, cc->6, conj:and->8], [], [], [det->7], [], [], [], [], [], [dobj->15, nsubj->11, aux->12, neg->13], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is between somebody and thing C, he can’t see thing C and he can’t see around thing B. {
    Tokens: [if, thing, b, is, between, somebody, and, thing, c, ,, he, ca, n't, see, thing, c, and, he, ca, n't, see, around, thing, b.]
    Lemmatized tokens: [if, thing, b, be, between, somebody, and, thing, c, ,, he, can, not, see, thing, c, and, he, can, not, see, around, thing, B.]
    POS tags: [IN, NN, NN, VBD-AUX, IN, NN, CC, NN, NN, ,, PRP, MD, RB, VB, NN, NN, CC, PRP, MD, RB, VB, IN, NNP, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [cc->6, conj:and->7], [], [], [mark->0, nsubj->2, cop->3, case->4, compound->5, compound->7], [], [], [], [], [dobj->15, cc->16, conj:and->20, advcl:between->8, punct->9, nsubj->10, aux->11, neg->12], [], [compound->14], [], [], [], [], [nsubj->17, aux->18, neg->19, nmod:around->23], [], [], [case->21, compound->22]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What can't I see {
    Tokens: [what, ca, n't, i, see]
    Lemmatized tokens: [what, can, not, I, see]
    POS tags: [WDT, MD, RB, PRP, VBP]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, neg->2, ccomp->4], [], [], [nsubj->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: There is a pillar between me and the stage, and I can't see around it. {
    Tokens: [there, is, a, pillar, between, me, and, the, stage, ,, and, i, ca, n't, see, around, it, .]
    Lemmatized tokens: [there, be, a, pillar, between, I, and, the, stage, ,, and, I, can, not, see, around, it, .]
    POS tags: [EX, VBD-AUX, DT, NN, IN, PRP, CC, DT, NN, ,, CC, PRP, MD, RB, VB, IN, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [expl->0, punct->17, nsubj->3, punct->9, cc->10, conj:and->14], [], [det->2, nmod:between->5, nmod:between->8], [], [case->4, cc->6, conj:and->8], [], [], [det->7], [], [], [], [], [], [nmod:around->16, nsubj->11, aux->12, neg->13], [], [case->15], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is between somebody and thing C, he can’t see thing C and he can’t see around thing B. {
    Tokens: [if, thing, b, is, between, somebody, and, thing, c, ,, he, ca, n't, see, thing, c, and, he, ca, n't, see, around, thing, b.]
    Lemmatized tokens: [if, thing, b, be, between, somebody, and, thing, c, ,, he, can, not, see, thing, c, and, he, can, not, see, around, thing, B.]
    POS tags: [IN, NN, NN, VBD-AUX, IN, NN, CC, NN, NN, ,, PRP, MD, RB, VB, NN, NN, CC, PRP, MD, RB, VB, IN, NNP, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [cc->6, conj:and->7], [], [], [mark->0, nsubj->2, cop->3, case->4, compound->5, compound->7], [], [], [], [], [dobj->15, cc->16, conj:and->20, advcl:between->8, punct->9, nsubj->10, aux->11, neg->12], [], [compound->14], [], [], [], [], [nsubj->17, aux->18, neg->19, nmod:around->23], [], [], [case->21, compound->22]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What can't I see around {
    Tokens: [what, ca, n't, i, see, around]
    Lemmatized tokens: [what, can, not, I, see, around]
    POS tags: [WDT, MD, RB, PRP, VBP, IN]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, neg->2, ccomp->4], [], [], [nsubj->3, advmod->5], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: They broadcast an announcement, but a subway came into the station and I couldn't hear it. {
    Tokens: [they, broadcast, an, announcement, ,, but, a, subway, came, into, the, station, and, i, could, n't, hear, it, .]
    Lemmatized tokens: [they, broadcast, a, announcement, ,, but, a, subway, come, into, the, station, and, I, could, not, hear, it, .]
    POS tags: [PRP, VBP, DT, NN, ,, CC, DT, NN, VBD, IN, DT, NN, CC, PRP, VBD-AUX, RB, VB, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, conj:but->16, punct->18, dobj->3, punct->4, cc->5, conj:but->8], [], [det->2], [], [], [], [det->6], [conj:and->16, nsubj->7, nmod:into->11, cc->12], [], [], [case->9, det->10], [], [], [], [], [neg->15, dobj->17, nsubj->13, aux->14], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If somebody broadcast sth, another might not hear it. If there exists a loud, another one might not hear over it. If a subway comes, there exists a loud. {
    Tokens: [if, somebody, broadcast, sth, ,, another, might, not, hear, it, ., if, there, exists, a, loud, ,, another, one, might, not, hear, over, it, ., if, a, subway, comes, ,, there, exists, a, loud, .]
    Lemmatized tokens: [if, somebody, broadcast, sth, ,, another, might, not, hear, it, ., if, there, exist, a, loud, ,, another, one, might, not, hear, over, it, ., if, a, subway, come, ,, there, exist, a, loud, .]
    POS tags: [IN, NN, NN, NN, ,, DT, VBD-AUX, RB, VB, PRP, ., IN, EX, VBZ, DT, JJ, ,, DT, NN, VBD-AUX, RB, VB, IN, PRP, ., IN, DT, NN, VBZ, ,, EX, VBZ, DT, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, NUMBER, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1.0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [case->0, compound->1, compound->2], [], [], [], [], [nmod:if->3, punct->4, nsubj->5, aux->6, neg->7, dobj->9, punct->10], [], [], [], [], [dobj->15, mark->11, expl->12], [], [det->14], [], [], [det->17], [], [], [advcl->13, punct->16, nsubj->18, aux->19, neg->20, nmod:over->23, punct->24], [], [case->22], [], [], [], [det->26], [mark->25, nsubj->27], [], [], [expl->30, dobj->33, punct->34, advcl->28, punct->29], [], [det->32], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What couldn't I hear {
    Tokens: [what, could, n't, i, hear]
    Lemmatized tokens: [what, could, not, I, hear]
    POS tags: [WP, VBD-AUX, RB, PRP, VBP]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, neg->2, ccomp->4], [], [], [nsubj->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: They broadcast an announcement, but a subway came into the station and I couldn't hear over it. {
    Tokens: [they, broadcast, an, announcement, ,, but, a, subway, came, into, the, station, and, i, could, n't, hear, over, it, .]
    Lemmatized tokens: [they, broadcast, a, announcement, ,, but, a, subway, come, into, the, station, and, I, could, not, hear, over, it, .]
    POS tags: [PRP, VBP, DT, NN, ,, CC, DT, NN, VBD, IN, DT, NN, CC, PRP, VBD-AUX, RB, VB, IN, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, conj:but->16, dobj->3, punct->19, punct->4, cc->5, conj:but->8], [], [det->2], [], [], [], [det->6], [conj:and->16, nsubj->7, nmod:into->11, cc->12], [], [], [case->9, det->10], [], [], [], [], [neg->15, nmod:over->18, nsubj->13, aux->14], [], [case->17], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If somebody broadcast sth, another might not hear it. If there exists a loud, another one might not hear over it. If a subway comes, there exists a loud. {
    Tokens: [if, somebody, broadcast, sth, ,, another, might, not, hear, it, ., if, there, exists, a, loud, ,, another, one, might, not, hear, over, it, ., if, a, subway, comes, ,, there, exists, a, loud, .]
    Lemmatized tokens: [if, somebody, broadcast, sth, ,, another, might, not, hear, it, ., if, there, exist, a, loud, ,, another, one, might, not, hear, over, it, ., if, a, subway, come, ,, there, exist, a, loud, .]
    POS tags: [IN, NN, NN, NN, ,, DT, VBD-AUX, RB, VB, PRP, ., IN, EX, VBZ, DT, JJ, ,, DT, NN, VBD-AUX, RB, VB, IN, PRP, ., IN, DT, NN, VBZ, ,, EX, VBZ, DT, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, NUMBER, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1.0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [case->0, compound->1, compound->2], [], [], [], [], [nmod:if->3, punct->4, nsubj->5, aux->6, neg->7, dobj->9, punct->10], [], [], [], [], [dobj->15, mark->11, expl->12], [], [det->14], [], [], [det->17], [], [], [advcl->13, punct->16, nsubj->18, aux->19, neg->20, nmod:over->23, punct->24], [], [case->22], [], [], [], [det->26], [mark->25, nsubj->27], [], [], [expl->30, dobj->33, punct->34, advcl->28, punct->29], [], [det->32], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What couldn't I hear over {
    Tokens: [what, could, n't, i, hear, over]
    Lemmatized tokens: [what, could, not, I, hear, over]
    POS tags: [WP, VBD-AUX, RB, PRP, VBP, IN]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, neg->2, ccomp->4], [], [], [nsubj->3, nmod->5], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: In the middle of the outdoor concert, the rain started falling, and it continued until 10. {
    Tokens: [in, the, middle, of, the, outdoor, concert, ,, the, rain, started, falling, ,, and, it, continued, until, 10, .]
    Lemmatized tokens: [in, the, middle, of, the, outdoor, concert, ,, the, rain, start, fall, ,, and, it, continue, until, 10, .]
    POS tags: [IN, DT, NN, IN, DT, JJ, NN, ,, DT, NN, VBD, VBG, ,, CC, PRP, VBD, IN, CD, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, NUMBER, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 10.0, null]
    Dependency children: [[], [], [case->0, det->1, nmod:of->6], [], [], [], [case->3, det->4, amod->5], [], [], [det->8], [conj:and->15, nmod:in->2, punct->18, punct->7, nsubj->9, xcomp->11, punct->12, cc->13], [], [], [], [], [nmod:until->17, nsubj->14], [], [case->16], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: In the middle of the outdoor concert, the rain started falling, but it continued until 10. {
    Tokens: [in, the, middle, of, the, outdoor, concert, ,, the, rain, started, falling, ,, but, it, continued, until, 10, .]
    Lemmatized tokens: [in, the, middle, of, the, outdoor, concert, ,, the, rain, start, fall, ,, but, it, continue, until, 10, .]
    POS tags: [IN, DT, NN, IN, DT, JJ, NN, ,, DT, NN, VBD, VBG, ,, CC, PRP, VBD, IN, CD, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, NUMBER, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 10.0, null]
    Dependency children: [[], [], [case->0, det->1, nmod:of->6], [], [], [], [case->3, det->4, amod->5], [], [], [det->8], [conj:but->15, nmod:in->2, punct->18, punct->7, nsubj->9, xcomp->11, punct->12, cc->13], [], [], [], [], [nmod:until->17, nsubj->14], [], [case->16], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What continued until 10 {
    Tokens: [what, continued, until, 10]
    Lemmatized tokens: [what, continue, until, 10]
    POS tags: [WDT, VBD, IN, CD]
    NER tags: [O, O, O, NUMBER]
    NER values: [null, null, null, 10.0]
    Dependency children: [[], [nsubj->0, nmod:until->3], [], [case->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I used an old rag to clean the knife, and then I put it in the drawer. {
    Tokens: [i, used, an, old, rag, to, clean, the, knife, ,, and, then, i, put, it, in, the, drawer, .]
    Lemmatized tokens: [I, use, a, old, rag, to, clean, the, knife, ,, and, then, I, put, it, in, the, drawer, .]
    POS tags: [PRP, VBD, DT, JJ, NN, TO, VB, DT, NN, ,, CC, RB, PRP, VBP, PRP, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, punct->18, dobj->4, advcl->6, punct->9, cc->10, conj:and->13], [], [], [det->2, amod->3], [], [mark->5, dobj->8], [], [det->7], [], [], [], [], [nmod:in->17, advmod->11, nsubj->12, dobj->14], [], [], [], [case->15, det->16], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If somebody uses thing B to clean thing C,  thing B is dirty and thing C is cleaned. If thing B is cleaned, thing B will be pushed in the drawer. If thing B is dirty, thing B will be pushed in the trash. {
    Tokens: [if, somebody, uses, thing, b, to, clean, thing, c, ,, thing, b, is, dirty, and, thing, c, is, cleaned, ., if, thing, b, is, cleaned, ,, thing, b, will, be, pushed, in, the, drawer, ., if, thing, b, is, dirty, ,, thing, b, will, be, pushed, in, the, trash, .]
    Lemmatized tokens: [if, somebody, use, thing, b, to, clean, thing, c, ,, thing, b, be, dirty, and, thing, c, be, clean, ., if, thing, b, be, clean, ,, thing, b, will, be, push, in, the, drawer, ., if, thing, b, be, dirty, ,, thing, b, will, be, push, in, the, trash, .]
    POS tags: [IN, NN, VBZ, NN, NN, TO, JJ, NN, NN, ,, NN, NN, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, VBN, ., IN, NN, NN, VBD-AUX, VBN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, IN, DT, NN, ., IN, NN, NN, VBD-AUX, JJ, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [mark->0, nsubj->1, dobj->4, nmod:to->8], [], [compound->3], [], [], [], [case->5, amod->6, compound->7], [], [], [compound->10], [], [advcl->2, conj:and->18, punct->19, punct->9, nsubj->11, cop->12, cc->14], [], [], [compound->15], [], [nsubjpass->16, auxpass->17], [], [], [], [compound->21], [], [nsubjpass->22, auxpass->23, mark->20], [], [], [compound->26], [], [], [advcl->24, punct->25, nsubjpass->27, aux->28, auxpass->29, nmod:in->33, punct->34], [], [], [case->31, det->32], [], [], [], [compound->36], [], [mark->35, nsubj->37, cop->38], [], [], [compound->41], [], [], [punct->40, nsubjpass->42, aux->43, auxpass->44, nmod:in->48, punct->49, advcl->39], [], [], [case->46, det->47], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What did I put in the drawer {
    Tokens: [what, did, i, put, in, the, drawer]
    Lemmatized tokens: [what, do, I, put, in, the, drawer]
    POS tags: [WP, VBD-AUX, PRP, VBD, IN, DT, NN]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [dobj->0, aux->1, nsubj->2, nmod:in->6], [], [], [case->4, det->5]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I used an old rag to clean the knife, and then I put it in the trash. {
    Tokens: [i, used, an, old, rag, to, clean, the, knife, ,, and, then, i, put, it, in, the, trash, .]
    Lemmatized tokens: [I, use, a, old, rag, to, clean, the, knife, ,, and, then, I, put, it, in, the, trash, .]
    POS tags: [PRP, VBD, DT, JJ, NN, TO, VB, DT, NN, ,, CC, RB, PRP, VBP, PRP, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, punct->18, dobj->4, advcl->6, punct->9, cc->10, conj:and->13], [], [], [det->2, amod->3], [], [mark->5, dobj->8], [], [det->7], [], [], [], [], [nmod:in->17, advmod->11, nsubj->12, dobj->14], [], [], [], [case->15, det->16], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If somebody uses thing B to clean thing C,  thing B is dirty and thing C is cleaned. If thing B is cleaned, thing B will be pushed in the drawer. If thing B is dirty, thing B will be pushed in the trash. {
    Tokens: [if, somebody, uses, thing, b, to, clean, thing, c, ,, thing, b, is, dirty, and, thing, c, is, cleaned, ., if, thing, b, is, cleaned, ,, thing, b, will, be, pushed, in, the, drawer, ., if, thing, b, is, dirty, ,, thing, b, will, be, pushed, in, the, trash, .]
    Lemmatized tokens: [if, somebody, use, thing, b, to, clean, thing, c, ,, thing, b, be, dirty, and, thing, c, be, clean, ., if, thing, b, be, clean, ,, thing, b, will, be, push, in, the, drawer, ., if, thing, b, be, dirty, ,, thing, b, will, be, push, in, the, trash, .]
    POS tags: [IN, NN, VBZ, NN, NN, TO, JJ, NN, NN, ,, NN, NN, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, VBN, ., IN, NN, NN, VBD-AUX, VBN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, IN, DT, NN, ., IN, NN, NN, VBD-AUX, JJ, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [mark->0, nsubj->1, dobj->4, nmod:to->8], [], [compound->3], [], [], [], [case->5, amod->6, compound->7], [], [], [compound->10], [], [advcl->2, conj:and->18, punct->19, punct->9, nsubj->11, cop->12, cc->14], [], [], [compound->15], [], [nsubjpass->16, auxpass->17], [], [], [], [compound->21], [], [nsubjpass->22, auxpass->23, mark->20], [], [], [compound->26], [], [], [advcl->24, punct->25, nsubjpass->27, aux->28, auxpass->29, nmod:in->33, punct->34], [], [], [case->31, det->32], [], [], [], [compound->36], [], [mark->35, nsubj->37, cop->38], [], [], [compound->41], [], [], [punct->40, nsubjpass->42, aux->43, auxpass->44, nmod:in->48, punct->49, advcl->39], [], [], [case->46, det->47], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What did I put in the trash {
    Tokens: [what, did, i, put, in, the, trash]
    Lemmatized tokens: [what, do, I, put, in, the, trash]
    POS tags: [WP, VBD-AUX, PRP, VBD, IN, DT, NN]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [dobj->0, aux->1, nsubj->2, nmod:in->6], [], [], [case->4, det->5]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Ann asked Mary what time the library closes, but she had forgotten. {
    Tokens: [ann, asked, mary, what, time, the, library, closes, ,, but, she, had, forgotten, .]
    Lemmatized tokens: [Ann, ask, Mary, what, time, the, library, close, ,, but, she, have, forget, .]
    POS tags: [NNP, VBD, NNP, WDT, NN, DT, NN, VBZ, ,, CC, PRP, VBD-AUX, VBN, .]
    NER tags: [PERSON, O, PERSON, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2, punct->8, cc->9, conj:but->12, punct->13], [acl:relcl->7], [], [det->3], [], [det->5], [dobj->4, nsubj->6], [], [], [], [], [nsubj->10, aux->11], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B forgets sth, person B might ask sb sth. {
    Tokens: [if, person, b, forgets, sth, ,, person, b, might, ask, sb, sth, .]
    Lemmatized tokens: [if, person, b, forget, sth, ,, person, b, might, ask, sb, sth, .]
    POS tags: [IN, NN, NN, VBZ, NN, ,, NN, NN, VBD-AUX, VB, NN, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->4], [], [], [], [compound->6], [], [advcl->3, punct->5, nsubj->7, aux->8, dobj->11, punct->12], [], [compound->10], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who had forgotten {
    Tokens: [who, had, forgotten]
    Lemmatized tokens: [who, have, forget]
    POS tags: [WP, VBD-AUX, VBN]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Ann asked Mary what time the library closes, because she had forgotten. {
    Tokens: [ann, asked, mary, what, time, the, library, closes, ,, because, she, had, forgotten, .]
    Lemmatized tokens: [Ann, ask, Mary, what, time, the, library, close, ,, because, she, have, forget, .]
    POS tags: [NNP, VBD, NNP, WDT, NN, DT, NN, VBZ, ,, IN, PRP, VBD-AUX, VBN, .]
    NER tags: [PERSON, O, PERSON, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2, punct->13], [acl:relcl->7], [], [det->3], [], [det->5], [dobj->4, nsubj->6, punct->8, advcl->12], [], [], [], [], [mark->9, nsubj->10, aux->11], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B forgets sth, person B might ask sb sth. {
    Tokens: [if, person, b, forgets, sth, ,, person, b, might, ask, sb, sth, .]
    Lemmatized tokens: [if, person, b, forget, sth, ,, person, b, might, ask, sb, sth, .]
    POS tags: [IN, NN, NN, VBZ, NN, ,, NN, NN, VBD-AUX, VB, NN, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->4], [], [], [], [compound->6], [], [advcl->3, punct->5, nsubj->7, aux->8, dobj->11, punct->12], [], [compound->10], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who had forgotten {
    Tokens: [who, had, forgotten]
    Lemmatized tokens: [who, have, forget]
    POS tags: [WP, VBD-AUX, VBN]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I took the water bottle out of the backpack so that it would be lighter. {
    Tokens: [i, took, the, water, bottle, out, of, the, backpack, so, that, it, would, be, lighter, .]
    Lemmatized tokens: [I, take, the, water, bottle, out, of, the, backpack, so, that, it, would, be, lighter, .]
    POS tags: [PRP, VBD, DT, NN, NN, IN, IN, DT, NN, IN, IN, PRP, VBD-AUX, VBD-AUX, JJR, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [punct->15, nsubj->0, dobj->4, nmod:out_of->8, advcl->14], [], [], [det->2, compound->3], [mwe->6], [], [], [case->5, det->7], [mwe->10], [], [], [], [], [mark->9, nsubj->11, aux->12, cop->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If somebody takes thing B out of thing C, thing C will be lighter and thing B will be handy. {
    Tokens: [if, somebody, takes, thing, b, out, of, thing, c, ,, thing, c, will, be, lighter, and, thing, b, will, be, handy, .]
    Lemmatized tokens: [if, somebody, take, thing, b, out, of, thing, c, ,, thing, c, will, be, lighter, and, thing, b, will, be, handy, .]
    POS tags: [IN, NN, VBZ, NN, NN, IN, IN, NN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, JJR, CC, NN, NN, VBD-AUX, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [mark->0, nsubj->1, dobj->4, nmod:out_of->8], [], [compound->3], [mwe->6], [], [], [case->5, compound->7], [], [], [compound->10], [], [], [cc->15, advcl->2, conj:and->20, punct->21, punct->9, nsubj->11, aux->12, cop->13], [], [], [compound->16], [], [], [nsubj->17, aux->18, cop->19], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What would be lighter {
    Tokens: [what, would, be, lighter]
    Lemmatized tokens: [what, would, be, lighter]
    POS tags: [WP, VBD-AUX, VBD-AUX, JJR]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, aux->1, cop->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I took the water bottle out of the backpack so that it would be handy. {
    Tokens: [i, took, the, water, bottle, out, of, the, backpack, so, that, it, would, be, handy, .]
    Lemmatized tokens: [I, take, the, water, bottle, out, of, the, backpack, so, that, it, would, be, handy, .]
    POS tags: [PRP, VBD, DT, NN, NN, IN, IN, DT, NN, IN, IN, PRP, VBD-AUX, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [punct->15, nsubj->0, dobj->4, nmod:out_of->8, advcl->14], [], [], [det->2, compound->3], [mwe->6], [], [], [case->5, det->7], [mwe->10], [], [], [], [], [mark->9, nsubj->11, aux->12, cop->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If somebody takes thing B out of thing C, thing C will be lighter and thing B will be handy. {
    Tokens: [if, somebody, takes, thing, b, out, of, thing, c, ,, thing, c, will, be, lighter, and, thing, b, will, be, handy, .]
    Lemmatized tokens: [if, somebody, take, thing, b, out, of, thing, c, ,, thing, c, will, be, lighter, and, thing, b, will, be, handy, .]
    POS tags: [IN, NN, VBZ, NN, NN, IN, IN, NN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, JJR, CC, NN, NN, VBD-AUX, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [mark->0, nsubj->1, dobj->4, nmod:out_of->8], [], [compound->3], [mwe->6], [], [], [case->5, compound->7], [], [], [compound->10], [], [], [cc->15, advcl->2, conj:and->20, punct->21, punct->9, nsubj->11, aux->12, cop->13], [], [], [compound->16], [], [], [nsubj->17, aux->18, cop->19], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What would be handy {
    Tokens: [what, would, be, handy]
    Lemmatized tokens: [what, would, be, handy]
    POS tags: [WP, VBD-AUX, VBD-AUX, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, aux->1, cop->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I couldn't put the pot on the shelf because it was too high. {
    Tokens: [i, could, n't, put, the, pot, on, the, shelf, because, it, was, too, high, .]
    Lemmatized tokens: [I, could, not, put, the, pot, on, the, shelf, because, it, be, too, high, .]
    POS tags: [PRP, VBD-AUX, RB, VB, DT, NN, IN, DT, NN, IN, PRP, VBD-AUX, RB, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, aux->1, neg->2, dobj->5, nmod:on->8, advcl->13, punct->14], [], [det->4], [], [], [case->6, det->7], [], [], [], [], [mark->9, nsubj->10, cop->11, advmod->12], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If  thing B is tall or thing C is high, somebody can’t put thing B on the thing C. {
    Tokens: [if, thing, b, is, tall, or, thing, c, is, high, ,, somebody, ca, n't, put, thing, b, on, the, thing, c.]
    Lemmatized tokens: [if, thing, b, be, tall, or, thing, c, be, high, ,, somebody, can, not, put, thing, b, on, the, thing, c.]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, JJ, ,, NN, MD, RB, VB, NN, NN, IN, DT, NN, FW]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3, cc->5, conj:or->9], [], [], [compound->6], [], [nsubj->7, cop->8], [], [], [], [], [dobj->16, nmod:on->19, advcl->4, advcl->9, punct->10, nsubj->11, aux->12, neg->13], [], [compound->15], [], [], [case->17, det->18, dep->20], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What was too high {
    Tokens: [what, was, too, high]
    Lemmatized tokens: [what, be, too, high]
    POS tags: [WP, VBD-AUX, RB, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, advmod->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I couldn't put the pot on the shelf because it was too tall. {
    Tokens: [i, could, n't, put, the, pot, on, the, shelf, because, it, was, too, tall, .]
    Lemmatized tokens: [I, could, not, put, the, pot, on, the, shelf, because, it, be, too, tall, .]
    POS tags: [PRP, VBD-AUX, RB, VB, DT, NN, IN, DT, NN, IN, PRP, VBD-AUX, RB, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, aux->1, neg->2, dobj->5, nmod:on->8, advcl->13, punct->14], [], [det->4], [], [], [case->6, det->7], [], [], [], [], [mark->9, nsubj->10, cop->11, advmod->12], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If  thing B is tall or thing C is high, somebody can’t put thing B on the thing C. {
    Tokens: [if, thing, b, is, tall, or, thing, c, is, high, ,, somebody, ca, n't, put, thing, b, on, the, thing, c.]
    Lemmatized tokens: [if, thing, b, be, tall, or, thing, c, be, high, ,, somebody, can, not, put, thing, b, on, the, thing, c.]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, JJ, ,, NN, MD, RB, VB, NN, NN, IN, DT, NN, FW]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3, cc->5, conj:or->9], [], [], [compound->6], [], [nsubj->7, cop->8], [], [], [], [], [dobj->16, nmod:on->19, advcl->4, advcl->9, punct->10, nsubj->11, aux->12, neg->13], [], [compound->15], [], [], [case->17, det->18, dep->20], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What was too tall {
    Tokens: [what, was, too, tall]
    Lemmatized tokens: [what, be, too, tall]
    POS tags: [WP, VBD-AUX, RB, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, advmod->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I'm sure that my map will show this building; it is very famous. {
    Tokens: [i, 'm, sure, that, my, map, will, show, this, building, ;, it, is, very, famous, .]
    Lemmatized tokens: [I, be, sure, that, my, map, will, show, this, building, ;, it, be, very, famous, .]
    POS tags: [PRP, VBP, JJ, IN, PRP$, NN, VBD-AUX, VB, DT, NN, :, PRP, VBD-AUX, RB, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [punct->15, nsubj->0, cop->1, ccomp->7, punct->10, parataxis->14], [], [], [nmod:poss->4], [], [mark->3, nsubj->5, aux->6, dobj->9], [], [det->8], [], [], [], [], [nsubj->11, cop->12, advmod->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If a map shows thing B, a map might be good and thing B might be famous. {
    Tokens: [if, a, map, shows, thing, b, ,, a, map, might, be, good, and, thing, b, might, be, famous, .]
    Lemmatized tokens: [if, a, map, show, thing, b, ,, a, map, might, be, good, and, thing, b, might, be, famous, .]
    POS tags: [IN, DT, NN, VBZ, NN, NN, ,, DT, NN, VBD-AUX, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [det->1], [mark->0, nsubj->2, dobj->5], [], [compound->4], [], [], [det->7], [], [], [conj:and->17, punct->18, advcl->3, punct->6, nsubj->8, aux->9, cop->10, cc->12], [], [], [compound->13], [], [], [aux->15, cop->16, nsubj->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What is famous {
    Tokens: [what, is, famous]
    Lemmatized tokens: [what, be, famous]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I'm sure that my map will show this building; it is very good. {
    Tokens: [i, 'm, sure, that, my, map, will, show, this, building, ;, it, is, very, good, .]
    Lemmatized tokens: [I, be, sure, that, my, map, will, show, this, building, ;, it, be, very, good, .]
    POS tags: [PRP, VBP, JJ, IN, PRP$, NN, VBD-AUX, VB, DT, NN, :, PRP, VBD-AUX, RB, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [punct->15, nsubj->0, cop->1, ccomp->7, punct->10, parataxis->14], [], [], [nmod:poss->4], [], [mark->3, nsubj->5, aux->6, dobj->9], [], [det->8], [], [], [], [], [nsubj->11, cop->12, advmod->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If a map shows thing B, a map might be good and thing B might be famous. {
    Tokens: [if, a, map, shows, thing, b, ,, a, map, might, be, good, and, thing, b, might, be, famous, .]
    Lemmatized tokens: [if, a, map, show, thing, b, ,, a, map, might, be, good, and, thing, b, might, be, famous, .]
    POS tags: [IN, DT, NN, VBZ, NN, NN, ,, DT, NN, VBD-AUX, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [det->1], [mark->0, nsubj->2, dobj->5], [], [compound->4], [], [], [det->7], [], [], [conj:and->17, punct->18, advcl->3, punct->6, nsubj->8, aux->9, cop->10, cc->12], [], [], [compound->13], [], [], [aux->15, cop->16, nsubj->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What is good {
    Tokens: [what, is, good]
    Lemmatized tokens: [what, be, good]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Bob paid for Charlie's college education {
    Tokens: [bob, paid, for, charlie, 's, college, education]
    Lemmatized tokens: [Bob, pay, for, Charlie, 's, college, education]
    POS tags: [NNP, VBD, IN, NNP, POS, NN, NN]
    NER tags: [PERSON, O, O, PERSON, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:for->6], [], [case->4], [], [], [case->2, nmod:poss->3, compound->5]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: He is very generous. {
    Tokens: [he, is, very, generous, .]
    Lemmatized tokens: [he, be, very, generous, .]
    POS tags: [PRP, VBD-AUX, RB, JJ, .]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, advmod->2, punct->4], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B pays for thing D and thing D belongs to person C, person B is generous and person C is grateful. {
    Tokens: [if, person, b, pays, for, thing, d, and, thing, d, belongs, to, person, c, ,, person, b, is, generous, and, person, c, is, grateful, .]
    Lemmatized tokens: [if, person, b, pay, for, thing, d, and, thing, d, belong, to, person, c, ,, person, b, be, generous, and, person, c, be, grateful, .]
    POS tags: [IN, NN, NN, VBZ, IN, NN, NN, CC, NN, NN, VBZ, TO, NN, NN, ,, NN, NN, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, advcl->10], [], [], [compound->5, cc->7, conj:and->9], [], [], [compound->8], [mark->4, nsubj->6, nsubj->9, nmod:to->13], [], [], [case->11, compound->12], [], [], [compound->15], [], [nsubj->16, cop->17, advcl->3, cc->19, conj:and->23, punct->24, punct->14], [], [], [compound->20], [], [nsubj->21, cop->22], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who is generous {
    Tokens: [who, is, generous]
    Lemmatized tokens: [who, be, generous]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Bob paid for Charlie's college education {
    Tokens: [bob, paid, for, charlie, 's, college, education]
    Lemmatized tokens: [Bob, pay, for, Charlie, 's, college, education]
    POS tags: [NNP, VBD, IN, NNP, POS, NN, NN]
    NER tags: [PERSON, O, O, PERSON, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:for->6], [], [case->4], [], [], [case->2, nmod:poss->3, compound->5]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: He is very grateful. {
    Tokens: [he, is, very, grateful, .]
    Lemmatized tokens: [he, be, very, grateful, .]
    POS tags: [PRP, VBD-AUX, RB, JJ, .]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, advmod->2, punct->4], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B pays for thing D and thing D belongs to person C, person B is generous and person C is grateful. {
    Tokens: [if, person, b, pays, for, thing, d, and, thing, d, belongs, to, person, c, ,, person, b, is, generous, and, person, c, is, grateful, .]
    Lemmatized tokens: [if, person, b, pay, for, thing, d, and, thing, d, belong, to, person, c, ,, person, b, be, generous, and, person, c, be, grateful, .]
    POS tags: [IN, NN, NN, VBZ, IN, NN, NN, CC, NN, NN, VBZ, TO, NN, NN, ,, NN, NN, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, advcl->10], [], [], [compound->5, cc->7, conj:and->9], [], [], [compound->8], [mark->4, nsubj->6, nsubj->9, nmod:to->13], [], [], [case->11, compound->12], [], [], [compound->15], [], [nsubj->16, cop->17, advcl->3, cc->19, conj:and->23, punct->24, punct->14], [], [], [compound->20], [], [nsubj->21, cop->22], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who is grateful {
    Tokens: [who, is, grateful]
    Lemmatized tokens: [who, be, grateful]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Bob paid for Charlie's college education, but now Charlie acts as though it never happened {
    Tokens: [bob, paid, for, charlie, 's, college, education, ,, but, now, charlie, acts, as, though, it, never, happened]
    Lemmatized tokens: [Bob, pay, for, Charlie, 's, college, education, ,, but, now, Charlie, act, as, though, it, never, happen]
    POS tags: [NNP, VBD, IN, NNP, POS, NN, NN, ,, CC, RB, NNP, VBZ, IN, IN, PRP, RB, VBD]
    NER tags: [PERSON, O, O, PERSON, O, O, O, O, O, DATE, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, PRESENT_REF, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:for->6, punct->7, cc->8, conj:but->11], [], [case->4], [], [], [case->2, nmod:poss->3, compound->5], [], [], [], [], [advcl->16, advmod->9, nsubj->10], [], [], [], [], [neg->15, mark->12, mark->13, nsubj->14]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: He is very hurt. {
    Tokens: [he, is, very, hurt, .]
    Lemmatized tokens: [he, be, very, hurt, .]
    POS tags: [PRP, VBD-AUX, RB, VBN, .]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, advmod->2, punct->4], [dep->3], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B helps person C and person C acts as though it never happened, person B might be hurt and person C might be ungrateful. {
    Tokens: [if, person, b, helps, person, c, and, person, c, acts, as, though, it, never, happened, ,, person, b, might, be, hurt, and, person, c, might, be, ungrateful, .]
    Lemmatized tokens: [if, person, b, help, person, c, and, person, c, act, as, though, it, never, happen, ,, person, b, might, be, hurt, and, person, c, might, be, ungrateful, .]
    POS tags: [IN, NN, NN, VBZ, NN, NN, CC, NN, NN, VBZ, IN, IN, PRP, RB, VBD, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, CC, NN, NN, VBD-AUX, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5, dobj->8], [], [compound->4, cc->6, conj:and->8], [], [], [compound->7], [csubj->3, advcl->20, advcl->26, punct->27], [], [], [], [], [mark->11, nsubj->12, neg->13], [], [], [compound->16], [], [], [punct->15, nsubjpass->17, aux->18, auxpass->19, cc->21, mark->10, conj:and->26, advcl->14], [], [], [compound->22], [], [], [nsubj->23, aux->24, cop->25], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who is hurt {
    Tokens: [who, is, hurt]
    Lemmatized tokens: [who, be, hurt]
    POS tags: [WP, VBD-AUX, VBN]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubjpass->0, auxpass->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Bob paid for Charlie's college education, but now Charlie acts as though it never happened {
    Tokens: [bob, paid, for, charlie, 's, college, education, ,, but, now, charlie, acts, as, though, it, never, happened]
    Lemmatized tokens: [Bob, pay, for, Charlie, 's, college, education, ,, but, now, Charlie, act, as, though, it, never, happen]
    POS tags: [NNP, VBD, IN, NNP, POS, NN, NN, ,, CC, RB, NNP, VBZ, IN, IN, PRP, RB, VBD]
    NER tags: [PERSON, O, O, PERSON, O, O, O, O, O, DATE, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, PRESENT_REF, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:for->6, punct->7, cc->8, conj:but->11], [], [case->4], [], [], [case->2, nmod:poss->3, compound->5], [], [], [], [], [advcl->16, advmod->9, nsubj->10], [], [], [], [], [neg->15, mark->12, mark->13, nsubj->14]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: He is very ungrateful. {
    Tokens: [he, is, very, ungrateful, .]
    Lemmatized tokens: [he, be, very, ungrateful, .]
    POS tags: [PRP, VBD-AUX, RB, JJ, .]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, advmod->2, punct->4], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B helps person C and person C acts as though it never happened, person B might be hurt and person C might be ungrateful. {
    Tokens: [if, person, b, helps, person, c, and, person, c, acts, as, though, it, never, happened, ,, person, b, might, be, hurt, and, person, c, might, be, ungrateful, .]
    Lemmatized tokens: [if, person, b, help, person, c, and, person, c, act, as, though, it, never, happen, ,, person, b, might, be, hurt, and, person, c, might, be, ungrateful, .]
    POS tags: [IN, NN, NN, VBZ, NN, NN, CC, NN, NN, VBZ, IN, IN, PRP, RB, VBD, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, CC, NN, NN, VBD-AUX, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5, dobj->8], [], [compound->4, cc->6, conj:and->8], [], [], [compound->7], [csubj->3, advcl->20, advcl->26, punct->27], [], [], [], [], [mark->11, nsubj->12, neg->13], [], [], [compound->16], [], [], [punct->15, nsubjpass->17, aux->18, auxpass->19, cc->21, mark->10, conj:and->26, advcl->14], [], [], [compound->22], [], [], [nsubj->23, aux->24, cop->25], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who is ungrateful {
    Tokens: [who, is, ungrateful]
    Lemmatized tokens: [who, be, ungrateful]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Bob was playing cards with Adam and was way ahead {
    Tokens: [bob, was, playing, cards, with, adam, and, was, way, ahead]
    Lemmatized tokens: [Bob, be, play, card, with, Adam, and, be, way, ahead]
    POS tags: [NNP, VBD-AUX, VBG, NNS, IN, NNP, CC, VBD-AUX, NN, RB]
    NER tags: [PERSON, O, O, O, O, PERSON, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, dobj->3, nmod:with->5, cc->6, conj:and->7, dobj->8, advmod->9], [], [], [case->4], [], [nsubj->0], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If Adam hadn't had a sudden run of good luck, he would have won. {
    Tokens: [if, adam, had, n't, had, a, sudden, run, of, good, luck, ,, he, would, have, won, .]
    Lemmatized tokens: [if, Adam, have, not, have, a, sudden, run, of, good, luck, ,, he, would, have, win, .]
    POS tags: [IN, NNP, VBD-AUX, RB, VBD-AUX, DT, JJ, NN, IN, JJ, NN, ,, PRP, VBD-AUX, VBD-AUX, VBN, .]
    NER tags: [O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [mark->0, nsubj->1, neg->3], [], [csubj->2, dobj->7], [], [], [det->5, amod->6, nmod:of->10], [], [], [case->8, amod->9], [], [], [], [], [punct->16, ccomp->4, punct->11, nsubj->12, aux->13, aux->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is way head  and person C doesn’t have a sudden run of good luck, person B wins and person C loses. {
    Tokens: [if, person, b, is, way, head, and, person, c, does, n't, have, a, sudden, run, of, good, luck, ,, person, b, wins, and, person, c, loses, .]
    Lemmatized tokens: [if, person, b, be, way, head, and, person, c, do, not, have, a, sudden, run, of, good, luck, ,, person, b, win, and, person, c, lose, .]
    POS tags: [IN, NN, NN, VBD-AUX, NN, NN, CC, NN, NN, VBD-AUX, RB, VBD-AUX, DT, JJ, NN, IN, JJ, NN, ,, NN, NN, NNS, CC, NN, NN, VBZ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubj->2, cop->3, compound->4, cc->6, conj:and->8, acl:relcl->11], [], [], [compound->7], [], [], [aux->9, neg->10, dobj->14], [], [], [nmod:of->17, det->12, amod->13], [], [], [case->15, amod->16], [], [], [], [compound->19, compound->20, cc->22, conj:and->24], [], [], [compound->23], [punct->18, advcl->5, nsubj->21, advcl->8, nsubj->24, punct->26], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who would have won {
    Tokens: [who, would, have, won]
    Lemmatized tokens: [who, would, have, win]
    POS tags: [WP, VBD-AUX, VBD-AUX, VBN]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, aux->1, aux->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Bob was playing cards with Adam and was way ahead {
    Tokens: [bob, was, playing, cards, with, adam, and, was, way, ahead]
    Lemmatized tokens: [Bob, be, play, card, with, Adam, and, be, way, ahead]
    POS tags: [NNP, VBD-AUX, VBG, NNS, IN, NNP, CC, VBD-AUX, NN, RB]
    NER tags: [PERSON, O, O, O, O, PERSON, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, dobj->3, nmod:with->5, cc->6, conj:and->7, dobj->8, advmod->9], [], [], [case->4], [], [nsubj->0], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If Adam hadn't had a sudden run of good luck, he would have lost. {
    Tokens: [if, adam, had, n't, had, a, sudden, run, of, good, luck, ,, he, would, have, lost, .]
    Lemmatized tokens: [if, Adam, have, not, have, a, sudden, run, of, good, luck, ,, he, would, have, lose, .]
    POS tags: [IN, NNP, VBD-AUX, RB, VBD-AUX, DT, JJ, NN, IN, JJ, NN, ,, PRP, VBD-AUX, VBD-AUX, VBN, .]
    NER tags: [O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [mark->0, nsubj->1, neg->3], [], [csubj->2, dobj->7], [], [], [det->5, amod->6, nmod:of->10], [], [], [case->8, amod->9], [], [], [], [], [punct->16, ccomp->4, punct->11, nsubj->12, aux->13, aux->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is way head  and person C doesn’t have a sudden run of good luck, person B wins and person C loses. {
    Tokens: [if, person, b, is, way, head, and, person, c, does, n't, have, a, sudden, run, of, good, luck, ,, person, b, wins, and, person, c, loses, .]
    Lemmatized tokens: [if, person, b, be, way, head, and, person, c, do, not, have, a, sudden, run, of, good, luck, ,, person, b, win, and, person, c, lose, .]
    POS tags: [IN, NN, NN, VBD-AUX, NN, NN, CC, NN, NN, VBD-AUX, RB, VBD-AUX, DT, JJ, NN, IN, JJ, NN, ,, NN, NN, NNS, CC, NN, NN, VBZ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubj->2, cop->3, compound->4, cc->6, conj:and->8, acl:relcl->11], [], [], [compound->7], [], [], [aux->9, neg->10, dobj->14], [], [], [nmod:of->17, det->12, amod->13], [], [], [case->15, amod->16], [], [], [], [compound->19, compound->20, cc->22, conj:and->24], [], [], [compound->23], [punct->18, advcl->5, nsubj->21, advcl->8, nsubj->24, punct->26], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who would have lost {
    Tokens: [who, would, have, lost]
    Lemmatized tokens: [who, would, have, lose]
    POS tags: [WP, VBD-AUX, VBD-AUX, VBN]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, aux->1, aux->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Adam can't leave work here until Bob arrives to replace him {
    Tokens: [adam, ca, n't, leave, work, here, until, bob, arrives, to, replace, him]
    Lemmatized tokens: [Adam, can, not, leave, work, here, until, Bob, arrive, to, replace, he]
    POS tags: [NNP, MD, RB, VB, NN, RB, IN, NNP, VBZ, TO, VB, PRP]
    NER tags: [PERSON, O, O, O, O, O, O, PERSON, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, aux->1, neg->2, dobj->4, advmod->5, advcl->8], [], [], [], [], [mark->6, nsubj->7, xcomp->10], [], [mark->9, dobj->11], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If Bob had left home for work on time, he would be here by this time. {
    Tokens: [if, bob, had, left, home, for, work, on, time, ,, he, would, be, here, by, this, time, .]
    Lemmatized tokens: [if, Bob, have, leave, home, for, work, on, time, ,, he, would, be, here, by, this, time, .]
    POS tags: [IN, NNP, VBD-AUX, VBN, NN, IN, NN, IN, NN, ,, PRP, VBD-AUX, VBD-AUX, RB, IN, DT, NN, .]
    NER tags: [O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [mark->0, nsubj->1, aux->2, advmod->4, nmod:for->6], [], [], [case->5, nmod:on->8], [], [case->7], [], [], [], [], [], [], [], [det->15, punct->17, advcl->3, punct->9, nsubj->10, aux->11, cop->12, advmod->13, case->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B leaves some place for sth on time, person B would be here by this time. If person B leaves some place for sth on time and person B replaces person C, person C would be gone by this time. {
    Tokens: [if, person, b, leaves, some, place, for, sth, on, time, ,, person, b, would, be, here, by, this, time, ., if, person, b, leaves, some, place, for, sth, on, time, and, person, b, replaces, person, c, ,, person, c, would, be, gone, by, this, time, .]
    Lemmatized tokens: [if, person, b, leave, some, place, for, sth, on, time, ,, person, b, would, be, here, by, this, time, ., if, person, b, leave, some, place, for, sth, on, time, and, person, b, replace, person, c, ,, person, c, would, be, go, by, this, time, .]
    POS tags: [IN, NN, NN, VBZ, DT, NN, IN, NN, IN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, RB, IN, DT, NN, ., IN, NN, NN, VBZ, DT, NN, IN, NN, IN, NN, CC, NN, NN, VBZ, NN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5, nmod:on->9], [], [det->4, nmod:for->7], [], [case->6], [], [case->8], [], [], [compound->11], [], [], [], [], [], [advmod->15, case->16, det->17, advcl->3, punct->19, punct->10, nsubj->12, aux->13, cop->14], [], [], [], [compound->21], [nsubj->22, ccomp->33, mark->20], [], [det->24, nmod:for->27], [], [case->26, nmod:on->32], [], [cc->30, conj:and->31], [], [], [case->28, compound->29, compound->31], [nsubj->25, dobj->35], [], [compound->34], [], [], [compound->37], [], [], [nsubjpass->38, advcl->23, aux->39, auxpass->40, nmod:agent->44, punct->45, punct->36], [], [], [case->42, det->43], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who would be here {
    Tokens: [who, would, be, here]
    Lemmatized tokens: [who, would, be, here]
    POS tags: [WP, VBD-AUX, VBD-AUX, RB]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, advmod->3], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Adam can't leave work here until Bob arrives to replace him {
    Tokens: [adam, ca, n't, leave, work, here, until, bob, arrives, to, replace, him]
    Lemmatized tokens: [Adam, can, not, leave, work, here, until, Bob, arrive, to, replace, he]
    POS tags: [NNP, MD, RB, VB, NN, RB, IN, NNP, VBZ, TO, VB, PRP]
    NER tags: [PERSON, O, O, O, O, O, O, PERSON, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, aux->1, neg->2, dobj->4, advmod->5, advcl->8], [], [], [], [], [mark->6, nsubj->7, xcomp->10], [], [mark->9, dobj->11], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If Bob had left home for work on time, he would be gone by this time. {
    Tokens: [if, bob, had, left, home, for, work, on, time, ,, he, would, be, gone, by, this, time, .]
    Lemmatized tokens: [if, Bob, have, leave, home, for, work, on, time, ,, he, would, be, go, by, this, time, .]
    POS tags: [IN, NNP, VBD-AUX, VBN, NN, IN, NN, IN, NN, ,, PRP, VBD-AUX, VBD-AUX, VBN, IN, DT, NN, .]
    NER tags: [O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [mark->0, nsubj->1, aux->2, advmod->4, nmod:for->6], [], [], [case->5, nmod:on->8], [], [case->7], [], [], [], [], [nmod:agent->16, punct->17, advcl->3, punct->9, nsubjpass->10, aux->11, auxpass->12], [], [], [det->15, case->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B leaves some place for sth on time, person B would be here by this time. If person B leaves some place for sth on time and person B replaces person C, person C would be gone by this time. {
    Tokens: [if, person, b, leaves, some, place, for, sth, on, time, ,, person, b, would, be, here, by, this, time, ., if, person, b, leaves, some, place, for, sth, on, time, and, person, b, replaces, person, c, ,, person, c, would, be, gone, by, this, time, .]
    Lemmatized tokens: [if, person, b, leave, some, place, for, sth, on, time, ,, person, b, would, be, here, by, this, time, ., if, person, b, leave, some, place, for, sth, on, time, and, person, b, replace, person, c, ,, person, c, would, be, go, by, this, time, .]
    POS tags: [IN, NN, NN, VBZ, DT, NN, IN, NN, IN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, RB, IN, DT, NN, ., IN, NN, NN, VBZ, DT, NN, IN, NN, IN, NN, CC, NN, NN, VBZ, NN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5, nmod:on->9], [], [det->4, nmod:for->7], [], [case->6], [], [case->8], [], [], [compound->11], [], [], [], [], [], [advmod->15, case->16, det->17, advcl->3, punct->19, punct->10, nsubj->12, aux->13, cop->14], [], [], [], [compound->21], [nsubj->22, ccomp->33, mark->20], [], [det->24, nmod:for->27], [], [case->26, nmod:on->32], [], [cc->30, conj:and->31], [], [], [case->28, compound->29, compound->31], [nsubj->25, dobj->35], [], [compound->34], [], [], [compound->37], [], [], [nsubjpass->38, advcl->23, aux->39, auxpass->40, nmod:agent->44, punct->45, punct->36], [], [], [case->42, det->43], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who would be gone {
    Tokens: [who, would, be, gone]
    Lemmatized tokens: [who, would, be, go]
    POS tags: [WP, VBD-AUX, VBD-AUX, VBN]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubjpass->0, aux->1, auxpass->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If the con artist has succeeded in fooling Sam, he would have gotten a lot of money. {
    Tokens: [if, the, con, artist, has, succeeded, in, fooling, sam, ,, he, would, have, gotten, a, lot, of, money, .]
    Lemmatized tokens: [if, the, con, artist, have, succeed, in, fooling, Sam, ,, he, would, have, get, a, lot, of, money, .]
    POS tags: [IN, DT, NN, NN, VBD-AUX, VBN, IN, NN, NNP, ,, PRP, VBD-AUX, VBD-AUX, VBN, DT, NN, IN, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [det->1, compound->2], [], [mark->0, nsubj->3, aux->4, nmod:in->8], [], [], [case->6, compound->7], [], [], [], [], [dobj->15, punct->18, advcl->5, punct->9, nsubj->10, aux->11, aux->12], [], [nmod:of->17, det->14], [], [case->16], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B succeed in fooling person C, person B will get benefit and person C will lose benefit. If person B get money, person B will get benefit. If person C will lose money, person C will lose benefit. {
    Tokens: [if, person, b, succeed, in, fooling, person, c, ,, person, b, will, get, benefit, and, person, c, will, lose, benefit, ., if, person, b, get, money, ,, person, b, will, get, benefit, ., if, person, c, will, lose, money, ,, person, c, will, lose, benefit, .]
    Lemmatized tokens: [if, person, b, succeed, in, fool, person, c, ,, person, b, will, get, benefit, and, person, c, will, lose, benefit, ., if, person, b, get, money, ,, person, b, will, get, benefit, ., if, person, c, will, lose, money, ,, person, c, will, lose, benefit, .]
    POS tags: [IN, NN, NN, VB, IN, VBG, NN, NN, ,, NN, NN, VBD-AUX, VB, NN, CC, NN, NN, VBD-AUX, VB, NN, ., IN, NN, NN, VBP, NN, ,, NN, NN, VBD-AUX, VB, NN, ., IN, NN, NN, VBD-AUX, VB, NN, ,, NN, NN, VBD-AUX, VB, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, advcl->5], [], [mark->4, dobj->7], [], [compound->6], [], [], [compound->9], [], [dobj->16, advcl->3, punct->20, punct->8, nsubj->10, aux->11], [conj:and->15, cc->14], [], [], [compound->15, acl:relcl->18, compound->13], [], [aux->17, dobj->19], [], [], [], [], [compound->22], [nsubj->23, dobj->25, mark->21], [], [], [], [compound->27], [], [advcl->24, punct->26, nsubj->28, aux->29, dobj->31, punct->32], [], [], [], [], [compound->34], [], [dobj->38, mark->33, nsubj->35, aux->36], [], [], [], [compound->40], [], [punct->39, nsubj->41, aux->42, dobj->44, punct->45, advcl->37], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who would have gotten the money {
    Tokens: [who, would, have, gotten, the, money]
    Lemmatized tokens: [who, would, have, get, the, money]
    POS tags: [WP, VBD-AUX, VBD-AUX, VBN, DT, NN]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, aux->1, aux->2, dobj->5], [], [det->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If the con artist has succeeded in fooling Sam, he would have lost a lot of money. {
    Tokens: [if, the, con, artist, has, succeeded, in, fooling, sam, ,, he, would, have, lost, a, lot, of, money, .]
    Lemmatized tokens: [if, the, con, artist, have, succeed, in, fooling, Sam, ,, he, would, have, lose, a, lot, of, money, .]
    POS tags: [IN, DT, NN, NN, VBD-AUX, VBN, IN, NN, NNP, ,, PRP, VBD-AUX, VBD-AUX, VBN, DT, NN, IN, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [det->1, compound->2], [], [mark->0, nsubj->3, aux->4, nmod:in->8], [], [], [case->6, compound->7], [], [], [], [], [dobj->15, punct->18, advcl->5, punct->9, nsubj->10, aux->11, aux->12], [], [nmod:of->17, det->14], [], [case->16], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B succeed in fooling person C, person B will get benefit and person C will lose benefit. If person B get money, person B will get benefit. If person C will lose money, person C will lose benefit. {
    Tokens: [if, person, b, succeed, in, fooling, person, c, ,, person, b, will, get, benefit, and, person, c, will, lose, benefit, ., if, person, b, get, money, ,, person, b, will, get, benefit, ., if, person, c, will, lose, money, ,, person, c, will, lose, benefit, .]
    Lemmatized tokens: [if, person, b, succeed, in, fool, person, c, ,, person, b, will, get, benefit, and, person, c, will, lose, benefit, ., if, person, b, get, money, ,, person, b, will, get, benefit, ., if, person, c, will, lose, money, ,, person, c, will, lose, benefit, .]
    POS tags: [IN, NN, NN, VB, IN, VBG, NN, NN, ,, NN, NN, VBD-AUX, VB, NN, CC, NN, NN, VBD-AUX, VB, NN, ., IN, NN, NN, VBP, NN, ,, NN, NN, VBD-AUX, VB, NN, ., IN, NN, NN, VBD-AUX, VB, NN, ,, NN, NN, VBD-AUX, VB, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, advcl->5], [], [mark->4, dobj->7], [], [compound->6], [], [], [compound->9], [], [dobj->16, advcl->3, punct->20, punct->8, nsubj->10, aux->11], [conj:and->15, cc->14], [], [], [compound->15, acl:relcl->18, compound->13], [], [aux->17, dobj->19], [], [], [], [], [compound->22], [nsubj->23, dobj->25, mark->21], [], [], [], [compound->27], [], [advcl->24, punct->26, nsubj->28, aux->29, dobj->31, punct->32], [], [], [], [], [compound->34], [], [dobj->38, mark->33, nsubj->35, aux->36], [], [], [], [compound->40], [], [punct->39, nsubj->41, aux->42, dobj->44, punct->45, advcl->37], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who would have lost the money {
    Tokens: [who, would, have, lost, the, money]
    Lemmatized tokens: [who, would, have, lose, the, money]
    POS tags: [WP, VBD-AUX, VBD-AUX, VBN, DT, NN]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, aux->1, aux->2, dobj->5], [], [det->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: It was a summer afternoon, and the dog was sitting in the middle of the lawn {
    Tokens: [it, was, a, summer, afternoon, ,, and, the, dog, was, sitting, in, the, middle, of, the, lawn]
    Lemmatized tokens: [it, be, a, summer, afternoon, ,, and, the, dog, be, sit, in, the, middle, of, the, lawn]
    POS tags: [PRP, VBD-AUX, DT, NN, NN, ,, CC, DT, NN, VBD-AUX, VBG, IN, DT, NN, IN, DT, NN]
    NER tags: [O, O, O, DATE, TIME, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, XXXX-SU, TAF, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [nsubj->0, cop->1, det->2, compound->3, punct->5, cc->6, conj:and->10], [], [], [], [det->7], [], [nsubj->8, aux->9, nmod:in->13], [], [], [nmod:of->16, case->11, det->12], [], [], [det->15, case->14]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: After a while, it got up and moved to a spot under the tree, because it was hot. {
    Tokens: [after, a, while, ,, it, got, up, and, moved, to, a, spot, under, the, tree, ,, because, it, was, hot, .]
    Lemmatized tokens: [after, a, while, ,, it, get, up, and, move, to, a, spot, under, the, tree, ,, because, it, be, hot, .]
    POS tags: [IN, DT, NN, ,, PRP, VBD, RB, CC, VBD, TO, DT, NN, IN, DT, NN, ,, IN, PRP, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [case->0, det->1], [], [], [punct->15, nmod:after->2, punct->3, advcl->19, nsubj->4, punct->20, advmod->6, cc->7, conj:and->8], [], [], [nsubj->4, nmod:to->11, nmod:under->14], [], [], [case->9, det->10], [], [], [case->12, det->13], [], [], [], [], [mark->16, nsubj->17, cop->18], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is hot, thing B would move to place C and place C is cooler. If thing B is exposed to the sun, thing B is hot. If thing B is sitting in the middle of the lawn, thing B might be exposed to the sun. {
    Tokens: [if, thing, b, is, hot, ,, thing, b, would, move, to, place, c, and, place, c, is, cooler, ., if, thing, b, is, exposed, to, the, sun, ,, thing, b, is, hot, ., if, thing, b, is, sitting, in, the, middle, of, the, lawn, ,, thing, b, might, be, exposed, to, the, sun, .]
    Lemmatized tokens: [if, thing, b, be, hot, ,, thing, b, would, move, to, place, c, and, place, c, be, cooler, ., if, thing, b, be, expose, to, the, sun, ,, thing, b, be, hot, ., if, thing, b, be, sit, in, the, middle, of, the, lawn, ,, thing, b, might, be, expose, to, the, sun, .]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, ,, NN, NN, VBD-AUX, VB, TO, VB, NN, CC, NN, NN, VBD-AUX, JJR, ., IN, NN, NN, VBD-AUX, VBN, TO, DT, NN, ,, NN, NN, VBD-AUX, JJ, ., IN, NN, NN, VBD-AUX, VBG, IN, DT, NN, IN, DT, NN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, TO, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3], [], [], [compound->6], [], [punct->18, advcl->4, punct->5, nsubj->7, aux->8, xcomp->11], [], [dobj->15, mark->10], [cc->13, conj:and->14], [], [], [acl:relcl->17, compound->12, compound->14], [], [cop->16], [], [], [], [compound->20], [], [nsubjpass->21, auxpass->22, nmod:to->26, mark->19], [], [], [case->24, det->25], [], [], [compound->28], [], [advcl->23, punct->27, nsubj->29, cop->30, punct->32], [], [], [], [compound->34], [], [nmod:in->40, mark->33, nsubj->35, aux->36], [], [], [case->38, det->39, nmod:of->43], [], [], [case->41, det->42], [], [], [compound->45], [], [], [punct->44, nsubjpass->46, aux->47, auxpass->48, nmod:to->52, advcl->37, punct->53], [], [], [case->50, det->51], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What was hot {
    Tokens: [what, was, hot]
    Lemmatized tokens: [what, be, hot]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: It was a summer afternoon, and the dog was sitting in the middle of the lawn {
    Tokens: [it, was, a, summer, afternoon, ,, and, the, dog, was, sitting, in, the, middle, of, the, lawn]
    Lemmatized tokens: [it, be, a, summer, afternoon, ,, and, the, dog, be, sit, in, the, middle, of, the, lawn]
    POS tags: [PRP, VBD-AUX, DT, NN, NN, ,, CC, DT, NN, VBD-AUX, VBG, IN, DT, NN, IN, DT, NN]
    NER tags: [O, O, O, DATE, TIME, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, XXXX-SU, TAF, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [nsubj->0, cop->1, det->2, compound->3, punct->5, cc->6, conj:and->10], [], [], [], [det->7], [], [nsubj->8, aux->9, nmod:in->13], [], [], [nmod:of->16, case->11, det->12], [], [], [det->15, case->14]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: After a while, it got up and moved to a spot under the tree, because it was cooler. {
    Tokens: [after, a, while, ,, it, got, up, and, moved, to, a, spot, under, the, tree, ,, because, it, was, cooler, .]
    Lemmatized tokens: [after, a, while, ,, it, get, up, and, move, to, a, spot, under, the, tree, ,, because, it, be, cooler, .]
    POS tags: [IN, DT, NN, ,, PRP, VBD, RB, CC, VBD, TO, DT, NN, IN, DT, NN, ,, IN, PRP, VBD-AUX, JJR, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [case->0, det->1], [], [], [punct->15, nmod:after->2, punct->3, advcl->19, nsubj->4, punct->20, advmod->6, cc->7, conj:and->8], [], [], [nsubj->4, nmod:to->11, nmod:under->14], [], [], [case->9, det->10], [], [], [case->12, det->13], [], [], [], [], [mark->16, nsubj->17, cop->18], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is hot, thing B would move to place C and place C is cooler. If thing B is exposed to the sun, thing B is hot. If thing B is sitting in the middle of the lawn, thing B might be exposed to the sun. {
    Tokens: [if, thing, b, is, hot, ,, thing, b, would, move, to, place, c, and, place, c, is, cooler, ., if, thing, b, is, exposed, to, the, sun, ,, thing, b, is, hot, ., if, thing, b, is, sitting, in, the, middle, of, the, lawn, ,, thing, b, might, be, exposed, to, the, sun, .]
    Lemmatized tokens: [if, thing, b, be, hot, ,, thing, b, would, move, to, place, c, and, place, c, be, cooler, ., if, thing, b, be, expose, to, the, sun, ,, thing, b, be, hot, ., if, thing, b, be, sit, in, the, middle, of, the, lawn, ,, thing, b, might, be, expose, to, the, sun, .]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, ,, NN, NN, VBD-AUX, VB, TO, VB, NN, CC, NN, NN, VBD-AUX, JJR, ., IN, NN, NN, VBD-AUX, VBN, TO, DT, NN, ,, NN, NN, VBD-AUX, JJ, ., IN, NN, NN, VBD-AUX, VBG, IN, DT, NN, IN, DT, NN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, TO, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3], [], [], [compound->6], [], [punct->18, advcl->4, punct->5, nsubj->7, aux->8, xcomp->11], [], [dobj->15, mark->10], [cc->13, conj:and->14], [], [], [acl:relcl->17, compound->12, compound->14], [], [cop->16], [], [], [], [compound->20], [], [nsubjpass->21, auxpass->22, nmod:to->26, mark->19], [], [], [case->24, det->25], [], [], [compound->28], [], [advcl->23, punct->27, nsubj->29, cop->30, punct->32], [], [], [], [compound->34], [], [nmod:in->40, mark->33, nsubj->35, aux->36], [], [], [case->38, det->39, nmod:of->43], [], [], [case->41, det->42], [], [], [compound->45], [], [], [punct->44, nsubjpass->46, aux->47, auxpass->48, nmod:to->52, advcl->37, punct->53], [], [], [case->50, det->51], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What was cooler {
    Tokens: [what, was, cooler]
    Lemmatized tokens: [what, be, cooler]
    POS tags: [WP, VBD-AUX, JJR]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The cat was lying by the mouse hole waiting for the mouse, but it was too cautious. {
    Tokens: [the, cat, was, lying, by, the, mouse, hole, waiting, for, the, mouse, ,, but, it, was, too, cautious, .]
    Lemmatized tokens: [the, cat, be, lie, by, the, mouse, hole, wait, for, the, mouse, ,, but, it, be, too, cautious, .]
    POS tags: [DT, NN, VBD-AUX, VBG, IN, DT, NN, NN, VBG, IN, DT, NN, ,, CC, PRP, VBD-AUX, RB, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [nsubj->1, conj:but->17, aux->2, punct->18, nmod:by->7, punct->12, cc->13], [], [], [], [case->4, det->5, compound->6, acl->8], [nmod:for->11], [], [], [case->9, det->10], [], [], [], [], [], [cop->15, advmod->16, nsubj->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is waiting for its prey, thing B might be impatient or its prey might be cautious. Mouse is cat’s prey. {
    Tokens: [if, thing, b, is, waiting, for, its, prey, ,, thing, b, might, be, impatient, or, its, prey, might, be, cautious, ., mouse, is, cat, 's, prey, .]
    Lemmatized tokens: [if, thing, b, be, wait, for, its, prey, ,, thing, b, might, be, impatient, or, its, prey, might, be, cautious, ., mouse, be, cat, 's, prey, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBG, IN, PRP$, NN, ,, NN, NN, VBD-AUX, VBD-AUX, JJ, CC, PRP$, NN, VBD-AUX, VBD-AUX, JJ, ., NN, VBD-AUX, NN, POS, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, aux->3, nmod:for->7], [], [], [case->5, nmod:poss->6], [], [], [compound->9], [], [], [conj:or->19, advcl->4, punct->20, punct->8, nsubj->10, aux->11, cop->12, cc->14], [], [], [nmod:poss->15], [], [], [nsubj->16, aux->17, cop->18], [], [], [], [case->24], [], [nmod:poss->23, punct->26, nsubj->21, cop->22], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What was too cautious {
    Tokens: [what, was, too, cautious]
    Lemmatized tokens: [what, be, too, cautious]
    POS tags: [WP, VBD-AUX, RB, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, advmod->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The cat was lying by the mouse hole waiting for the mouse, but it was too impatient. {
    Tokens: [the, cat, was, lying, by, the, mouse, hole, waiting, for, the, mouse, ,, but, it, was, too, impatient, .]
    Lemmatized tokens: [the, cat, be, lie, by, the, mouse, hole, wait, for, the, mouse, ,, but, it, be, too, impatient, .]
    POS tags: [DT, NN, VBD-AUX, VBG, IN, DT, NN, NN, VBG, IN, DT, NN, ,, CC, PRP, VBD-AUX, RB, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [nsubj->1, conj:but->17, aux->2, punct->18, nmod:by->7, punct->12, cc->13], [], [], [], [case->4, det->5, compound->6, acl->8], [nmod:for->11], [], [], [case->9, det->10], [], [], [], [], [], [cop->15, advmod->16, nsubj->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is waiting for its prey, thing B might be impatient or its prey might be cautious. Mouse is cat’s prey. {
    Tokens: [if, thing, b, is, waiting, for, its, prey, ,, thing, b, might, be, impatient, or, its, prey, might, be, cautious, ., mouse, is, cat, 's, prey, .]
    Lemmatized tokens: [if, thing, b, be, wait, for, its, prey, ,, thing, b, might, be, impatient, or, its, prey, might, be, cautious, ., mouse, be, cat, 's, prey, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBG, IN, PRP$, NN, ,, NN, NN, VBD-AUX, VBD-AUX, JJ, CC, PRP$, NN, VBD-AUX, VBD-AUX, JJ, ., NN, VBD-AUX, NN, POS, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, aux->3, nmod:for->7], [], [], [case->5, nmod:poss->6], [], [], [compound->9], [], [], [conj:or->19, advcl->4, punct->20, punct->8, nsubj->10, aux->11, cop->12, cc->14], [], [], [nmod:poss->15], [], [], [nsubj->16, aux->17, cop->18], [], [], [], [case->24], [], [nmod:poss->23, punct->26, nsubj->21, cop->22], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What was too impatient {
    Tokens: [what, was, too, impatient]
    Lemmatized tokens: [what, be, too, impatient]
    POS tags: [WP, VBD-AUX, RB, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, advmod->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Anne gave birth to a daughter last month {
    Tokens: [anne, gave, birth, to, a, daughter, last, month]
    Lemmatized tokens: [Anne, give, birth, to, a, daughter, last, month]
    POS tags: [NNP, VBD, NN, TO, DT, NN, JJ, NN]
    NER tags: [PERSON, O, O, O, O, O, DATE, DATE]
    NER values: [null, null, null, null, null, null, THIS P1M OFFSET P-1M, THIS P1M OFFSET P-1M]
    Dependency children: [[], [nsubj->0, dobj->2, nmod:to->5, nmod:tmod->7], [], [], [], [case->3, det->4], [], [amod->6]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: She is a very charming woman. {
    Tokens: [she, is, a, very, charming, woman, .]
    Lemmatized tokens: [she, be, a, very, charming, woman, .]
    POS tags: [PRP, VBD-AUX, DT, RB, JJ, NN, .]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [advmod->3], [nsubj->0, cop->1, det->2, amod->4, punct->6], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is a woman and person C is a baby, person B might give birth to person C. {
    Tokens: [if, person, b, is, a, woman, and, person, c, is, a, baby, ,, person, b, might, give, birth, to, person, c.]
    Lemmatized tokens: [if, person, b, be, a, woman, and, person, c, be, a, baby, ,, person, b, might, give, birth, to, person, c.]
    POS tags: [IN, NN, NN, VBD-AUX, DT, NN, CC, NN, NN, VBD-AUX, DT, NN, ,, NN, NN, VBD-AUX, VB, NN, TO, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [cc->6, conj:and->7], [], [], [mark->0, nsubj->2, cop->3, det->4, compound->5, compound->7, acl:relcl->11], [], [], [cop->9, det->10], [], [], [compound->13], [], [aux->15, dobj->17, nmod:to->20, advcl->8, punct->12, nsubj->14], [], [], [], [case->18, compound->19]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who is a very charming woman {
    Tokens: [who, is, a, very, charming, woman]
    Lemmatized tokens: [who, be, a, very, charming, woman]
    POS tags: [WP, VBD-AUX, DT, RB, JJ, NN]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[cop->1, nsubj->5], [], [], [], [advmod->3], [det->2, amod->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Anne gave birth to a daughter last month {
    Tokens: [anne, gave, birth, to, a, daughter, last, month]
    Lemmatized tokens: [Anne, give, birth, to, a, daughter, last, month]
    POS tags: [NNP, VBD, NN, TO, DT, NN, JJ, NN]
    NER tags: [PERSON, O, O, O, O, O, DATE, DATE]
    NER values: [null, null, null, null, null, null, THIS P1M OFFSET P-1M, THIS P1M OFFSET P-1M]
    Dependency children: [[], [nsubj->0, dobj->2, nmod:to->5, nmod:tmod->7], [], [], [], [case->3, det->4], [], [amod->6]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: She is a very charming baby. {
    Tokens: [she, is, a, very, charming, baby, .]
    Lemmatized tokens: [she, be, a, very, charming, baby, .]
    POS tags: [PRP, VBD-AUX, DT, RB, JJ, NN, .]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [advmod->3], [nsubj->0, cop->1, det->2, amod->4, punct->6], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is a woman and person C is a baby, person B might give birth to person C. {
    Tokens: [if, person, b, is, a, woman, and, person, c, is, a, baby, ,, person, b, might, give, birth, to, person, c.]
    Lemmatized tokens: [if, person, b, be, a, woman, and, person, c, be, a, baby, ,, person, b, might, give, birth, to, person, c.]
    POS tags: [IN, NN, NN, VBD-AUX, DT, NN, CC, NN, NN, VBD-AUX, DT, NN, ,, NN, NN, VBD-AUX, VB, NN, TO, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [cc->6, conj:and->7], [], [], [mark->0, nsubj->2, cop->3, det->4, compound->5, compound->7, acl:relcl->11], [], [], [cop->9, det->10], [], [], [compound->13], [], [aux->15, dobj->17, nmod:to->20, advcl->8, punct->12, nsubj->14], [], [], [], [case->18, compound->19]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who is a very charming baby {
    Tokens: [who, is, a, very, charming, baby]
    Lemmatized tokens: [who, be, a, very, charming, baby]
    POS tags: [WP, VBD-AUX, DT, RB, JJ, NN]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[cop->1, nsubj->5], [], [], [], [advmod->3], [det->2, amod->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Alice tried frantically to stop her daughter from chatting at the party, leaving us to wonder why she was behaving so strangely. {
    Tokens: [alice, tried, frantically, to, stop, her, daughter, from, chatting, at, the, party, ,, leaving, us, to, wonder, why, she, was, behaving, so, strangely, .]
    Lemmatized tokens: [Alice, try, frantically, to, stop, she, daughter, from, chat, at, the, party, ,, leave, we, to, wonder, why, she, be, behave, so, strangely, .]
    POS tags: [NNP, VBD, RB, TO, VB, PRP$, NN, IN, VBG, IN, DT, NN, ,, VBG, PRP, TO, VB, WRB, PRP, VBD-AUX, VBG, RB, RB, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, advmod->2, xcomp->4, punct->23, punct->12, xcomp->13], [], [], [mark->3, dobj->6, advcl->8], [], [nmod:poss->5], [], [mark->7, nmod:at->11], [], [], [case->9, det->10], [], [xcomp->16, dobj->14], [], [], [mark->15, ccomp->20], [], [], [], [advmod->17, nsubj->18, aux->19, advmod->21, advmod->22], [], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B stop person C doing sth normal, person B behaves so strangely. If person B doing sth strange, person B behaves so strangely. If person B is chatting , person B is doing sth normal. If person B is barking ,person B is doing sth strange. {
    Tokens: [if, person, b, stop, person, c, doing, sth, normal, ,, person, b, behaves, so, strangely, ., if, person, b, doing, sth, strange, ,, person, b, behaves, so, strangely, ., if, person, b, is, chatting, ,, person, b, is, doing, sth, normal, ., if, person, b, is, barking, ,, person, b, is, doing, sth, strange, .]
    Lemmatized tokens: [if, person, b, stop, person, c, do, sth, normal, ,, person, b, behave, so, strangely, ., if, person, b, do, sth, strange, ,, person, b, behave, so, strangely, ., if, person, b, be, chat, ,, person, b, be, do, sth, normal, ., if, person, b, be, bark, ,, person, b, be, do, sth, strange, .]
    POS tags: [IN, NN, NN, VB, NN, NN, VBG, NN, JJ, ,, NN, NN, VBZ, RB, RB, ., IN, NN, NN, VBG, NN, JJ, ,, NN, NN, VBZ, RB, RB, ., IN, NN, NN, VBD-AUX, VBG, ,, NN, NN, VBD-AUX, VBG, NN, JJ, ., IN, NN, NN, VBD-AUX, VBG, ,, NN, NN, VBD-AUX, VBG, NN, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5], [], [compound->4, acl->6], [dobj->7], [amod->8], [], [], [], [compound->10], [punct->15, advcl->3, punct->9, nsubj->11, xcomp->14], [], [advmod->13], [], [], [], [compound->17], [nsubj->18, dobj->20, mark->16], [amod->21], [], [], [], [compound->23], [advcl->19, punct->22, nsubj->24, xcomp->27, punct->28], [], [advmod->26], [], [], [], [compound->30], [], [mark->29, nsubj->31, aux->32], [], [], [compound->35], [], [punct->34, nsubj->36, aux->37, dobj->39, punct->41, advcl->33], [amod->40], [], [], [], [], [compound->43], [], [mark->42, nsubj->44, aux->45], [], [], [compound->48], [], [aux->50, dobj->52, punct->54, advcl->46, punct->47, nsubj->49], [amod->53], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was behaving strangely {
    Tokens: [who, was, behaving, strangely]
    Lemmatized tokens: [who, be, behave, strangely]
    POS tags: [WP, VBD-AUX, VBG, RB]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, advmod->3], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Alice tried frantically to stop her daughter from barking at the party, leaving us to wonder why she was behaving so strangely. {
    Tokens: [alice, tried, frantically, to, stop, her, daughter, from, barking, at, the, party, ,, leaving, us, to, wonder, why, she, was, behaving, so, strangely, .]
    Lemmatized tokens: [Alice, try, frantically, to, stop, she, daughter, from, bark, at, the, party, ,, leave, we, to, wonder, why, she, be, behave, so, strangely, .]
    POS tags: [NNP, VBD, RB, TO, VB, PRP$, NN, IN, VBG, IN, DT, NN, ,, VBG, PRP, TO, VB, WRB, PRP, VBD-AUX, VBG, RB, RB, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, advmod->2, xcomp->4, punct->23, punct->12, xcomp->13], [], [], [mark->3, dobj->6, advcl->8], [], [nmod:poss->5], [], [mark->7, nmod:at->11], [], [], [case->9, det->10], [], [xcomp->16, dobj->14], [], [], [mark->15, ccomp->20], [], [], [], [advmod->17, nsubj->18, aux->19, advmod->21, advmod->22], [], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B stop person C doing sth normal, person B behaves so strangely. If person B doing sth strange, person B behaves so strangely. If person B is chatting , person B is doing sth normal. If person B is barking ,person B is doing sth strange. {
    Tokens: [if, person, b, stop, person, c, doing, sth, normal, ,, person, b, behaves, so, strangely, ., if, person, b, doing, sth, strange, ,, person, b, behaves, so, strangely, ., if, person, b, is, chatting, ,, person, b, is, doing, sth, normal, ., if, person, b, is, barking, ,, person, b, is, doing, sth, strange, .]
    Lemmatized tokens: [if, person, b, stop, person, c, do, sth, normal, ,, person, b, behave, so, strangely, ., if, person, b, do, sth, strange, ,, person, b, behave, so, strangely, ., if, person, b, be, chat, ,, person, b, be, do, sth, normal, ., if, person, b, be, bark, ,, person, b, be, do, sth, strange, .]
    POS tags: [IN, NN, NN, VB, NN, NN, VBG, NN, JJ, ,, NN, NN, VBZ, RB, RB, ., IN, NN, NN, VBG, NN, JJ, ,, NN, NN, VBZ, RB, RB, ., IN, NN, NN, VBD-AUX, VBG, ,, NN, NN, VBD-AUX, VBG, NN, JJ, ., IN, NN, NN, VBD-AUX, VBG, ,, NN, NN, VBD-AUX, VBG, NN, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5], [], [compound->4, acl->6], [dobj->7], [amod->8], [], [], [], [compound->10], [punct->15, advcl->3, punct->9, nsubj->11, xcomp->14], [], [advmod->13], [], [], [], [compound->17], [nsubj->18, dobj->20, mark->16], [amod->21], [], [], [], [compound->23], [advcl->19, punct->22, nsubj->24, xcomp->27, punct->28], [], [advmod->26], [], [], [], [compound->30], [], [mark->29, nsubj->31, aux->32], [], [], [compound->35], [], [punct->34, nsubj->36, aux->37, dobj->39, punct->41, advcl->33], [amod->40], [], [], [], [], [compound->43], [], [mark->42, nsubj->44, aux->45], [], [], [compound->48], [], [aux->50, dobj->52, punct->54, advcl->46, punct->47, nsubj->49], [amod->53], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was behaving strangely {
    Tokens: [who, was, behaving, strangely]
    Lemmatized tokens: [who, be, behave, strangely]
    POS tags: [WP, VBD-AUX, VBG, RB]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, advmod->3], []]
  }



  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I saw Jim yelling at some guy in a military uniform with a huge red beard {
    Tokens: [i, saw, jim, yelling, at, some, guy, in, a, military, uniform, with, a, huge, red, beard]
    Lemmatized tokens: [I, see, Jim, yell, at, some, guy, in, a, military, uniform, with, a, huge, red, beard]
    POS tags: [PRP, VBD, NNP, VBG, IN, DT, NN, IN, DT, JJ, NN, IN, DT, JJ, JJ, NNP]
    NER tags: [O, O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2], [acl->3], [nmod:at->6], [], [], [case->4, det->5, nmod:in->10], [], [], [], [nmod:with->15, case->7, det->8, amod->9], [], [], [], [], [case->11, det->12, amod->13, amod->14]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I don't know who he was, but he looked very unhappy. {
    Tokens: [i, do, n't, know, who, he, was, ,, but, he, looked, very, unhappy, .]
    Lemmatized tokens: [I, do, not, know, who, he, be, ,, but, he, look, very, unhappy, .]
    POS tags: [PRP, VBD-AUX, RB, VB, WP, PRP, VBD-AUX, ,, CC, PRP, VBD, RB, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, aux->1, neg->2, ccomp->6, punct->7, cc->8, conj:but->10, punct->13], [], [], [dobj->4, nsubj->5], [], [], [], [nsubj->9, xcomp->12], [], [advmod->11], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who looked very unhappy {
    Tokens: [who, looked, very, unhappy]
    Lemmatized tokens: [who, look, very, unhappy]
    POS tags: [WP, VBD, RB, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [nsubj->0, xcomp->3], [], [advmod->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I saw Jim yelling at some guy in a military uniform with a huge red beard. I don't know why he was, but he looked very unhappy. {
    Tokens: [i, saw, jim, yelling, at, some, guy, in, a, military, uniform, with, a, huge, red, beard, ., i, do, n't, know, why, he, was, ,, but, he, looked, very, unhappy, .]
    Lemmatized tokens: [I, see, Jim, yell, at, some, guy, in, a, military, uniform, with, a, huge, red, beard, ., I, do, not, know, why, he, be, ,, but, he, look, very, unhappy, .]
    POS tags: [PRP, VBD, NNP, VBG, IN, DT, NN, IN, DT, JJ, NN, IN, DT, JJ, JJ, NNP, ., PRP, VBD-AUX, RB, VB, WRB, PRP, VBD-AUX, ,, CC, PRP, VBD, RB, JJ, .]
    NER tags: [O, O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, punct->16, dobj->2], [acl->3], [nmod:at->6], [], [], [case->4, det->5, nmod:in->10], [], [], [], [nmod:with->15, case->7, det->8, amod->9], [], [], [], [], [case->11, det->12, amod->13, amod->14], [], [], [], [], [neg->19, ccomp->23, punct->24, cc->25, conj:but->27, punct->30, nsubj->17, aux->18], [], [], [advmod->21, nsubj->22], [], [], [], [nsubj->26, xcomp->29], [], [advmod->28], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who looked very unhappy {
    Tokens: [who, looked, very, unhappy]
    Lemmatized tokens: [who, look, very, unhappy]
    POS tags: [WP, VBD, RB, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [nsubj->0, xcomp->3], [], [advmod->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The fish ate the worm. It was tasty. {
    Tokens: [the, fish, ate, the, worm, ., it, was, tasty, .]
    Lemmatized tokens: [the, fish, eat, the, worm, ., it, be, tasty, .]
    POS tags: [DT, NN, VBD, DT, NN, ., PRP, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [nsubj->1, dobj->4, punct->5], [], [det->3], [], [], [], [punct->9, nsubj->6, cop->7], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B eats thing C, thing B is hungry and thing C is tasty. {
    Tokens: [if, thing, b, eats, thing, c, ,, thing, b, is, hungry, and, thing, c, is, tasty, .]
    Lemmatized tokens: [if, thing, b, eat, thing, c, ,, thing, b, be, hungry, and, thing, c, be, tasty, .]
    POS tags: [IN, NN, NN, VBZ, NN, NN, ,, NN, NN, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5], [], [compound->4], [], [], [compound->7], [], [conj:and->15, punct->16, advcl->3, punct->6, nsubj->8, cop->9, cc->11], [], [], [compound->12], [], [nsubj->13, cop->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What was tasty {
    Tokens: [what, was, tasty]
    Lemmatized tokens: [what, be, tasty]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The fish ate the worm. It was hungry. {
    Tokens: [the, fish, ate, the, worm, ., it, was, hungry, .]
    Lemmatized tokens: [the, fish, eat, the, worm, ., it, be, hungry, .]
    POS tags: [DT, NN, VBD, DT, NN, ., PRP, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [nsubj->1, dobj->4, punct->5], [], [det->3], [], [], [], [punct->9, nsubj->6, cop->7], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B eats thing C, thing B is hungry and thing C is tasty. {
    Tokens: [if, thing, b, eats, thing, c, ,, thing, b, is, hungry, and, thing, c, is, tasty, .]
    Lemmatized tokens: [if, thing, b, eat, thing, c, ,, thing, b, be, hungry, and, thing, c, be, tasty, .]
    POS tags: [IN, NN, NN, VBZ, NN, NN, ,, NN, NN, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5], [], [compound->4], [], [], [compound->7], [], [conj:and->15, punct->16, advcl->3, punct->6, nsubj->8, cop->9, cc->11], [], [], [compound->12], [], [nsubj->13, cop->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What was hungry {
    Tokens: [what, was, hungry]
    Lemmatized tokens: [what, be, hungry]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I was trying to open the lock with the key, but someone had filled the keyhole with chewing gum, and I couldn't get it in. {
    Tokens: [i, was, trying, to, open, the, lock, with, the, key, ,, but, someone, had, filled, the, keyhole, with, chewing, gum, ,, and, i, could, n't, get, it, in, .]
    Lemmatized tokens: [I, be, try, to, open, the, lock, with, the, key, ,, but, someone, have, fill, the, keyhole, with, chew, gum, ,, and, I, could, not, get, it, in, .]
    POS tags: [PRP, VBD-AUX, VBG, TO, VB, DT, NN, IN, DT, NN, ,, CC, NN, VBD-AUX, VBN, DT, NN, IN, VBG, NN, ,, CC, PRP, VBD-AUX, RB, VB, PRP, IN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, xcomp->4, conj:but->25, punct->10, cc->11, punct->28, conj:but->14], [], [mark->3, dobj->6, nmod:with->9], [], [det->5], [], [], [case->7, det->8], [], [], [], [], [dobj->16, nmod:with->19, punct->20, cc->21, conj:and->25, nsubj->12, aux->13], [], [det->15], [], [], [case->17, amod->18], [], [], [], [], [], [nsubj->22, aux->23, neg->24, dobj->26, nmod->27], [], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If somebody tries to open the lock with the thing B, he might not get the thing B in. If somebody fills the keyhole with thing C, thing C is in the keyhole. If thing C is in the keyhole, somebody might not get thing C out. {
    Tokens: [if, somebody, tries, to, open, the, lock, with, the, thing, b, ,, he, might, not, get, the, thing, b, in, ., if, somebody, fills, the, keyhole, with, thing, c, ,, thing, c, is, in, the, keyhole, ., if, thing, c, is, in, the, keyhole, ,, somebody, might, not, get, thing, c, out, .]
    Lemmatized tokens: [if, somebody, try, to, open, the, lock, with, the, thing, b, ,, he, might, not, get, the, thing, b, in, ., if, somebody, fill, the, keyhole, with, thing, c, ,, thing, c, be, in, the, keyhole, ., if, thing, c, be, in, the, keyhole, ,, somebody, might, not, get, thing, c, out, .]
    POS tags: [IN, NN, VBZ, TO, VB, DT, NN, IN, DT, NN, NN, ,, PRP, VBD-AUX, RB, VB, DT, NN, NN, IN, ., IN, NN, VBZ, DT, NN, IN, NN, NN, ,, NN, NN, VBD-AUX, IN, DT, NN, ., IN, NN, NN, VBD-AUX, IN, DT, NN, ,, NN, VBD-AUX, RB, VB, NN, NN, RB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [mark->0, nsubj->1, xcomp->4], [], [mark->3, dobj->6, nmod:with->10], [], [det->5], [], [], [], [case->7, det->8, compound->9], [], [], [], [], [advcl->2, dobj->18, nmod->19, punct->20, punct->11, nsubj->12, aux->13, neg->14], [], [], [det->16, compound->17], [], [], [], [], [dobj->25, mark->21, nsubj->22], [], [det->24, nmod:with->28], [], [], [case->26, compound->27], [], [], [compound->30], [], [], [], [advcl->23, punct->29, nsubj->31, cop->32, case->33, det->34, punct->36], [], [], [], [compound->38], [], [], [], [det->42, mark->37, nsubj->39, cop->40, case->41], [], [], [], [], [advcl:in->43, punct->44, nsubj->45, aux->46, neg->47, dobj->50, advmod->51, punct->52], [], [compound->49], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What couldn't I get in {
    Tokens: [what, could, n't, i, get, in]
    Lemmatized tokens: [what, could, not, I, get, in]
    POS tags: [WP, VBD-AUX, RB, PRP, VBP, IN]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, neg->2, ccomp->4], [], [], [nsubj->3, nmod->5], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I was trying to open the lock with the key, but someone had filled the keyhole with chewing gum, and I couldn't get it out. {
    Tokens: [i, was, trying, to, open, the, lock, with, the, key, ,, but, someone, had, filled, the, keyhole, with, chewing, gum, ,, and, i, could, n't, get, it, out, .]
    Lemmatized tokens: [I, be, try, to, open, the, lock, with, the, key, ,, but, someone, have, fill, the, keyhole, with, chew, gum, ,, and, I, could, not, get, it, out, .]
    POS tags: [PRP, VBD-AUX, VBG, TO, VB, DT, NN, IN, DT, NN, ,, CC, NN, VBD-AUX, VBN, DT, NN, IN, VBG, NN, ,, CC, PRP, VBD-AUX, RB, VB, PRP, RP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, xcomp->4, conj:but->25, punct->10, cc->11, punct->28, conj:but->14], [], [mark->3, dobj->6, nmod:with->9], [], [det->5], [], [], [case->7, det->8], [], [], [], [], [dobj->16, nmod:with->19, punct->20, cc->21, conj:and->25, nsubj->12, aux->13], [], [det->15], [], [], [case->17, amod->18], [], [], [], [], [], [nsubj->22, aux->23, neg->24, dobj->26, compound:prt->27], [], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If somebody tries to open the lock with the thing B, he might not get the thing B in. If somebody fills the keyhole with thing C, thing C is in the keyhole. If thing C is in the keyhole, somebody might not get thing C out. {
    Tokens: [if, somebody, tries, to, open, the, lock, with, the, thing, b, ,, he, might, not, get, the, thing, b, in, ., if, somebody, fills, the, keyhole, with, thing, c, ,, thing, c, is, in, the, keyhole, ., if, thing, c, is, in, the, keyhole, ,, somebody, might, not, get, thing, c, out, .]
    Lemmatized tokens: [if, somebody, try, to, open, the, lock, with, the, thing, b, ,, he, might, not, get, the, thing, b, in, ., if, somebody, fill, the, keyhole, with, thing, c, ,, thing, c, be, in, the, keyhole, ., if, thing, c, be, in, the, keyhole, ,, somebody, might, not, get, thing, c, out, .]
    POS tags: [IN, NN, VBZ, TO, VB, DT, NN, IN, DT, NN, NN, ,, PRP, VBD-AUX, RB, VB, DT, NN, NN, IN, ., IN, NN, VBZ, DT, NN, IN, NN, NN, ,, NN, NN, VBD-AUX, IN, DT, NN, ., IN, NN, NN, VBD-AUX, IN, DT, NN, ,, NN, VBD-AUX, RB, VB, NN, NN, RB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [mark->0, nsubj->1, xcomp->4], [], [mark->3, dobj->6, nmod:with->10], [], [det->5], [], [], [], [case->7, det->8, compound->9], [], [], [], [], [advcl->2, dobj->18, nmod->19, punct->20, punct->11, nsubj->12, aux->13, neg->14], [], [], [det->16, compound->17], [], [], [], [], [dobj->25, mark->21, nsubj->22], [], [det->24, nmod:with->28], [], [], [case->26, compound->27], [], [], [compound->30], [], [], [], [advcl->23, punct->29, nsubj->31, cop->32, case->33, det->34, punct->36], [], [], [], [compound->38], [], [], [], [det->42, mark->37, nsubj->39, cop->40, case->41], [], [], [], [], [advcl:in->43, punct->44, nsubj->45, aux->46, neg->47, dobj->50, advmod->51, punct->52], [], [compound->49], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What couldn't I get out {
    Tokens: [what, could, n't, i, get, out]
    Lemmatized tokens: [what, could, not, I, get, out]
    POS tags: [WP, VBD-AUX, RB, PRP, VBP, RP]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, neg->2, ccomp->4], [], [], [nsubj->3, compound:prt->5], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The dog chased the cat, which ran up a tree. It waited at the top. {
    Tokens: [the, dog, chased, the, cat, ,, which, ran, up, a, tree, ., it, waited, at, the, top, .]
    Lemmatized tokens: [the, dog, chase, the, cat, ,, which, run, up, a, tree, ., it, wait, at, the, top, .]
    POS tags: [DT, NN, VBD, DT, NN, ,, WDT, VBD, RP, DT, NN, ., PRP, VBD, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [nsubj->1, dobj->4, punct->11], [], [det->3, punct->5, acl:relcl->7], [], [], [nsubj->6, compound:prt->8, dobj->10], [], [], [det->9], [], [], [nmod:at->16, punct->17, nsubj->12], [], [], [case->14, det->15], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B chases thing C and thing C runs up, thing B might waits at the bottom or thing C might waits at the top. {
    Tokens: [if, thing, b, chases, thing, c, and, thing, c, runs, up, ,, thing, b, might, waits, at, the, bottom, or, thing, c, might, waits, at, the, top, .]
    Lemmatized tokens: [if, thing, b, chase, thing, c, and, thing, c, run, up, ,, thing, b, might, wait, at, the, bottom, or, thing, c, might, wait, at, the, top, .]
    POS tags: [IN, NN, NN, VBZ, NN, NN, CC, NN, NN, VBZ, RP, ,, NN, NN, VBD-AUX, VBZ, IN, DT, NN, CC, NN, NN, VBD-AUX, VBZ, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, ccomp->9], [], [compound->4, cc->6, conj:and->8], [], [], [compound->7], [nsubj->5, nsubj->8, compound:prt->10], [], [], [], [compound->12], [], [advcl->3, nmod:at->21, punct->11, punct->27, nsubj->13, aux->14], [], [], [cc->19, conj:or->20], [], [], [case->16, det->17, compound->18, compound->20, acl:relcl->23], [], [aux->22, nmod:at->26], [], [], [case->24, det->25], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Which waited at the top {
    Tokens: [which, waited, at, the, top]
    Lemmatized tokens: [which, wait, at, the, top]
    POS tags: [WDT, VBD, IN, DT, NN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:at->4], [], [], [case->2, det->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The dog chased the cat, which ran up a tree. It waited at the bottom. {
    Tokens: [the, dog, chased, the, cat, ,, which, ran, up, a, tree, ., it, waited, at, the, bottom, .]
    Lemmatized tokens: [the, dog, chase, the, cat, ,, which, run, up, a, tree, ., it, wait, at, the, bottom, .]
    POS tags: [DT, NN, VBD, DT, NN, ,, WDT, VBD, RP, DT, NN, ., PRP, VBD, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [nsubj->1, dobj->4, punct->11], [], [det->3, punct->5, acl:relcl->7], [], [], [nsubj->6, compound:prt->8, dobj->10], [], [], [det->9], [], [], [nmod:at->16, punct->17, nsubj->12], [], [], [case->14, det->15], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B chases thing C and thing C runs up, thing B might waits at the bottom or thing C might waits at the top. {
    Tokens: [if, thing, b, chases, thing, c, and, thing, c, runs, up, ,, thing, b, might, waits, at, the, bottom, or, thing, c, might, waits, at, the, top, .]
    Lemmatized tokens: [if, thing, b, chase, thing, c, and, thing, c, run, up, ,, thing, b, might, wait, at, the, bottom, or, thing, c, might, wait, at, the, top, .]
    POS tags: [IN, NN, NN, VBZ, NN, NN, CC, NN, NN, VBZ, RP, ,, NN, NN, VBD-AUX, VBZ, IN, DT, NN, CC, NN, NN, VBD-AUX, VBZ, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, ccomp->9], [], [compound->4, cc->6, conj:and->8], [], [], [compound->7], [nsubj->5, nsubj->8, compound:prt->10], [], [], [], [compound->12], [], [advcl->3, nmod:at->21, punct->11, punct->27, nsubj->13, aux->14], [], [], [cc->19, conj:or->20], [], [], [case->16, det->17, compound->18, compound->20, acl:relcl->23], [], [aux->22, nmod:at->26], [], [], [case->24, det->25], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Which waited at the bottom {
    Tokens: [which, waited, at, the, bottom]
    Lemmatized tokens: [which, wait, at, the, bottom]
    POS tags: [WDT, VBD, IN, DT, NN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:at->4], [], [], [case->2, det->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: In the storm, the tree fell down and crashed through the roof of my house. Now, I have to get it removed. {
    Tokens: [in, the, storm, ,, the, tree, fell, down, and, crashed, through, the, roof, of, my, house, ., now, ,, i, have, to, get, it, removed, .]
    Lemmatized tokens: [in, the, storm, ,, the, tree, fall, down, and, crash, through, the, roof, of, my, house, ., now, ,, I, have, to, get, it, remove, .]
    POS tags: [IN, DT, NN, ,, DT, NN, VBD, RB, CC, VBD, IN, DT, NN, IN, PRP$, NN, ., RB, ,, PRP, VBD-AUX, TO, VB, PRP, VBN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, DATE, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, PRESENT_REF, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [case->0, det->1], [], [], [det->4], [punct->16, nmod:in->2, punct->3, nsubj->5, advmod->7, cc->8, conj:and->9], [], [], [nsubj->5, nmod:through->12], [], [], [nmod:of->15, case->10, det->11], [], [], [case->13, nmod:poss->14], [], [], [], [], [nsubj->19, xcomp->22, punct->25, advmod->17, punct->18], [], [mark->21, xcomp->24], [], [nsubj->23], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B crash through thing C, thing B might be removed and thing C is broken. If thing C is broken, thing C might be repaired. {
    Tokens: [if, thing, b, crash, through, thing, c, ,, thing, b, might, be, removed, and, thing, c, is, broken, ., if, thing, c, is, broken, ,, thing, c, might, be, repaired, .]
    Lemmatized tokens: [if, thing, b, crash, through, thing, c, ,, thing, b, might, be, remove, and, thing, c, be, break, ., if, thing, c, be, break, ,, thing, c, might, be, repair, .]
    POS tags: [IN, NN, NN, NN, IN, NN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, CC, NN, NN, VBD-AUX, VBN, ., IN, NN, NN, VBD-AUX, VBN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [mark->0, compound->1, compound->2, dep->6], [], [], [case->4, compound->5], [], [], [compound->8], [], [], [conj:and->17, punct->18, advcl->3, punct->7, nsubjpass->9, aux->10, auxpass->11, cc->13], [], [], [compound->14], [], [nsubjpass->15, auxpass->16], [], [], [], [compound->20], [], [nsubjpass->21, auxpass->22, mark->19], [], [], [compound->25], [], [], [advcl->23, punct->24, nsubjpass->26, aux->27, auxpass->28, punct->30], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What has to be removed {
    Tokens: [what, has, to, be, removed]
    Lemmatized tokens: [what, have, to, be, remove]
    POS tags: [WDT, VBD-AUX, TO, VBD-AUX, VBN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, xcomp->4], [], [], [mark->2, auxpass->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: In the storm, the tree fell down and crashed through the roof of my house. Now, I have to get it repaired. {
    Tokens: [in, the, storm, ,, the, tree, fell, down, and, crashed, through, the, roof, of, my, house, ., now, ,, i, have, to, get, it, repaired, .]
    Lemmatized tokens: [in, the, storm, ,, the, tree, fall, down, and, crash, through, the, roof, of, my, house, ., now, ,, I, have, to, get, it, repair, .]
    POS tags: [IN, DT, NN, ,, DT, NN, VBD, RB, CC, VBD, IN, DT, NN, IN, PRP$, NN, ., RB, ,, PRP, VBD-AUX, TO, VB, PRP, VBN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, DATE, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, PRESENT_REF, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [case->0, det->1], [], [], [det->4], [punct->16, nmod:in->2, punct->3, nsubj->5, advmod->7, cc->8, conj:and->9], [], [], [nsubj->5, nmod:through->12], [], [], [nmod:of->15, case->10, det->11], [], [], [case->13, nmod:poss->14], [], [], [], [], [nsubj->19, xcomp->22, punct->25, advmod->17, punct->18], [], [mark->21, dep->24], [], [nsubj->23], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B crash through thing C, thing B might be removed and thing C is broken. If thing C is broken, thing C might be repaired. {
    Tokens: [if, thing, b, crash, through, thing, c, ,, thing, b, might, be, removed, and, thing, c, is, broken, ., if, thing, c, is, broken, ,, thing, c, might, be, repaired, .]
    Lemmatized tokens: [if, thing, b, crash, through, thing, c, ,, thing, b, might, be, remove, and, thing, c, be, break, ., if, thing, c, be, break, ,, thing, c, might, be, repair, .]
    POS tags: [IN, NN, NN, NN, IN, NN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, CC, NN, NN, VBD-AUX, VBN, ., IN, NN, NN, VBD-AUX, VBN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [mark->0, compound->1, compound->2, dep->6], [], [], [case->4, compound->5], [], [], [compound->8], [], [], [conj:and->17, punct->18, advcl->3, punct->7, nsubjpass->9, aux->10, auxpass->11, cc->13], [], [], [compound->14], [], [nsubjpass->15, auxpass->16], [], [], [], [compound->20], [], [nsubjpass->21, auxpass->22, mark->19], [], [], [compound->25], [], [], [advcl->23, punct->24, nsubjpass->26, aux->27, auxpass->28, punct->30], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What has to be repaired {
    Tokens: [what, has, to, be, repaired]
    Lemmatized tokens: [what, have, to, be, repair]
    POS tags: [WDT, VBD-AUX, TO, VBD-AUX, VBN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, xcomp->4], [], [], [mark->2, auxpass->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The customer walked into the bank and stabbed one of the tellers. He was immediately taken to the emergency room. {
    Tokens: [the, customer, walked, into, the, bank, and, stabbed, one, of, the, tellers, ., he, was, immediately, taken, to, the, emergency, room, .]
    Lemmatized tokens: [the, customer, walk, into, the, bank, and, stab, one, of, the, teller, ., he, be, immediately, take, to, the, emergency, room, .]
    POS tags: [DT, NN, VBD, IN, DT, NN, CC, VBD, CD, IN, DT, NNS, ., PRP, VBD-AUX, RB, VBN, TO, DT, NN, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, NUMBER, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, 1.0, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [nsubj->1, nmod:into->5, cc->6, conj:and->7, punct->12], [], [], [case->3, det->4], [], [nsubj->1, dobj->8], [nmod:of->11], [], [], [case->9, det->10], [], [], [], [], [advmod->15, nmod:to->20, punct->21, nsubjpass->13, auxpass->14], [], [], [], [case->17, det->18, compound->19], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B stabs person C, person C might be hurt and person B might commit a crime. If person B commits a crime, person B might be taken to the police station. If person B is hurt,  person B might be taken to emergency. {
    Tokens: [if, person, b, stabs, person, c, ,, person, c, might, be, hurt, and, person, b, might, commit, a, crime, ., if, person, b, commits, a, crime, ,, person, b, might, be, taken, to, the, police, station, ., if, person, b, is, hurt, ,, person, b, might, be, taken, to, emergency, .]
    Lemmatized tokens: [if, person, b, stab, person, c, ,, person, c, might, be, hurt, and, person, b, might, commit, a, crime, ., if, person, b, commit, a, crime, ,, person, b, might, be, take, to, the, police, station, ., if, person, b, be, hurt, ,, person, b, might, be, take, to, emergency, .]
    POS tags: [IN, NN, NN, VBZ, NN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, CC, NN, NN, VBD-AUX, VB, DT, NN, ., IN, NN, NN, VBZ, DT, NN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, TO, DT, NN, NN, ., IN, NN, NN, VBD-AUX, VBN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, TO, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5], [], [compound->4], [], [], [compound->7], [], [], [conj:and->16, advcl->3, punct->19, punct->6, nsubjpass->8, aux->9, auxpass->10, cc->12], [], [], [compound->13], [], [aux->15, dobj->18, nsubj->14], [], [det->17], [], [], [], [compound->21], [nsubj->22, dobj->25, mark->20], [], [det->24], [], [], [compound->27], [], [], [advcl->23, punct->26, nsubjpass->28, aux->29, auxpass->30, nmod:to->35, punct->36], [], [], [], [case->32, det->33, compound->34], [], [], [], [compound->38], [], [mark->37, nsubjpass->39, auxpass->40], [], [], [compound->43], [], [], [punct->42, nsubjpass->44, aux->45, auxpass->46, nmod:to->49, punct->50, advcl->41], [], [case->48], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was taken to the emergency room {
    Tokens: [who, was, taken, to, the, emergency, room]
    Lemmatized tokens: [who, be, take, to, the, emergency, room]
    POS tags: [WP, VBD-AUX, VBN, TO, DT, NN, NN]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubjpass->0, auxpass->1, nmod:to->6], [], [], [], [case->3, det->4, compound->5]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The customer walked into the bank and stabbed one of the tellers. He was immediately taken to the police station. {
    Tokens: [the, customer, walked, into, the, bank, and, stabbed, one, of, the, tellers, ., he, was, immediately, taken, to, the, police, station, .]
    Lemmatized tokens: [the, customer, walk, into, the, bank, and, stab, one, of, the, teller, ., he, be, immediately, take, to, the, police, station, .]
    POS tags: [DT, NN, VBD, IN, DT, NN, CC, VBD, CD, IN, DT, NNS, ., PRP, VBD-AUX, RB, VBN, TO, DT, NN, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, NUMBER, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, 1.0, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [nsubj->1, nmod:into->5, cc->6, conj:and->7, punct->12], [], [], [case->3, det->4], [], [nsubj->1, dobj->8], [nmod:of->11], [], [], [case->9, det->10], [], [], [], [], [advmod->15, nmod:to->20, punct->21, nsubjpass->13, auxpass->14], [], [], [], [case->17, det->18, compound->19], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B stabs person C, person C might be hurt and person B might commit a crime. If person B commits a crime, person B might be taken to the police station. If person B is hurt,  person B might be taken to emergency. {
    Tokens: [if, person, b, stabs, person, c, ,, person, c, might, be, hurt, and, person, b, might, commit, a, crime, ., if, person, b, commits, a, crime, ,, person, b, might, be, taken, to, the, police, station, ., if, person, b, is, hurt, ,, person, b, might, be, taken, to, emergency, .]
    Lemmatized tokens: [if, person, b, stab, person, c, ,, person, c, might, be, hurt, and, person, b, might, commit, a, crime, ., if, person, b, commit, a, crime, ,, person, b, might, be, take, to, the, police, station, ., if, person, b, be, hurt, ,, person, b, might, be, take, to, emergency, .]
    POS tags: [IN, NN, NN, VBZ, NN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, CC, NN, NN, VBD-AUX, VB, DT, NN, ., IN, NN, NN, VBZ, DT, NN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, TO, DT, NN, NN, ., IN, NN, NN, VBD-AUX, VBN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, TO, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5], [], [compound->4], [], [], [compound->7], [], [], [conj:and->16, advcl->3, punct->19, punct->6, nsubjpass->8, aux->9, auxpass->10, cc->12], [], [], [compound->13], [], [aux->15, dobj->18, nsubj->14], [], [det->17], [], [], [], [compound->21], [nsubj->22, dobj->25, mark->20], [], [det->24], [], [], [compound->27], [], [], [advcl->23, punct->26, nsubjpass->28, aux->29, auxpass->30, nmod:to->35, punct->36], [], [], [], [case->32, det->33, compound->34], [], [], [], [compound->38], [], [mark->37, nsubjpass->39, auxpass->40], [], [], [compound->43], [], [], [punct->42, nsubjpass->44, aux->45, auxpass->46, nmod:to->49, punct->50, advcl->41], [], [case->48], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was taken to the police station {
    Tokens: [who, was, taken, to, the, police, station]
    Lemmatized tokens: [who, be, take, to, the, police, station]
    POS tags: [WP, VBD-AUX, VBN, TO, DT, NN, NN]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubjpass->0, auxpass->1, nmod:to->6], [], [], [], [case->3, det->4, compound->5]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: John was doing research in the library when he heard a man humming and whistling. He was very annoyed. {
    Tokens: [john, was, doing, research, in, the, library, when, he, heard, a, man, humming, and, whistling, ., he, was, very, annoyed, .]
    Lemmatized tokens: [John, be, do, research, in, the, library, when, he, hear, a, man, hum, and, whistle, ., he, be, very, annoyed, .]
    POS tags: [NNP, VBD-AUX, VBG, NN, IN, DT, NN, WRB, PRP, VBD, DT, NN, VBG, CC, VBG, ., PRP, VBD-AUX, RB, JJ, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [punct->15, nsubj->0, aux->1, dobj->3, nmod:in->6], [], [], [], [case->4, det->5, acl:relcl->9], [], [], [advmod->7, nsubj->8, dobj->11], [], [det->10, acl->12, acl->14], [cc->13, conj:and->14], [], [], [], [], [], [], [advmod->18, punct->20, nsubj->16, cop->17], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: When person B hear person C and person C is making noise, person B might be annoyed or person C might be annoying. If person B is humming and whistling, person B is making noise. {
    Tokens: [when, person, b, hear, person, c, and, person, c, is, making, noise, ,, person, b, might, be, annoyed, or, person, c, might, be, annoying, ., if, person, b, is, humming, and, whistling, ,, person, b, is, making, noise, .]
    Lemmatized tokens: [when, person, b, hear, person, c, and, person, c, be, make, noise, ,, person, b, might, be, annoyed, or, person, c, might, be, annoying, ., if, person, b, be, hum, and, whistle, ,, person, b, be, make, noise, .]
    POS tags: [WRB, NN, NN, VBP, NN, NN, CC, NN, NN, VBD-AUX, VBG, NN, ,, NN, NN, VBD-AUX, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, VBD-AUX, JJ, ., IN, NN, NN, VBD-AUX, VBG, CC, VBG, ,, NN, NN, VBD-AUX, VBG, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [advmod->0, nsubj->2, ccomp->10], [], [compound->4, cc->6, conj:and->8], [], [], [compound->7], [], [nsubj->5, nsubj->8, aux->9, dobj->11], [], [], [], [compound->13], [], [], [aux->15, cop->16, cc->18, advcl->3, conj:or->23, punct->24, punct->12, nsubj->14], [], [], [compound->19], [], [], [nsubj->20, aux->21, cop->22], [], [], [], [compound->26], [], [nsubj->27, aux->28, cc->30, conj:and->31, mark->25], [], [nsubj->27], [], [], [compound->33], [], [advcl->29, advcl->31, punct->32, nsubj->34, aux->35, dobj->37, punct->38], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was annoyed {
    Tokens: [who, was, annoyed]
    Lemmatized tokens: [who, be, annoyed]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: John was doing research in the library when he heard a man humming and whistling. He was very annoying. {
    Tokens: [john, was, doing, research, in, the, library, when, he, heard, a, man, humming, and, whistling, ., he, was, very, annoying, .]
    Lemmatized tokens: [John, be, do, research, in, the, library, when, he, hear, a, man, hum, and, whistle, ., he, be, very, annoying, .]
    POS tags: [NNP, VBD-AUX, VBG, NN, IN, DT, NN, WRB, PRP, VBD, DT, NN, VBG, CC, VBG, ., PRP, VBD-AUX, RB, JJ, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [punct->15, nsubj->0, aux->1, dobj->3, nmod:in->6], [], [], [], [case->4, det->5, acl:relcl->9], [], [], [advmod->7, nsubj->8, dobj->11], [], [det->10, acl->12, acl->14], [cc->13, conj:and->14], [], [], [], [], [], [], [advmod->18, punct->20, nsubj->16, cop->17], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: When person B hear person C and person C is making noise, person B might be annoyed or person C might be annoying. If person B is humming and whistling, person B is making noise. {
    Tokens: [when, person, b, hear, person, c, and, person, c, is, making, noise, ,, person, b, might, be, annoyed, or, person, c, might, be, annoying, ., if, person, b, is, humming, and, whistling, ,, person, b, is, making, noise, .]
    Lemmatized tokens: [when, person, b, hear, person, c, and, person, c, be, make, noise, ,, person, b, might, be, annoyed, or, person, c, might, be, annoying, ., if, person, b, be, hum, and, whistle, ,, person, b, be, make, noise, .]
    POS tags: [WRB, NN, NN, VBP, NN, NN, CC, NN, NN, VBD-AUX, VBG, NN, ,, NN, NN, VBD-AUX, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, VBD-AUX, JJ, ., IN, NN, NN, VBD-AUX, VBG, CC, VBG, ,, NN, NN, VBD-AUX, VBG, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [advmod->0, nsubj->2, ccomp->10], [], [compound->4, cc->6, conj:and->8], [], [], [compound->7], [], [nsubj->5, nsubj->8, aux->9, dobj->11], [], [], [], [compound->13], [], [], [aux->15, cop->16, cc->18, advcl->3, conj:or->23, punct->24, punct->12, nsubj->14], [], [], [compound->19], [], [], [nsubj->20, aux->21, cop->22], [], [], [], [compound->26], [], [nsubj->27, aux->28, cc->30, conj:and->31, mark->25], [], [nsubj->27], [], [], [compound->33], [], [advcl->29, advcl->31, punct->32, nsubj->34, aux->35, dobj->37, punct->38], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was annoying {
    Tokens: [who, was, annoying]
    Lemmatized tokens: [who, be, annoying]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: John was jogging through the park when he saw a man juggling watermelons. He was very impressed. {
    Tokens: [john, was, jogging, through, the, park, when, he, saw, a, man, juggling, watermelons, ., he, was, very, impressed, .]
    Lemmatized tokens: [John, be, jogging, through, the, park, when, he, see, a, man, juggle, watermelon, ., he, be, very, impressed, .]
    POS tags: [NNP, VBD-AUX, NN, IN, DT, NN, WRB, PRP, VBD, DT, NN, VBG, NNS, ., PRP, VBD-AUX, RB, JJ, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1, nmod:through->5, punct->13], [], [], [case->3, det->4, acl:relcl->8], [], [], [advmod->6, nsubj->7, dobj->10, xcomp->11], [], [det->9], [dobj->12], [], [], [], [], [], [advmod->16, punct->18, nsubj->14, cop->15], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B sees person C doing something, person B might be impressed and person C might be impressive. {
    Tokens: [if, person, b, sees, person, c, doing, something, ,, person, b, might, be, impressed, and, person, c, might, be, impressive, .]
    Lemmatized tokens: [if, person, b, see, person, c, do, something, ,, person, b, might, be, impressed, and, person, c, might, be, impressive, .]
    POS tags: [IN, NN, NN, VBZ, NN, NN, VBG, NN, ,, NN, NN, VBD-AUX, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5], [], [compound->4, acl->6], [dobj->7], [], [], [], [compound->9], [], [], [advcl->3, conj:and->19, punct->20, punct->8, nsubj->10, aux->11, cop->12, cc->14], [], [], [compound->15], [], [], [nsubj->16, aux->17, cop->18], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was impressed {
    Tokens: [who, was, impressed]
    Lemmatized tokens: [who, be, impressed]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: John was jogging through the park when he saw a man juggling watermelons. He was very impressive. {
    Tokens: [john, was, jogging, through, the, park, when, he, saw, a, man, juggling, watermelons, ., he, was, very, impressive, .]
    Lemmatized tokens: [John, be, jogging, through, the, park, when, he, see, a, man, juggle, watermelon, ., he, be, very, impressive, .]
    POS tags: [NNP, VBD-AUX, NN, IN, DT, NN, WRB, PRP, VBD, DT, NN, VBG, NNS, ., PRP, VBD-AUX, RB, JJ, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1, nmod:through->5, punct->13], [], [], [case->3, det->4, acl:relcl->8], [], [], [advmod->6, nsubj->7, dobj->10, xcomp->11], [], [det->9], [dobj->12], [], [], [], [], [], [advmod->16, punct->18, nsubj->14, cop->15], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B sees person C doing something, person B might be impressed and person C might be impressive. {
    Tokens: [if, person, b, sees, person, c, doing, something, ,, person, b, might, be, impressed, and, person, c, might, be, impressive, .]
    Lemmatized tokens: [if, person, b, see, person, c, do, something, ,, person, b, might, be, impressed, and, person, c, might, be, impressive, .]
    POS tags: [IN, NN, NN, VBZ, NN, NN, VBG, NN, ,, NN, NN, VBD-AUX, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5], [], [compound->4, acl->6], [dobj->7], [], [], [], [compound->9], [], [], [advcl->3, conj:and->19, punct->20, punct->8, nsubj->10, aux->11, cop->12, cc->14], [], [], [compound->15], [], [], [nsubj->16, aux->17, cop->18], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was impressive {
    Tokens: [who, was, impressive]
    Lemmatized tokens: [who, be, impressive]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Bob collapsed on the sidewalk. Soon he saw Carl coming to help. He was very ill. {
    Tokens: [bob, collapsed, on, the, sidewalk, ., soon, he, saw, carl, coming, to, help, ., he, was, very, ill, .]
    Lemmatized tokens: [Bob, collapse, on, the, sidewalk, ., soon, he, see, Carl, come, to, help, ., he, be, very, ill, .]
    POS tags: [NNP, VBD, IN, DT, NN, ., RB, PRP, VBD, NNP, VBG, TO, VB, ., PRP, VBD-AUX, RB, RB, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:on->4, punct->5], [], [], [case->2, det->3], [], [], [], [dobj->9, punct->13, advmod->6, nsubj->7], [acl->10], [xcomp->12], [], [mark->11], [], [], [], [], [nsubj->14, cop->15, advmod->16, punct->18], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B collapses, person B is ill. If person C helps person B, person C is concerned. If person B sees person C coming to help, person C helps person B. {
    Tokens: [if, person, b, collapses, ,, person, b, is, ill, ., if, person, c, helps, person, b, ,, person, c, is, concerned, ., if, person, b, sees, person, c, coming, to, help, ,, person, c, helps, person, b.]
    Lemmatized tokens: [if, person, b, collapse, ,, person, b, be, ill, ., if, person, c, help, person, b, ,, person, c, be, concern, ., if, person, b, see, person, c, come, to, help, ,, person, c, help, person, B.]
    POS tags: [IN, NN, NN, VBZ, ,, NN, NN, VBD-AUX, RB, ., IN, NN, NN, VBZ, NN, NN, ,, NN, NN, VBD-AUX, VBN, ., IN, NN, NN, VBZ, NN, NN, VBG, TO, VB, ,, NN, NN, VBZ, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2], [], [], [compound->5], [], [advcl->3, punct->4, nsubj->6, cop->7, punct->9], [], [], [], [compound->11], [nsubj->12, dobj->15, mark->10], [], [compound->14], [], [], [compound->17], [], [advcl->13, punct->16, nsubjpass->18, auxpass->19, punct->21], [], [], [], [compound->23], [dobj->27, mark->22, nsubj->24], [], [acl->28, compound->26], [xcomp->30], [], [mark->29], [], [], [compound->32], [punct->31, nsubj->33, dobj->36, advcl->25], [], [compound->35]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was ill {
    Tokens: [who, was, ill]
    Lemmatized tokens: [who, be, ill]
    POS tags: [WP, VBD-AUX, NNP]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[cop->1, nsubj->2], [], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Bob collapsed on the sidewalk. Soon he saw Carl coming to help. He was very concerned. {
    Tokens: [bob, collapsed, on, the, sidewalk, ., soon, he, saw, carl, coming, to, help, ., he, was, very, concerned, .]
    Lemmatized tokens: [Bob, collapse, on, the, sidewalk, ., soon, he, see, Carl, come, to, help, ., he, be, very, concerned, .]
    POS tags: [NNP, VBD, IN, DT, NN, ., RB, PRP, VBD, NNP, VBG, TO, VB, ., PRP, VBD-AUX, RB, JJ, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:on->4, punct->5], [], [], [case->2, det->3], [], [], [], [dobj->9, punct->13, advmod->6, nsubj->7], [acl->10], [xcomp->12], [], [mark->11], [], [], [], [], [nsubj->14, cop->15, advmod->16, punct->18], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B collapses, person B is ill. If person C helps person B, person C is concerned. If person B sees person C coming to help, person C helps person B. {
    Tokens: [if, person, b, collapses, ,, person, b, is, ill, ., if, person, c, helps, person, b, ,, person, c, is, concerned, ., if, person, b, sees, person, c, coming, to, help, ,, person, c, helps, person, b.]
    Lemmatized tokens: [if, person, b, collapse, ,, person, b, be, ill, ., if, person, c, help, person, b, ,, person, c, be, concern, ., if, person, b, see, person, c, come, to, help, ,, person, c, help, person, B.]
    POS tags: [IN, NN, NN, VBZ, ,, NN, NN, VBD-AUX, RB, ., IN, NN, NN, VBZ, NN, NN, ,, NN, NN, VBD-AUX, VBN, ., IN, NN, NN, VBZ, NN, NN, VBG, TO, VB, ,, NN, NN, VBZ, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2], [], [], [compound->5], [], [advcl->3, punct->4, nsubj->6, cop->7, punct->9], [], [], [], [compound->11], [nsubj->12, dobj->15, mark->10], [], [compound->14], [], [], [compound->17], [], [advcl->13, punct->16, nsubjpass->18, auxpass->19, punct->21], [], [], [], [compound->23], [dobj->27, mark->22, nsubj->24], [], [acl->28, compound->26], [xcomp->30], [], [mark->29], [], [], [compound->32], [punct->31, nsubj->33, dobj->36, advcl->25], [], [compound->35]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was concerned {
    Tokens: [who, was, concerned]
    Lemmatized tokens: [who, be, concern]
    POS tags: [WP, VBD-AUX, VBN]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubjpass->0, auxpass->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Sam and Amy are passionately in love, but Amy's parents are unhappy about it, because they are snobs. {
    Tokens: [sam, and, amy, are, passionately, in, love, ,, but, amy, 's, parents, are, unhappy, about, it, ,, because, they, are, snobs, .]
    Lemmatized tokens: [Sam, and, Amy, be, passionately, in, love, ,, but, Amy, 's, parent, be, unhappy, about, it, ,, because, they, be, snob, .]
    POS tags: [NNP, CC, NNP, VBD-AUX, RB, IN, NN, ,, CC, NNP, POS, NNS, VBD-AUX, JJ, IN, PRP, ,, IN, PRP, VBD-AUX, NNS, .]
    NER tags: [PERSON, O, PERSON, O, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[cc->1, conj:and->2], [], [], [nsubj->0, nsubj->2, advmod->4, punct->21, punct->7, cc->8, conj:but->13], [nmod:in->6], [], [case->5], [], [], [case->10], [], [nmod:poss->9], [], [nmod:about->15, punct->16, advcl->20, nsubj->11, cop->12], [], [case->14], [], [], [], [], [mark->17, nsubj->18, cop->19], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B and person C are in love and they are young, person B’s parents might be unhappy and person C’s parents might be unhappy. If person B and person C are in love and parents are snobs, parents might be unhappy. {
    Tokens: [if, person, b, and, person, c, are, in, love, and, they, are, young, ,, person, b, 's, parents, might, be, unhappy, and, person, c, 's, parents, might, be, unhappy, ., if, person, b, and, person, c, are, in, love, and, parents, are, snobs, ,, parents, might, be, unhappy, .]
    Lemmatized tokens: [if, person, b, and, person, c, be, in, love, and, they, be, young, ,, person, b, 's, parent, might, be, unhappy, and, person, c, 's, parent, might, be, unhappy, ., if, person, b, and, person, c, be, in, love, and, parent, be, snob, ,, parent, might, be, unhappy, .]
    POS tags: [IN, NN, NN, CC, NN, NN, VBD-AUX, IN, NN, CC, PRP, VBD-AUX, JJ, ,, NN, NN, POS, NNS, VBD-AUX, VBD-AUX, JJ, CC, NN, NN, POS, NNS, VBD-AUX, VBD-AUX, JJ, ., IN, NN, NN, CC, NN, NN, VBD-AUX, IN, NN, CC, NNS, VBD-AUX, NNS, ,, NNS, VBD-AUX, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1, cc->3, conj:and->5], [], [], [compound->4], [], [], [mark->0, nsubj->2, nsubj->5, cop->6, case->7, cc->9, conj:and->12], [], [], [], [nsubj->10, cop->11], [], [], [case->16, compound->14], [], [nmod:poss->15], [], [], [nsubj->17, aux->18, cop->19, cc->21, advcl:in->8, advcl:in->12, conj:and->28, punct->13, punct->29], [], [], [compound->22, case->24], [], [nmod:poss->23], [], [], [nsubj->25, aux->26, cop->27], [], [], [], [cc->33, conj:and->35, compound->31], [], [], [compound->34], [], [], [nsubj->32, nsubj->35, cop->36, case->37, cc->39, conj:and->42, mark->30], [], [], [], [nsubj->40, cop->41], [], [], [], [], [punct->48, advcl:in->38, advcl:in->42, punct->43, nsubj->44, aux->45, cop->46], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who are snobs {
    Tokens: [who, are, snobs]
    Lemmatized tokens: [who, be, snob]
    POS tags: [WP, VBD-AUX, NNS]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[cop->1, nsubj->2], [], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Sam and Amy are passionately in love, but Amy's parents are unhappy about it, because they are fifteen. {
    Tokens: [sam, and, amy, are, passionately, in, love, ,, but, amy, 's, parents, are, unhappy, about, it, ,, because, they, are, fifteen, .]
    Lemmatized tokens: [Sam, and, Amy, be, passionately, in, love, ,, but, Amy, 's, parent, be, unhappy, about, it, ,, because, they, be, fifteen, .]
    POS tags: [NNP, CC, NNP, VBD-AUX, RB, IN, NN, ,, CC, NNP, POS, NNS, VBD-AUX, JJ, IN, PRP, ,, IN, PRP, VBD-AUX, CD, .]
    NER tags: [PERSON, O, PERSON, O, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O, O, NUMBER, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 15.0, null]
    Dependency children: [[cc->1, conj:and->2], [], [], [nsubj->0, nsubj->2, advmod->4, punct->21, punct->7, cc->8, conj:but->13], [nmod:in->6], [], [case->5], [], [], [case->10], [], [nmod:poss->9], [], [nmod:about->15, punct->16, advcl->20, nsubj->11, cop->12], [], [case->14], [], [], [], [], [mark->17, nsubj->18, cop->19], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B and person C are in love and they are young, person B’s parents might be unhappy and person C’s parents might be unhappy. If person B and person C are in love and parents are snobs, parents might be unhappy. {
    Tokens: [if, person, b, and, person, c, are, in, love, and, they, are, young, ,, person, b, 's, parents, might, be, unhappy, and, person, c, 's, parents, might, be, unhappy, ., if, person, b, and, person, c, are, in, love, and, parents, are, snobs, ,, parents, might, be, unhappy, .]
    Lemmatized tokens: [if, person, b, and, person, c, be, in, love, and, they, be, young, ,, person, b, 's, parent, might, be, unhappy, and, person, c, 's, parent, might, be, unhappy, ., if, person, b, and, person, c, be, in, love, and, parent, be, snob, ,, parent, might, be, unhappy, .]
    POS tags: [IN, NN, NN, CC, NN, NN, VBD-AUX, IN, NN, CC, PRP, VBD-AUX, JJ, ,, NN, NN, POS, NNS, VBD-AUX, VBD-AUX, JJ, CC, NN, NN, POS, NNS, VBD-AUX, VBD-AUX, JJ, ., IN, NN, NN, CC, NN, NN, VBD-AUX, IN, NN, CC, NNS, VBD-AUX, NNS, ,, NNS, VBD-AUX, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1, cc->3, conj:and->5], [], [], [compound->4], [], [], [mark->0, nsubj->2, nsubj->5, cop->6, case->7, cc->9, conj:and->12], [], [], [], [nsubj->10, cop->11], [], [], [case->16, compound->14], [], [nmod:poss->15], [], [], [nsubj->17, aux->18, cop->19, cc->21, advcl:in->8, advcl:in->12, conj:and->28, punct->13, punct->29], [], [], [compound->22, case->24], [], [nmod:poss->23], [], [], [nsubj->25, aux->26, cop->27], [], [], [], [cc->33, conj:and->35, compound->31], [], [], [compound->34], [], [], [nsubj->32, nsubj->35, cop->36, case->37, cc->39, conj:and->42, mark->30], [], [], [], [nsubj->40, cop->41], [], [], [], [], [punct->48, advcl:in->38, advcl:in->42, punct->43, nsubj->44, aux->45, cop->46], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who are fifteen {
    Tokens: [who, are, fifteen]
    Lemmatized tokens: [who, be, fifteen]
    POS tags: [WP, VBD-AUX, CD]
    NER tags: [O, O, NUMBER]
    NER values: [null, null, 15.0]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Mark told Pete many lies about himself, which Pete included in his book. He should have been more truthful. {
    Tokens: [mark, told, pete, many, lies, about, himself, ,, which, pete, included, in, his, book, ., he, should, have, been, more, truthful, .]
    Lemmatized tokens: [Mark, tell, Pete, many, lie, about, himself, ,, which, Pete, include, in, he, book, ., he, should, have, be, more, truthful, .]
    POS tags: [NNP, VBD, NNP, JJ, NNS, IN, PRP, ,, WDT, NNP, VBD, IN, PRP$, NN, ., PRP, VBD-AUX, VBD-AUX, VBD-AUX, RBR, JJ, .]
    NER tags: [O, O, PERSON, O, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->4, nmod:about->6, punct->7, ccomp->10, punct->14], [], [], [compound->2, amod->3], [], [case->5], [], [], [], [dobj->8, nsubj->9, nmod:in->13], [], [], [case->11, nmod:poss->12], [], [], [], [], [], [], [aux->17, cop->18, advmod->19, punct->21, nsubj->15, aux->16], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B tells person C lies, person B should be truthful and person C should be skeptical. {
    Tokens: [if, person, b, tells, person, c, lies, ,, person, b, should, be, truthful, and, person, c, should, be, skeptical, .]
    Lemmatized tokens: [if, person, b, tell, person, c, lie, ,, person, b, should, be, truthful, and, person, c, should, be, skeptical, .]
    POS tags: [IN, NN, NN, VBZ, NN, NN, VBZ, ,, NN, NN, VBD-AUX, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, ccomp->6], [], [compound->4], [nsubj->5], [], [], [compound->8], [], [], [conj:and->18, advcl->3, punct->19, punct->7, nsubj->9, aux->10, cop->11, cc->13], [], [], [compound->14], [], [], [nsubj->15, aux->16, cop->17], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who should have been more truthful {
    Tokens: [who, should, have, been, more, truthful]
    Lemmatized tokens: [who, should, have, be, more, truthful]
    POS tags: [WP, VBD-AUX, VBD-AUX, VBD-AUX, RBR, JJ]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [], [nsubj->0, aux->1, aux->2, cop->3, advmod->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Mark told Pete many lies about himself, which Pete included in his book. He should have been more skeptical. {
    Tokens: [mark, told, pete, many, lies, about, himself, ,, which, pete, included, in, his, book, ., he, should, have, been, more, skeptical, .]
    Lemmatized tokens: [Mark, tell, Pete, many, lie, about, himself, ,, which, Pete, include, in, he, book, ., he, should, have, be, more, skeptical, .]
    POS tags: [NNP, VBD, NNP, JJ, NNS, IN, PRP, ,, WDT, NNP, VBD, IN, PRP$, NN, ., PRP, VBD-AUX, VBD-AUX, VBD-AUX, RBR, JJ, .]
    NER tags: [O, O, PERSON, O, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->4, nmod:about->6, punct->7, ccomp->10, punct->14], [], [], [compound->2, amod->3], [], [case->5], [], [], [], [dobj->8, nsubj->9, nmod:in->13], [], [], [case->11, nmod:poss->12], [], [], [], [], [], [], [aux->17, cop->18, advmod->19, punct->21, nsubj->15, aux->16], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B tells person C lies, person B should be truthful and person C should be skeptical. {
    Tokens: [if, person, b, tells, person, c, lies, ,, person, b, should, be, truthful, and, person, c, should, be, skeptical, .]
    Lemmatized tokens: [if, person, b, tell, person, c, lie, ,, person, b, should, be, truthful, and, person, c, should, be, skeptical, .]
    POS tags: [IN, NN, NN, VBZ, NN, NN, VBZ, ,, NN, NN, VBD-AUX, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, ccomp->6], [], [compound->4], [nsubj->5], [], [], [compound->8], [], [], [conj:and->18, advcl->3, punct->19, punct->7, nsubj->9, aux->10, cop->11, cc->13], [], [], [compound->14], [], [], [nsubj->15, aux->16, cop->17], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who should have been more skeptical {
    Tokens: [who, should, have, been, more, skeptical]
    Lemmatized tokens: [who, should, have, be, more, skeptical]
    POS tags: [WP, VBD-AUX, VBD-AUX, VBD-AUX, RBR, JJ]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [], [nsubj->0, aux->1, aux->2, cop->3, advmod->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Joe has sold his house and bought a new one a few miles away. He will be moving out of it on Thursday. {
    Tokens: [joe, has, sold, his, house, and, bought, a, new, one, a, few, miles, away, ., he, will, be, moving, out, of, it, on, thursday, .]
    Lemmatized tokens: [Joe, have, sell, he, house, and, buy, a, new, one, a, few, mile, away, ., he, will, be, move, out, of, it, on, Thursday, .]
    POS tags: [NNP, VBD-AUX, VBN, PRP$, NN, CC, VBD, DT, JJ, CD, DT, JJ, NNS, RB, ., PRP, VBD-AUX, VBD-AUX, VBG, IN, IN, PRP, IN, NNP, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, NUMBER, O, O, O, O, O, O, O, O, O, O, O, O, O, DATE, O]
    NER values: [null, null, null, null, null, null, null, null, null, 1.0, null, null, null, null, null, null, null, null, null, null, null, null, null, XXXX-WXX-4, null]
    Dependency children: [[], [], [nsubj->0, aux->1, dobj->4, cc->5, conj:and->6, punct->14], [], [nmod:poss->3], [], [nsubj->0, dobj->9, advmod->13], [], [], [det->7, amod->8], [], [], [det->10, amod->11], [nmod:npmod->12], [], [], [], [], [aux->17, nmod:out_of->21, nmod:on->23, punct->24, nsubj->15, aux->16], [mwe->20], [], [case->19], [], [case->22], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If somebody sells his house B and buys a house C, he might move out of house B and move into house C. {
    Tokens: [if, somebody, sells, his, house, b, and, buys, a, house, c, ,, he, might, move, out, of, house, b, and, move, into, house, c.]
    Lemmatized tokens: [if, somebody, sell, he, house, b, and, buy, a, house, c, ,, he, might, move, out, of, house, b, and, move, into, house, C.]
    POS tags: [IN, NN, VBZ, PRP$, NN, NN, CC, VBZ, DT, NNP, NN, ,, PRP, VBD-AUX, VB, IN, IN, NNP, NN, CC, VB, IN, NNP, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [mark->0, nsubj->1, dobj->5, cc->6, conj:and->7], [], [], [nmod:poss->3, compound->4], [], [nsubj->1, dobj->10], [], [], [det->8, compound->9], [], [], [], [compound:prt->15, advcl->2, nmod:of->18, cc->19, conj:and->20, advcl->7, punct->11, nsubj->12, aux->13], [], [], [], [case->16, compound->17], [], [nmod:into->23, nsubj->12], [], [], [case->21, compound->22]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Which house will he be moving out of {
    Tokens: [which, house, will, he, be, moving, out, of]
    Lemmatized tokens: [which, house, will, he, be, move, out, of]
    POS tags: [WDT, NNP, VBD-AUX, PRP, VBD-AUX, VBG, IN, IN]
    NER tags: [O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [], [], [dobj->1, aux->2, nsubj->3, aux->4, compound:prt->6, nmod->7], [], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Joe has sold his house and bought a new one a few miles away. He will be moving into it on Thursday. {
    Tokens: [joe, has, sold, his, house, and, bought, a, new, one, a, few, miles, away, ., he, will, be, moving, into, it, on, thursday, .]
    Lemmatized tokens: [Joe, have, sell, he, house, and, buy, a, new, one, a, few, mile, away, ., he, will, be, move, into, it, on, Thursday, .]
    POS tags: [NNP, VBD-AUX, VBN, PRP$, NN, CC, VBD, DT, JJ, CD, DT, JJ, NNS, RB, ., PRP, VBD-AUX, VBD-AUX, VBG, IN, PRP, IN, NNP, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, NUMBER, O, O, O, O, O, O, O, O, O, O, O, O, DATE, O]
    NER values: [null, null, null, null, null, null, null, null, null, 1.0, null, null, null, null, null, null, null, null, null, null, null, null, XXXX-WXX-4, null]
    Dependency children: [[], [], [nsubj->0, aux->1, dobj->4, cc->5, conj:and->6, punct->14], [], [nmod:poss->3], [], [nsubj->0, dobj->9, advmod->13], [], [], [det->7, amod->8], [], [], [det->10, amod->11], [nmod:npmod->12], [], [], [], [], [aux->17, nmod:into->20, nmod:on->22, punct->23, nsubj->15, aux->16], [], [case->19], [], [case->21], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If somebody sells his house B and buys a house C, he might move out of house B and move into house C. {
    Tokens: [if, somebody, sells, his, house, b, and, buys, a, house, c, ,, he, might, move, out, of, house, b, and, move, into, house, c.]
    Lemmatized tokens: [if, somebody, sell, he, house, b, and, buy, a, house, c, ,, he, might, move, out, of, house, b, and, move, into, house, C.]
    POS tags: [IN, NN, VBZ, PRP$, NN, NN, CC, VBZ, DT, NNP, NN, ,, PRP, VBD-AUX, VB, IN, IN, NNP, NN, CC, VB, IN, NNP, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [mark->0, nsubj->1, dobj->5, cc->6, conj:and->7], [], [], [nmod:poss->3, compound->4], [], [nsubj->1, dobj->10], [], [], [det->8, compound->9], [], [], [], [compound:prt->15, advcl->2, nmod:of->18, cc->19, conj:and->20, advcl->7, punct->11, nsubj->12, aux->13], [], [], [], [case->16, compound->17], [], [nmod:into->23, nsubj->12], [], [], [case->21, compound->22]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Which house will he be moving into {
    Tokens: [which, house, will, he, be, moving, into]
    Lemmatized tokens: [which, house, will, he, be, move, into]
    POS tags: [WDT, NNP, VBD-AUX, PRP, VBD-AUX, VBG, IN]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [], [], [dobj->1, aux->2, nsubj->3, aux->4, nmod->6], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Many people start to read Paul's books and can't put them down. They are gripped because Paul writes so well. {
    Tokens: [many, people, start, to, read, paul, 's, books, and, ca, n't, put, them, down, ., they, are, gripped, because, paul, writes, so, well, .]
    Lemmatized tokens: [many, people, start, to, read, Paul, 's, book, and, can, not, put, they, down, ., they, be, grip, because, Paul, write, so, well, .]
    POS tags: [JJ, NNS, VBP, TO, VB, NNP, POS, NNS, CC, MD, RB, VB, PRP, RP, ., PRP, VBD-AUX, VBN, IN, NNP, VBZ, RB, RB, .]
    NER tags: [O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, PERSON, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [amod->0], [nsubj->1, xcomp->4, cc->8, conj:and->11, punct->14], [], [mark->3, dobj->7], [case->6], [], [nmod:poss->5], [], [], [], [nsubj->1, aux->9, neg->10, dobj->12, compound:prt->13], [], [], [], [], [], [advcl->20, punct->23, nsubjpass->15, auxpass->16], [], [], [mark->18, nsubj->19, advmod->22], [], [advmod->21], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B reads thing C, person B might be gripped or thing C might be popular. {
    Tokens: [if, person, b, reads, thing, c, ,, person, b, might, be, gripped, or, thing, c, might, be, popular, .]
    Lemmatized tokens: [if, person, b, read, thing, c, ,, person, b, might, be, grip, or, thing, c, might, be, popular, .]
    POS tags: [IN, NN, NN, VBZ, NN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, CC, NN, NN, VBD-AUX, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5], [], [compound->4], [], [], [compound->7], [], [], [conj:or->17, punct->18, advcl->3, punct->6, nsubjpass->8, aux->9, auxpass->10, cc->12], [], [], [compound->13], [], [], [aux->15, cop->16, nsubj->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who or what are gripped {
    Tokens: [who, or, what, are, gripped]
    Lemmatized tokens: [who, or, what, be, grip]
    POS tags: [WP, CC, WP, VBD-AUX, VBN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[cc->1, conj:or->4], [], [], [], [nsubjpass->2, auxpass->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Many people start to read Paul's books and can't put them down. They are popular because Paul writes so well. {
    Tokens: [many, people, start, to, read, paul, 's, books, and, ca, n't, put, them, down, ., they, are, popular, because, paul, writes, so, well, .]
    Lemmatized tokens: [many, people, start, to, read, Paul, 's, book, and, can, not, put, they, down, ., they, be, popular, because, Paul, write, so, well, .]
    POS tags: [JJ, NNS, VBP, TO, VB, NNP, POS, NNS, CC, MD, RB, VB, PRP, RP, ., PRP, VBD-AUX, JJ, IN, NNP, VBZ, RB, RB, .]
    NER tags: [O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, PERSON, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [amod->0], [nsubj->1, xcomp->4, cc->8, conj:and->11, punct->14], [], [mark->3, dobj->7], [case->6], [], [nmod:poss->5], [], [], [], [nsubj->1, aux->9, neg->10, dobj->12, compound:prt->13], [], [], [], [], [], [ccomp->20, punct->23, nsubj->15, cop->16], [], [], [mark->18, nsubj->19, advmod->22], [], [advmod->21], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B reads thing C, person B might be gripped or thing C might be popular. {
    Tokens: [if, person, b, reads, thing, c, ,, person, b, might, be, gripped, or, thing, c, might, be, popular, .]
    Lemmatized tokens: [if, person, b, read, thing, c, ,, person, b, might, be, grip, or, thing, c, might, be, popular, .]
    POS tags: [IN, NN, NN, VBZ, NN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, CC, NN, NN, VBD-AUX, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5], [], [compound->4], [], [], [compound->7], [], [], [conj:or->17, punct->18, advcl->3, punct->6, nsubjpass->8, aux->9, auxpass->10, cc->12], [], [], [compound->13], [], [], [aux->15, cop->16, nsubj->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who or what are popular {
    Tokens: [who, or, what, are, popular]
    Lemmatized tokens: [who, or, what, be, popular]
    POS tags: [WP, CC, WP, VBD-AUX, JJ]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[cc->1, conj:or->4], [], [], [], [nsubj->2, cop->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Mary took out her flute and played one of her favorite pieces. She has loved it since she was a child. {
    Tokens: [mary, took, out, her, flute, and, played, one, of, her, favorite, pieces, ., she, has, loved, it, since, she, was, a, child, .]
    Lemmatized tokens: [Mary, take, out, she, flute, and, play, one, of, she, favorite, piece, ., she, have, love, it, since, she, be, a, child, .]
    POS tags: [NNP, VBD, RP, PRP$, NN, CC, VBD, CD, IN, PRP$, JJ, NNS, ., PRP, VBD-AUX, VBN, PRP, IN, PRP, VBD-AUX, DT, NN, .]
    NER tags: [PERSON, O, O, O, O, O, O, NUMBER, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, 1.0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, compound:prt->2, dobj->4, cc->5, conj:and->6, punct->12], [], [], [nmod:poss->3], [], [nsubj->0, dobj->7], [nmod:of->11], [], [], [], [case->8, nmod:poss->9, amod->10], [], [], [], [dobj->16, advcl->21, punct->22, nsubj->13, aux->14], [], [], [], [], [], [mark->17, nsubj->18, cop->19, det->20], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is somebody’s favorite, he loves thing B. If somebody takes out thing B, he has thing B. {
    Tokens: [if, thing, b, is, somebody, 's, favorite, ,, he, loves, thing, b, ., if, somebody, takes, out, thing, b, ,, he, has, thing, b.]
    Lemmatized tokens: [if, thing, b, be, somebody, 's, favorite, ,, he, love, thing, b, ., if, somebody, take, out, thing, b, ,, he, have, thing, B.]
    POS tags: [IN, NN, NN, VBD-AUX, NN, POS, JJ, ,, PRP, VBZ, NN, NN, ., IN, NN, VBZ, RP, NN, NN, ,, PRP, VBD-AUX, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3, case->5, amod->6], [], [], [], [], [advcl:'s->4, punct->7, nsubj->8, dobj->11, punct->12], [], [compound->10], [], [], [], [compound:prt->16, dobj->18, mark->13, nsubj->14], [], [], [compound->17], [], [], [advcl->15, punct->19, nsubj->20, dobj->23], [], [compound->22]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What has Mary loved since she was a child {
    Tokens: [what, has, mary, loved, since, she, was, a, child]
    Lemmatized tokens: [what, have, Mary, love, since, she, be, a, child]
    POS tags: [WDT, VBD-AUX, NNP, VBD, IN, PRP, VBD-AUX, DT, NN]
    NER tags: [O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2], [acl:relcl->3], [advcl->8], [], [], [], [], [mark->4, nsubj->5, cop->6, det->7]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Mary took out her flute and played one of her favorite pieces. She has had it since she was a child. {
    Tokens: [mary, took, out, her, flute, and, played, one, of, her, favorite, pieces, ., she, has, had, it, since, she, was, a, child, .]
    Lemmatized tokens: [Mary, take, out, she, flute, and, play, one, of, she, favorite, piece, ., she, have, have, it, since, she, be, a, child, .]
    POS tags: [NNP, VBD, RP, PRP$, NN, CC, VBD, CD, IN, PRP$, JJ, NNS, ., PRP, VBD-AUX, VBD-AUX, PRP, IN, PRP, VBD-AUX, DT, NN, .]
    NER tags: [PERSON, O, O, O, O, O, O, NUMBER, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, 1.0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, compound:prt->2, dobj->4, cc->5, conj:and->6, punct->12], [], [], [nmod:poss->3], [], [nsubj->0, dobj->7], [nmod:of->11], [], [], [], [case->8, nmod:poss->9, amod->10], [], [], [], [dobj->16, punct->22, nsubj->13, aux->14], [acl->21], [], [], [], [], [mark->17, nsubj->18, cop->19, det->20], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is somebody’s favorite, he loves thing B. If somebody takes out thing B, he has thing B. {
    Tokens: [if, thing, b, is, somebody, 's, favorite, ,, he, loves, thing, b, ., if, somebody, takes, out, thing, b, ,, he, has, thing, b.]
    Lemmatized tokens: [if, thing, b, be, somebody, 's, favorite, ,, he, love, thing, b, ., if, somebody, take, out, thing, b, ,, he, have, thing, B.]
    POS tags: [IN, NN, NN, VBD-AUX, NN, POS, JJ, ,, PRP, VBZ, NN, NN, ., IN, NN, VBZ, RP, NN, NN, ,, PRP, VBD-AUX, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3, case->5, amod->6], [], [], [], [], [advcl:'s->4, punct->7, nsubj->8, dobj->11, punct->12], [], [compound->10], [], [], [], [compound:prt->16, dobj->18, mark->13, nsubj->14], [], [], [compound->17], [], [], [advcl->15, punct->19, nsubj->20, dobj->23], [], [compound->22]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What has Mary had since she was a child {
    Tokens: [what, has, mary, had, since, she, was, a, child]
    Lemmatized tokens: [what, have, Mary, have, since, she, be, a, child]
    POS tags: [WDT, VBD-AUX, NNP, VBD-AUX, IN, PRP, VBD-AUX, DT, NN]
    NER tags: [O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2], [acl:relcl->3], [advcl->8], [], [], [], [], [mark->4, nsubj->5, cop->6, det->7]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Sam pulled up a chair to the piano, but it was broken, so he had to stand instead. {
    Tokens: [sam, pulled, up, a, chair, to, the, piano, ,, but, it, was, broken, ,, so, he, had, to, stand, instead, .]
    Lemmatized tokens: [Sam, pull, up, a, chair, to, the, piano, ,, but, it, be, break, ,, so, he, have, to, stand, instead, .]
    POS tags: [NNP, VBD, RP, DT, NN, TO, DT, NN, ,, CC, PRP, VBD-AUX, VBN, ,, IN, PRP, VBD-AUX, TO, VB, RB, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, compound:prt->2, dobj->4, punct->20, nmod:to->7, punct->8, cc->9, conj:but->12], [], [], [det->3], [], [], [case->5, det->6], [], [], [], [], [parataxis->16, nsubjpass->10, auxpass->11, punct->13, dep->14], [], [], [], [nsubj->15, xcomp->18], [], [mark->17, advmod->19], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If chair is broken, somebody has to stand. If instrument is broken, somebody has to sing. Piano is an instrument. {
    Tokens: [if, chair, is, broken, ,, somebody, has, to, stand, ., if, instrument, is, broken, ,, somebody, has, to, sing, ., piano, is, an, instrument, .]
    Lemmatized tokens: [if, chair, be, break, ,, somebody, have, to, stand, ., if, instrument, be, break, ,, somebody, have, to, sing, ., piano, be, a, instrument, .]
    POS tags: [IN, NN, VBD-AUX, VBN, ,, NN, VBD-AUX, TO, VB, ., IN, NN, VBD-AUX, VBN, ,, NN, VBD-AUX, TO, VB, ., NN, VBD-AUX, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [mark->0, nsubjpass->1, auxpass->2], [], [], [advcl->3, punct->4, nsubj->5, xcomp->8, punct->9], [], [mark->7], [], [], [], [], [auxpass->12, mark->10, nsubjpass->11], [], [], [advcl->13, punct->14, nsubj->15, xcomp->18, punct->19], [], [mark->17], [], [], [], [], [nsubj->20, cop->21, det->22, punct->24], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What was broken {
    Tokens: [what, was, broken]
    Lemmatized tokens: [what, be, break]
    POS tags: [WP, VBD-AUX, VBN]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubjpass->0, auxpass->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Sam pulled up a chair to the piano, but it was broken, so he had to sing instead. {
    Tokens: [sam, pulled, up, a, chair, to, the, piano, ,, but, it, was, broken, ,, so, he, had, to, sing, instead, .]
    Lemmatized tokens: [Sam, pull, up, a, chair, to, the, piano, ,, but, it, be, break, ,, so, he, have, to, sing, instead, .]
    POS tags: [NNP, VBD, RP, DT, NN, TO, DT, NN, ,, CC, PRP, VBD-AUX, VBN, ,, IN, PRP, VBD-AUX, TO, VB, RB, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, compound:prt->2, dobj->4, punct->20, nmod:to->7, punct->8, cc->9, conj:but->12], [], [], [det->3], [], [], [case->5, det->6], [], [], [], [], [parataxis->16, nsubjpass->10, auxpass->11, punct->13, dep->14], [], [], [], [nsubj->15, xcomp->18], [], [mark->17, advmod->19], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If chair is broken, somebody has to stand. If instrument is broken, somebody has to sing. Piano is an instrument. {
    Tokens: [if, chair, is, broken, ,, somebody, has, to, stand, ., if, instrument, is, broken, ,, somebody, has, to, sing, ., piano, is, an, instrument, .]
    Lemmatized tokens: [if, chair, be, break, ,, somebody, have, to, stand, ., if, instrument, be, break, ,, somebody, have, to, sing, ., piano, be, a, instrument, .]
    POS tags: [IN, NN, VBD-AUX, VBN, ,, NN, VBD-AUX, TO, VB, ., IN, NN, VBD-AUX, VBN, ,, NN, VBD-AUX, TO, VB, ., NN, VBD-AUX, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [mark->0, nsubjpass->1, auxpass->2], [], [], [advcl->3, punct->4, nsubj->5, xcomp->8, punct->9], [], [mark->7], [], [], [], [], [auxpass->12, mark->10, nsubjpass->11], [], [], [advcl->13, punct->14, nsubj->15, xcomp->18, punct->19], [], [mark->17], [], [], [], [], [nsubj->20, cop->21, det->22, punct->24], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What was broken {
    Tokens: [what, was, broken]
    Lemmatized tokens: [what, be, break]
    POS tags: [WP, VBD-AUX, VBN]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubjpass->0, auxpass->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Since it was raining, I carried the newspaper over my backpack to keep it dry. {
    Tokens: [since, it, was, raining, ,, i, carried, the, newspaper, over, my, backpack, to, keep, it, dry, .]
    Lemmatized tokens: [since, it, be, rain, ,, I, carry, the, newspaper, over, my, backpack, to, keep, it, dry, .]
    POS tags: [IN, PRP, VBD-AUX, VBG, ,, PRP, VBD, DT, NN, IN, PRP$, NN, TO, VB, PRP, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [mark->0, nsubj->1, aux->2], [], [], [punct->16, advcl->3, punct->4, nsubj->5, dobj->8, nmod:over->11], [], [det->7], [], [], [case->9, nmod:poss->10, acl->13], [], [xcomp->15, mark->12], [], [nsubj->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If somebody carries thing B over thing C, thing B is over thing C. If somebody carries thing B in thing C, thing C is over thing B. When it is rainy and thing B is over thing C, thing C is dry. {
    Tokens: [if, somebody, carries, thing, b, over, thing, c, ,, thing, b, is, over, thing, c, ., if, somebody, carries, thing, b, in, thing, c, ,, thing, c, is, over, thing, b, ., when, it, is, rainy, and, thing, b, is, over, thing, c, ,, thing, c, is, dry, .]
    Lemmatized tokens: [if, somebody, carry, thing, b, over, thing, c, ,, thing, b, be, over, thing, c, ., if, somebody, carry, thing, b, in, thing, c, ,, thing, c, be, over, thing, b, ., when, it, be, rainy, and, thing, b, be, over, thing, c, ,, thing, c, be, dry, .]
    POS tags: [IN, NN, VBZ, NN, NN, IN, NN, NN, ,, NN, NN, VBD-AUX, IN, NN, NN, ., IN, NN, VBZ, NN, NN, IN, NN, NN, ,, NN, NN, VBD-AUX, IN, NN, NN, ., WRB, PRP, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, IN, NN, NN, ,, NN, NN, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [mark->0, nsubj->1, dobj->4], [], [compound->3, nmod:over->7], [], [], [case->5, compound->6], [], [], [compound->9], [], [], [], [punct->15, advcl->2, punct->8, nsubj->10, cop->11, case->12, compound->13], [], [], [], [dobj->20, mark->16, nsubj->17], [], [compound->19, nmod:in->23], [], [], [case->21, compound->22], [], [], [compound->25], [], [], [], [advcl->18, punct->24, nsubj->26, cop->27, case->28, compound->29, punct->31], [], [], [], [], [conj:and->42, advmod->32, nsubj->33, cop->34, cc->36], [], [], [compound->37], [], [], [], [nsubj->38, cop->39, case->40, compound->41], [], [], [compound->44], [], [advcl->42, punct->43, nsubj->45, cop->46, punct->48, advcl->35], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What was I trying to keep dry {
    Tokens: [what, was, i, trying, to, keep, dry]
    Lemmatized tokens: [what, be, I, try, to, keep, dry]
    POS tags: [WP, VBD-AUX, PRP, VBG, TO, VB, JJ]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [aux->1, nsubj->2, xcomp->5], [], [dobj->0, mark->4, xcomp->6], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Since it was raining, I carried the newspaper in my backpack to keep it dry. {
    Tokens: [since, it, was, raining, ,, i, carried, the, newspaper, in, my, backpack, to, keep, it, dry, .]
    Lemmatized tokens: [since, it, be, rain, ,, I, carry, the, newspaper, in, my, backpack, to, keep, it, dry, .]
    POS tags: [IN, PRP, VBD-AUX, VBG, ,, PRP, VBD, DT, NN, IN, PRP$, NN, TO, VB, PRP, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [mark->0, nsubj->1, aux->2], [], [], [punct->16, advcl->3, punct->4, nsubj->5, dobj->8, nmod:in->11], [], [det->7], [], [], [case->9, nmod:poss->10, acl->13], [], [xcomp->15, mark->12], [], [nsubj->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If somebody carries thing B over thing C, thing B is over thing C. If somebody carries thing B in thing C, thing C is over thing B. When it is rainy and thing B is over thing C, thing C is dry. {
    Tokens: [if, somebody, carries, thing, b, over, thing, c, ,, thing, b, is, over, thing, c, ., if, somebody, carries, thing, b, in, thing, c, ,, thing, c, is, over, thing, b, ., when, it, is, rainy, and, thing, b, is, over, thing, c, ,, thing, c, is, dry, .]
    Lemmatized tokens: [if, somebody, carry, thing, b, over, thing, c, ,, thing, b, be, over, thing, c, ., if, somebody, carry, thing, b, in, thing, c, ,, thing, c, be, over, thing, b, ., when, it, be, rainy, and, thing, b, be, over, thing, c, ,, thing, c, be, dry, .]
    POS tags: [IN, NN, VBZ, NN, NN, IN, NN, NN, ,, NN, NN, VBD-AUX, IN, NN, NN, ., IN, NN, VBZ, NN, NN, IN, NN, NN, ,, NN, NN, VBD-AUX, IN, NN, NN, ., WRB, PRP, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, IN, NN, NN, ,, NN, NN, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [mark->0, nsubj->1, dobj->4], [], [compound->3, nmod:over->7], [], [], [case->5, compound->6], [], [], [compound->9], [], [], [], [punct->15, advcl->2, punct->8, nsubj->10, cop->11, case->12, compound->13], [], [], [], [dobj->20, mark->16, nsubj->17], [], [compound->19, nmod:in->23], [], [], [case->21, compound->22], [], [], [compound->25], [], [], [], [advcl->18, punct->24, nsubj->26, cop->27, case->28, compound->29, punct->31], [], [], [], [], [conj:and->42, advmod->32, nsubj->33, cop->34, cc->36], [], [], [compound->37], [], [], [], [nsubj->38, cop->39, case->40, compound->41], [], [], [compound->44], [], [advcl->42, punct->43, nsubj->45, cop->46, punct->48, advcl->35], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What was I trying to keep dry {
    Tokens: [what, was, i, trying, to, keep, dry]
    Lemmatized tokens: [what, be, I, try, to, keep, dry]
    POS tags: [WP, VBD-AUX, PRP, VBG, TO, VB, JJ]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [aux->1, nsubj->2, xcomp->5], [], [dobj->0, mark->4, xcomp->6], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Sara borrowed the book from the library because she needs it for an article she is working on. She reads it when she gets home from work. {
    Tokens: [sara, borrowed, the, book, from, the, library, because, she, needs, it, for, an, article, she, is, working, on, ., she, reads, it, when, she, gets, home, from, work, .]
    Lemmatized tokens: [Sara, borrow, the, book, from, the, library, because, she, need, it, for, a, article, she, be, work, on, ., she, read, it, when, she, get, home, from, work, .]
    POS tags: [NNP, VBD, DT, NN, IN, DT, NN, IN, PRP, VBZ, PRP, IN, DT, NN, PRP, VBD-AUX, VBG, IN, ., PRP, VBZ, PRP, WRB, PRP, VBZ, NN, IN, NN, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, punct->18, dobj->3, nmod:from->6, advcl->9], [], [det->2], [], [], [case->4, det->5], [], [], [mark->7, nsubj->8, dobj->10, nmod:for->13], [], [], [], [acl:relcl->16, case->11, det->12], [], [], [aux->15, nmod->17, nsubj->14], [], [], [], [dobj->21, advcl->24, punct->28, nsubj->19], [], [], [], [advmod->22, nsubj->23, dobj->25, nmod:from->27], [], [], [case->26], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B borrows a book, person B can read the book and person B can not write the book.    If person B is working on thing C, person B might write thing C. {
    Tokens: [if, person, b, borrows, a, book, ,, person, b, can, read, the, book, and, person, b, can, not, write, the, book, ., if, person, b, is, working, on, thing, c, ,, person, b, might, write, thing, c.]
    Lemmatized tokens: [if, person, b, borrow, a, book, ,, person, b, can, read, the, book, and, person, b, can, not, write, the, book, ., if, person, b, be, work, on, thing, c, ,, person, b, might, write, thing, c.]
    POS tags: [IN, NN, NN, VBZ, DT, NN, ,, NN, NN, VBD-AUX, VB, DT, NN, CC, NN, NN, VBD-AUX, RB, VB, DT, NN, ., IN, NN, NN, VBD-AUX, VBG, IN, NN, NN, ,, NN, NN, VBD-AUX, VB, NN, JJ]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5], [], [det->4], [], [], [compound->7], [], [ccomp->18, advcl->3, punct->21, punct->6, nsubj->8, aux->9], [], [cc->13, conj:and->14], [], [], [det->11, compound->12, compound->14], [], [], [nsubj->15, aux->16, neg->17, dobj->20], [], [det->19], [], [], [], [compound->23], [], [nsubj->24, aux->25, nmod:on->29, mark->22], [], [], [case->27, compound->28], [], [], [compound->31], [], [advcl->26, punct->30, nsubj->32, aux->33, dobj->35], [amod->36], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What does Sara read when she gets home from work {
    Tokens: [what, does, sara, read, when, she, gets, home, from, work]
    Lemmatized tokens: [what, do, Sara, read, when, she, get, home, from, work]
    POS tags: [WP, VBD-AUX, NNP, VB, WRB, PRP, VBZ, NN, IN, NN]
    NER tags: [O, O, PERSON, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [dobj->0, aux->1, nsubj->2, advcl->6], [], [], [advmod->4, nsubj->5, dobj->7, nmod:from->9], [], [], [case->8]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Sara borrowed the book from the library because she needs it for an article she is working on. She writes it when she gets home from work. {
    Tokens: [sara, borrowed, the, book, from, the, library, because, she, needs, it, for, an, article, she, is, working, on, ., she, writes, it, when, she, gets, home, from, work, .]
    Lemmatized tokens: [Sara, borrow, the, book, from, the, library, because, she, need, it, for, a, article, she, be, work, on, ., she, write, it, when, she, get, home, from, work, .]
    POS tags: [NNP, VBD, DT, NN, IN, DT, NN, IN, PRP, VBZ, PRP, IN, DT, NN, PRP, VBD-AUX, VBG, IN, ., PRP, VBZ, PRP, WRB, PRP, VBZ, NN, IN, NN, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, punct->18, dobj->3, nmod:from->6, advcl->9], [], [det->2], [], [], [case->4, det->5], [], [], [mark->7, nsubj->8, dobj->10, nmod:for->13], [], [], [], [acl:relcl->16, case->11, det->12], [], [], [aux->15, nmod->17, nsubj->14], [], [], [], [dobj->21, advcl->24, punct->28, nsubj->19], [], [], [], [advmod->22, nsubj->23, dobj->25, nmod:from->27], [], [], [case->26], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B borrows a book, person B can read the book and person B can not write the book.    If person B is working on thing C, person B might write thing C. {
    Tokens: [if, person, b, borrows, a, book, ,, person, b, can, read, the, book, and, person, b, can, not, write, the, book, ., if, person, b, is, working, on, thing, c, ,, person, b, might, write, thing, c.]
    Lemmatized tokens: [if, person, b, borrow, a, book, ,, person, b, can, read, the, book, and, person, b, can, not, write, the, book, ., if, person, b, be, work, on, thing, c, ,, person, b, might, write, thing, c.]
    POS tags: [IN, NN, NN, VBZ, DT, NN, ,, NN, NN, VBD-AUX, VB, DT, NN, CC, NN, NN, VBD-AUX, RB, VB, DT, NN, ., IN, NN, NN, VBD-AUX, VBG, IN, NN, NN, ,, NN, NN, VBD-AUX, VB, NN, JJ]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5], [], [det->4], [], [], [compound->7], [], [ccomp->18, advcl->3, punct->21, punct->6, nsubj->8, aux->9], [], [cc->13, conj:and->14], [], [], [det->11, compound->12, compound->14], [], [], [nsubj->15, aux->16, neg->17, dobj->20], [], [det->19], [], [], [], [compound->23], [], [nsubj->24, aux->25, nmod:on->29, mark->22], [], [], [case->27, compound->28], [], [], [compound->31], [], [advcl->26, punct->30, nsubj->32, aux->33, dobj->35], [amod->36], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What does Sara write when she gets home from work {
    Tokens: [what, does, sara, write, when, she, gets, home, from, work]
    Lemmatized tokens: [what, do, Sara, write, when, she, get, home, from, work]
    POS tags: [WP, VBD-AUX, NNP, VB, WRB, PRP, VBZ, NN, IN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [dobj->0, aux->1, nsubj->2, advcl->6], [], [], [advmod->4, nsubj->5, dobj->7, nmod:from->9], [], [], [case->8]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: This morning, Joey built a sand castle on the beach, and put a toy flag in the highest tower, but this afternoon a breeze knocked it down. {
    Tokens: [this, morning, ,, joey, built, a, sand, castle, on, the, beach, ,, and, put, a, toy, flag, in, the, highest, tower, ,, but, this, afternoon, a, breeze, knocked, it, down, .]
    Lemmatized tokens: [this, morning, ,, Joey, build, a, sand, castle, on, the, beach, ,, and, put, a, toy, flag, in, the, highest, tower, ,, but, this, afternoon, a, breeze, knock, it, down, .]
    POS tags: [DT, NN, ,, NNP, VBD, DT, NN, NN, IN, DT, NN, ,, CC, VBD, DT, NN, NN, IN, DT, JJS, NN, ,, CC, DT, NN, DT, NN, VBD, PRP, RP, .]
    NER tags: [DATE, DATE, O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, DATE, DATE, O, O, O, O, O, O]
    NER values: [THIS MO, THIS MO, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, THIS AF, THIS AF, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [], [nmod:tmod->1, punct->2, nsubj->3, punct->21, cc->22, dobj->7, nmod:on->10, punct->11, conj:and->27, cc->12, conj:and->13, punct->30], [], [], [det->5, compound->6], [], [], [case->8, det->9], [], [], [dobj->16, nsubj->3, nmod:in->20], [], [], [compound->15, det->14], [], [], [], [case->17, det->18, amod->19], [], [], [], [det->23], [], [det->25], [nmod:tmod->24, nsubj->26, dobj->28, compound:prt->29], [], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing C is built by sand, tide will knock down thing C. Sand castle is built by sand. If thing B is in a high position,  breeze will knock down thing B. If thing B is in highest tower,  thing B is in a high position. {
    Tokens: [if, thing, c, is, built, by, sand, ,, tide, will, knock, down, thing, c., sand, castle, is, built, by, sand, ., if, thing, b, is, in, a, high, position, ,, breeze, will, knock, down, thing, b, ., if, thing, b, is, in, highest, tower, ,, thing, b, is, in, a, high, position, .]
    Lemmatized tokens: [if, thing, c, be, build, by, sand, ,, tide, will, knock, down, thing, c., sand, castle, be, build, by, sand, ., if, thing, b, be, in, a, high, position, ,, breeze, will, knock, down, thing, b, ., if, thing, b, be, in, highest, tower, ,, thing, b, be, in, a, high, position, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBN, IN, NN, ,, NNP, VBD-AUX, VB, RP, NN, JJ, NN, NN, VBD-AUX, VBN, IN, NN, ., IN, NN, NN, VBD-AUX, IN, DT, JJ, NN, ,, NN, VBD-AUX, VB, RP, NN, NN, ., IN, NN, NN, VBD-AUX, IN, JJS, NN, ,, NN, NN, VBD-AUX, IN, DT, JJ, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubjpass->2, auxpass->3, nmod:agent->6], [], [case->5], [], [], [], [advcl->4, punct->20, punct->7, nsubj->8, aux->9, compound:prt->11, dobj->12], [], [acl:relcl->17], [], [], [amod->13, compound->14], [], [nsubjpass->15, auxpass->16, nmod:agent->19], [], [case->18], [], [], [], [compound->22], [], [], [], [], [nsubj->23, cop->24, case->25, det->26, amod->27, mark->21], [], [], [], [advcl:in->28, punct->29, nsubj->30, aux->31, compound:prt->33, dobj->35, punct->36], [], [], [compound->34], [], [], [], [compound->38], [], [], [], [amod->42, mark->37, nsubj->39, cop->40, case->41], [], [], [compound->45], [], [], [], [], [advcl:in->43, punct->44, nsubj->46, cop->47, case->48, det->49, amod->50, punct->52], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What did the breeze knock down {
    Tokens: [what, did, the, breeze, knock, down]
    Lemmatized tokens: [what, do, the, breeze, knock, down]
    POS tags: [WP, VBD-AUX, DT, NN, VB, RP]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [], [], [det->2], [dobj->0, aux->1, nsubj->3, compound:prt->5], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: This morning, Joey built a sand castle on the beach, and put a toy flag in the highest tower, but this afternoon the tide knocked it down. {
    Tokens: [this, morning, ,, joey, built, a, sand, castle, on, the, beach, ,, and, put, a, toy, flag, in, the, highest, tower, ,, but, this, afternoon, the, tide, knocked, it, down, .]
    Lemmatized tokens: [this, morning, ,, Joey, build, a, sand, castle, on, the, beach, ,, and, put, a, toy, flag, in, the, highest, tower, ,, but, this, afternoon, the, tide, knock, it, down, .]
    POS tags: [DT, NN, ,, NNP, VBD, DT, NN, NN, IN, DT, NN, ,, CC, VBD, DT, NN, NN, IN, DT, JJS, NN, ,, CC, DT, NN, DT, NNP, VBD, PRP, RP, .]
    NER tags: [DATE, DATE, O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, DATE, DATE, O, O, O, O, O, O]
    NER values: [THIS MO, THIS MO, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, THIS AF, THIS AF, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [], [nmod:tmod->1, punct->2, nsubj->3, punct->21, cc->22, dobj->7, nmod:on->10, punct->11, conj:and->27, cc->12, conj:and->13, punct->30], [], [], [det->5, compound->6], [], [], [case->8, det->9], [], [], [dobj->16, nsubj->3, nmod:in->20], [], [], [compound->15, det->14], [], [], [], [case->17, det->18, amod->19], [], [], [], [det->23], [], [det->25], [nmod:tmod->24, nsubj->26, dobj->28, compound:prt->29], [], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing C is built by sand, tide will knock down thing C. Sand castle is built by sand. If thing B is in a high position,  breeze will knock down thing B. If thing B is in highest tower,  thing B is in a high position. {
    Tokens: [if, thing, c, is, built, by, sand, ,, tide, will, knock, down, thing, c., sand, castle, is, built, by, sand, ., if, thing, b, is, in, a, high, position, ,, breeze, will, knock, down, thing, b, ., if, thing, b, is, in, highest, tower, ,, thing, b, is, in, a, high, position, .]
    Lemmatized tokens: [if, thing, c, be, build, by, sand, ,, tide, will, knock, down, thing, c., sand, castle, be, build, by, sand, ., if, thing, b, be, in, a, high, position, ,, breeze, will, knock, down, thing, b, ., if, thing, b, be, in, highest, tower, ,, thing, b, be, in, a, high, position, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBN, IN, NN, ,, NNP, VBD-AUX, VB, RP, NN, JJ, NN, NN, VBD-AUX, VBN, IN, NN, ., IN, NN, NN, VBD-AUX, IN, DT, JJ, NN, ,, NN, VBD-AUX, VB, RP, NN, NN, ., IN, NN, NN, VBD-AUX, IN, JJS, NN, ,, NN, NN, VBD-AUX, IN, DT, JJ, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubjpass->2, auxpass->3, nmod:agent->6], [], [case->5], [], [], [], [advcl->4, punct->20, punct->7, nsubj->8, aux->9, compound:prt->11, dobj->12], [], [acl:relcl->17], [], [], [amod->13, compound->14], [], [nsubjpass->15, auxpass->16, nmod:agent->19], [], [case->18], [], [], [], [compound->22], [], [], [], [], [nsubj->23, cop->24, case->25, det->26, amod->27, mark->21], [], [], [], [advcl:in->28, punct->29, nsubj->30, aux->31, compound:prt->33, dobj->35, punct->36], [], [], [compound->34], [], [], [], [compound->38], [], [], [], [amod->42, mark->37, nsubj->39, cop->40, case->41], [], [], [compound->45], [], [], [], [], [advcl:in->43, punct->44, nsubj->46, cop->47, case->48, det->49, amod->50, punct->52], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What did the tide knock down {
    Tokens: [what, did, the, tide, knock, down]
    Lemmatized tokens: [what, do, the, tide, knock, down]
    POS tags: [WP, VBD-AUX, DT, NNP, VB, RP]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [], [], [det->2], [dobj->0, aux->1, nsubj->3, compound:prt->5], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Jane knocked on Susan's door, but there was no answer. She was out. {
    Tokens: [jane, knocked, on, susan, 's, door, ,, but, there, was, no, answer, ., she, was, out, .]
    Lemmatized tokens: [Jane, knock, on, Susan, 's, door, ,, but, there, be, no, answer, ., she, be, out, .]
    POS tags: [NNP, VBD, IN, NNP, POS, NN, ,, CC, EX, VBD-AUX, DT, NN, ., PRP, VBD-AUX, RB, .]
    NER tags: [PERSON, O, O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:on->5, punct->6, cc->7, conj:but->9, punct->12], [], [case->4], [], [case->2, nmod:poss->3], [], [], [], [expl->8, nsubj->11], [], [neg->10], [], [], [advmod->15, punct->16, nsubj->13], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B knocks on person C’s door and there is no answer, person C might be not at the house or person B might be disappointed. If person C might be not at the house, person C might be out. {
    Tokens: [if, person, b, knocks, on, person, c, 's, door, and, there, is, no, answer, ,, person, c, might, be, not, at, the, house, or, person, b, might, be, disappointed, ., if, person, c, might, be, not, at, the, house, ,, person, c, might, be, out, .]
    Lemmatized tokens: [if, person, b, knock, on, person, c, 's, door, and, there, be, no, answer, ,, person, c, might, be, not, at, the, house, or, person, b, might, be, disappoint, ., if, person, c, might, be, not, at, the, house, ,, person, c, might, be, out, .]
    POS tags: [IN, NN, NN, VBZ, IN, NN, NN, POS, NN, CC, EX, VBD-AUX, DT, NN, ,, NN, NN, VBD-AUX, VBD-AUX, RB, IN, DT, NNP, CC, NN, NN, VBD-AUX, VBD-AUX, VBN, ., IN, NN, NN, VBD-AUX, VBD-AUX, RB, IN, DT, NNP, ,, NN, NN, VBD-AUX, VBD-AUX, RB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, nmod:on->8, cc->9, conj:and->11], [], [], [compound->5, case->7], [], [case->4, nmod:poss->6], [], [], [expl->10, nsubj->13], [], [neg->12], [], [], [compound->15], [], [], [nsubj->16, aux->17, cop->18, advcl->3, nmod:at->22, cc->23, advcl->11, conj:or->28, punct->29, punct->14], [], [], [case->20, det->21], [], [], [compound->24], [], [], [nsubjpass->25, aux->26, auxpass->27], [], [], [], [compound->31], [], [], [nsubj->32, aux->33, cop->34, nmod:at->38, mark->30], [], [], [case->36, det->37], [], [], [compound->40], [], [], [advcl->35, punct->39, nsubj->41, aux->42, cop->43, punct->45], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was out {
    Tokens: [who, was, out]
    Lemmatized tokens: [who, be, out]
    POS tags: [WP, VBD-AUX, IN]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Jane knocked on Susan's door, but there was no answer. She was disappointed. {
    Tokens: [jane, knocked, on, susan, 's, door, ,, but, there, was, no, answer, ., she, was, disappointed, .]
    Lemmatized tokens: [Jane, knock, on, Susan, 's, door, ,, but, there, be, no, answer, ., she, be, disappoint, .]
    POS tags: [NNP, VBD, IN, NNP, POS, NN, ,, CC, EX, VBD-AUX, DT, NN, ., PRP, VBD-AUX, VBN, .]
    NER tags: [PERSON, O, O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:on->5, punct->6, cc->7, conj:but->9, punct->12], [], [case->4], [], [case->2, nmod:poss->3], [], [], [], [expl->8, nsubj->11], [], [neg->10], [], [], [], [punct->16, nsubjpass->13, auxpass->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B knocks on person C’s door and there is no answer, person C might be not at the house or person B might be disappointed. If person C might be not at the house, person C might be out. {
    Tokens: [if, person, b, knocks, on, person, c, 's, door, and, there, is, no, answer, ,, person, c, might, be, not, at, the, house, or, person, b, might, be, disappointed, ., if, person, c, might, be, not, at, the, house, ,, person, c, might, be, out, .]
    Lemmatized tokens: [if, person, b, knock, on, person, c, 's, door, and, there, be, no, answer, ,, person, c, might, be, not, at, the, house, or, person, b, might, be, disappoint, ., if, person, c, might, be, not, at, the, house, ,, person, c, might, be, out, .]
    POS tags: [IN, NN, NN, VBZ, IN, NN, NN, POS, NN, CC, EX, VBD-AUX, DT, NN, ,, NN, NN, VBD-AUX, VBD-AUX, RB, IN, DT, NNP, CC, NN, NN, VBD-AUX, VBD-AUX, VBN, ., IN, NN, NN, VBD-AUX, VBD-AUX, RB, IN, DT, NNP, ,, NN, NN, VBD-AUX, VBD-AUX, RB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, nmod:on->8, cc->9, conj:and->11], [], [], [compound->5, case->7], [], [case->4, nmod:poss->6], [], [], [expl->10, nsubj->13], [], [neg->12], [], [], [compound->15], [], [], [nsubj->16, aux->17, cop->18, advcl->3, nmod:at->22, cc->23, advcl->11, conj:or->28, punct->29, punct->14], [], [], [case->20, det->21], [], [], [compound->24], [], [], [nsubjpass->25, aux->26, auxpass->27], [], [], [], [compound->31], [], [], [nsubj->32, aux->33, cop->34, nmod:at->38, mark->30], [], [], [case->36, det->37], [], [], [compound->40], [], [], [advcl->35, punct->39, nsubj->41, aux->42, cop->43, punct->45], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was disappointed {
    Tokens: [who, was, disappointed]
    Lemmatized tokens: [who, be, disappoint]
    POS tags: [WP, VBD-AUX, VBN]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubjpass->0, auxpass->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Jane knocked on the door, and Susan answered it. She invited her to come out. {
    Tokens: [jane, knocked, on, the, door, ,, and, susan, answered, it, ., she, invited, her, to, come, out, .]
    Lemmatized tokens: [Jane, knock, on, the, door, ,, and, Susan, answer, it, ., she, invite, she, to, come, out, .]
    POS tags: [NNP, VBD, IN, DT, NN, ,, CC, NNP, VBD, PRP, ., PRP, VBD, PRP, TO, VB, RP, .]
    NER tags: [PERSON, O, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:on->4, punct->5, cc->6, conj:and->8, punct->10], [], [], [case->2, det->3], [], [], [], [nsubj->7, dobj->9], [], [], [], [dobj->13, xcomp->15, punct->17, nsubj->11], [], [], [mark->14, compound:prt->16], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B knock on the door and person C answers it, person B is outside and person C is inside. If person B is outside and person C is inside, person C might invite person B to come in or person B might invite person C to come out. {
    Tokens: [if, person, b, knock, on, the, door, and, person, c, answers, it, ,, person, b, is, outside, and, person, c, is, inside, ., if, person, b, is, outside, and, person, c, is, inside, ,, person, c, might, invite, person, b, to, come, in, or, person, b, might, invite, person, c, to, come, out, .]
    Lemmatized tokens: [if, person, b, knock, on, the, door, and, person, c, answer, it, ,, person, b, be, outside, and, person, c, be, inside, ., if, person, b, be, outside, and, person, c, be, inside, ,, person, c, might, invite, person, b, to, come, in, or, person, b, might, invite, person, c, to, come, out, .]
    POS tags: [IN, NN, NN, VB, IN, DT, NN, CC, NN, NN, VBZ, PRP, ,, NN, NN, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, RB, ., IN, NN, NN, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, RB, ,, NN, NN, VBD-AUX, VB, NN, NN, TO, VB, IN, CC, NN, NN, VBD-AUX, VB, NN, NN, TO, VB, RP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, nmod:on->9], [], [], [cc->7, conj:and->8], [], [], [case->4, det->5, compound->6, compound->8, dep->10], [dobj->11], [], [], [], [compound->13], [], [cc->17, conj:and->18], [], [], [cop->15, amod->16, amod->18, advcl->3, acl:relcl->20, punct->22, punct->12, nsubj->14], [advmod->21], [], [], [], [], [compound->24], [], [cc->28, conj:and->29], [], [], [nsubj->25, cop->26, amod->27, amod->29, acl:relcl->31, mark->23], [advmod->32], [], [], [], [compound->34], [], [advcl->41, cc->43, advcl->30, conj:or->47, punct->33, nsubj->35, aux->36, punct->53, dobj->39], [], [compound->38], [], [nmod->42, mark->40], [], [], [], [compound->44], [], [nsubj->45, aux->46, dobj->49, advcl->51], [], [compound->48], [], [mark->50, compound:prt->52], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who invited whom {
    Tokens: [who, invited, whom]
    Lemmatized tokens: [who, invite, whom]
    POS tags: [WP, VBD, WP]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Jane knocked on the door, and Susan answered it. She invited her to come in. {
    Tokens: [jane, knocked, on, the, door, ,, and, susan, answered, it, ., she, invited, her, to, come, in, .]
    Lemmatized tokens: [Jane, knock, on, the, door, ,, and, Susan, answer, it, ., she, invite, she, to, come, in, .]
    POS tags: [NNP, VBD, IN, DT, NN, ,, CC, NNP, VBD, PRP, ., PRP, VBD, PRP, TO, VB, IN, .]
    NER tags: [PERSON, O, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:on->4, punct->5, cc->6, conj:and->8, punct->10], [], [], [case->2, det->3], [], [], [], [nsubj->7, dobj->9], [], [], [], [dobj->13, xcomp->15, punct->17, nsubj->11], [], [], [mark->14, nmod->16], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B knock on the door and person C answers it, person B is outside and person C is inside. If person B is outside and person C is inside, person C might invite person B to come in or person B might invite person C to come out. {
    Tokens: [if, person, b, knock, on, the, door, and, person, c, answers, it, ,, person, b, is, outside, and, person, c, is, inside, ., if, person, b, is, outside, and, person, c, is, inside, ,, person, c, might, invite, person, b, to, come, in, or, person, b, might, invite, person, c, to, come, out, .]
    Lemmatized tokens: [if, person, b, knock, on, the, door, and, person, c, answer, it, ,, person, b, be, outside, and, person, c, be, inside, ., if, person, b, be, outside, and, person, c, be, inside, ,, person, c, might, invite, person, b, to, come, in, or, person, b, might, invite, person, c, to, come, out, .]
    POS tags: [IN, NN, NN, VB, IN, DT, NN, CC, NN, NN, VBZ, PRP, ,, NN, NN, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, RB, ., IN, NN, NN, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, RB, ,, NN, NN, VBD-AUX, VB, NN, NN, TO, VB, IN, CC, NN, NN, VBD-AUX, VB, NN, NN, TO, VB, RP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, nmod:on->9], [], [], [cc->7, conj:and->8], [], [], [case->4, det->5, compound->6, compound->8, dep->10], [dobj->11], [], [], [], [compound->13], [], [cc->17, conj:and->18], [], [], [cop->15, amod->16, amod->18, advcl->3, acl:relcl->20, punct->22, punct->12, nsubj->14], [advmod->21], [], [], [], [], [compound->24], [], [cc->28, conj:and->29], [], [], [nsubj->25, cop->26, amod->27, amod->29, acl:relcl->31, mark->23], [advmod->32], [], [], [], [compound->34], [], [advcl->41, cc->43, advcl->30, conj:or->47, punct->33, nsubj->35, aux->36, punct->53, dobj->39], [], [compound->38], [], [nmod->42, mark->40], [], [], [], [compound->44], [], [nsubj->45, aux->46, dobj->49, advcl->51], [], [compound->48], [], [mark->50, compound:prt->52], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who invited whom {
    Tokens: [who, invited, whom]
    Lemmatized tokens: [who, invite, whom]
    POS tags: [WP, VBD, WP]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Sam took French classes from Adam, because he was eager to speak it fluently. {
    Tokens: [sam, took, french, classes, from, adam, ,, because, he, was, eager, to, speak, it, fluently, .]
    Lemmatized tokens: [Sam, take, french, class, from, Adam, ,, because, he, be, eager, to, speak, it, fluently, .]
    POS tags: [NNP, VBD, JJ, NNS, IN, NNP, ,, IN, PRP, VBD-AUX, JJ, TO, VB, PRP, RB, .]
    NER tags: [PERSON, O, MISC, O, O, PERSON, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [punct->15, nsubj->0, dobj->3, nmod:from->5, punct->6, advcl->10], [], [amod->2], [], [case->4], [], [], [], [], [mark->7, nsubj->8, cop->9, xcomp->12], [], [mark->11, dobj->13, advmod->14], [], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B take classes from person C, person C teaches person B. If person C teaches person B, person B knows less than person C.  If person B knows less than person C, person B is eager to know something and person C is known to know something. Speak french fluently is knowing something. {
    Tokens: [if, person, b, take, classes, from, person, c, ,, person, c, teaches, person, b, ., if, person, c, teaches, person, b, ,, person, b, knows, less, than, person, c, ., if, person, b, knows, less, than, person, c, ,, person, b, is, eager, to, know, something, and, person, c, is, known, to, know, something, ., speak, french, fluently, is, knowing, something, .]
    Lemmatized tokens: [if, person, b, take, class, from, person, c, ,, person, c, teach, person, b, ., if, person, c, teach, person, b, ,, person, b, know, less, than, person, c, ., if, person, b, know, less, than, person, c, ,, person, b, be, eager, to, know, something, and, person, c, be, know, to, know, something, ., speak, french, fluently, be, know, something, .]
    POS tags: [IN, NN, NN, VBP, NNS, IN, NN, NN, ,, NN, NN, VBZ, NN, NN, ., IN, NN, NN, VBZ, NN, NN, ,, NN, NN, VBZ, JJR, IN, NN, NN, ., IN, NN, NN, VBZ, JJR, IN, NN, NN, ,, NN, NN, VBD-AUX, JJ, TO, VB, NN, CC, NN, NN, VBD-AUX, VBN, TO, VB, NN, ., VB, NNP, RB, VBD-AUX, VBG, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, MISC, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->4, nmod:from->7], [], [], [], [case->5, compound->6], [], [], [compound->9], [advcl->3, punct->8, nsubj->10, dobj->13, punct->14], [], [compound->12], [], [], [], [compound->16], [nsubj->17, dobj->20, mark->15], [], [compound->19], [], [], [compound->22], [advcl->18, punct->21, nsubj->23, dobj->25, nmod:than->28, punct->29], [], [], [], [case->26, compound->27], [], [], [], [compound->31], [nmod:than->37, mark->30, nsubj->32, dobj->34], [], [], [], [case->35, compound->36], [], [], [compound->39], [], [punct->38, punct->54, nsubj->40, cop->41, xcomp->44, advcl->33], [], [mark->43, dobj->48], [cc->46, conj:and->47], [], [], [compound->45, compound->47, acl:relcl->50], [], [xcomp->52, auxpass->49], [], [mark->51, dobj->53], [], [], [ccomp->59, punct->61], [], [], [], [nsubj->56, advmod->57, aux->58, dobj->60], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was eager to speak French fluently {
    Tokens: [who, was, eager, to, speak, french, fluently]
    Lemmatized tokens: [who, be, eager, to, speak, French, fluently]
    POS tags: [WP, VBD-AUX, JJ, TO, VB, NNP, RB]
    NER tags: [O, O, O, O, O, MISC, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1, xcomp->4], [], [mark->3, dobj->5, advmod->6], [], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Sam took French classes from Adam, because he was known to speak it fluently. {
    Tokens: [sam, took, french, classes, from, adam, ,, because, he, was, known, to, speak, it, fluently, .]
    Lemmatized tokens: [Sam, take, french, class, from, Adam, ,, because, he, be, know, to, speak, it, fluently, .]
    POS tags: [NNP, VBD, JJ, NNS, IN, NNP, ,, IN, PRP, VBD-AUX, VBN, TO, VB, PRP, RB, .]
    NER tags: [PERSON, O, MISC, O, O, PERSON, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [punct->15, nsubj->0, dobj->3, nmod:from->5, punct->6, advcl->10], [], [amod->2], [], [case->4], [], [], [], [], [mark->7, nsubjpass->8, auxpass->9, xcomp->12], [], [mark->11, dobj->13, advmod->14], [], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B take classes from person C, person C teaches person B. If person C teaches person B, person B knows less than person C.  If person B knows less than person C, person B is eager to know something and person C is known to know something. Speak french fluently is knowing something. {
    Tokens: [if, person, b, take, classes, from, person, c, ,, person, c, teaches, person, b, ., if, person, c, teaches, person, b, ,, person, b, knows, less, than, person, c, ., if, person, b, knows, less, than, person, c, ,, person, b, is, eager, to, know, something, and, person, c, is, known, to, know, something, ., speak, french, fluently, is, knowing, something, .]
    Lemmatized tokens: [if, person, b, take, class, from, person, c, ,, person, c, teach, person, b, ., if, person, c, teach, person, b, ,, person, b, know, less, than, person, c, ., if, person, b, know, less, than, person, c, ,, person, b, be, eager, to, know, something, and, person, c, be, know, to, know, something, ., speak, french, fluently, be, know, something, .]
    POS tags: [IN, NN, NN, VBP, NNS, IN, NN, NN, ,, NN, NN, VBZ, NN, NN, ., IN, NN, NN, VBZ, NN, NN, ,, NN, NN, VBZ, JJR, IN, NN, NN, ., IN, NN, NN, VBZ, JJR, IN, NN, NN, ,, NN, NN, VBD-AUX, JJ, TO, VB, NN, CC, NN, NN, VBD-AUX, VBN, TO, VB, NN, ., VB, NNP, RB, VBD-AUX, VBG, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, MISC, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->4, nmod:from->7], [], [], [], [case->5, compound->6], [], [], [compound->9], [advcl->3, punct->8, nsubj->10, dobj->13, punct->14], [], [compound->12], [], [], [], [compound->16], [nsubj->17, dobj->20, mark->15], [], [compound->19], [], [], [compound->22], [advcl->18, punct->21, nsubj->23, dobj->25, nmod:than->28, punct->29], [], [], [], [case->26, compound->27], [], [], [], [compound->31], [nmod:than->37, mark->30, nsubj->32, dobj->34], [], [], [], [case->35, compound->36], [], [], [compound->39], [], [punct->38, punct->54, nsubj->40, cop->41, xcomp->44, advcl->33], [], [mark->43, dobj->48], [cc->46, conj:and->47], [], [], [compound->45, compound->47, acl:relcl->50], [], [xcomp->52, auxpass->49], [], [mark->51, dobj->53], [], [], [ccomp->59, punct->61], [], [], [], [nsubj->56, advmod->57, aux->58, dobj->60], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was known to speak French fluently {
    Tokens: [who, was, known, to, speak, french, fluently]
    Lemmatized tokens: [who, be, know, to, speak, French, fluently]
    POS tags: [WP, VBD-AUX, VBN, TO, VB, NNP, RB]
    NER tags: [O, O, O, O, O, MISC, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubjpass->0, auxpass->1, xcomp->4], [], [mark->3, dobj->5, advmod->6], [], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The path to the lake was blocked, so we couldn't reach it. {
    Tokens: [the, path, to, the, lake, was, blocked, ,, so, we, could, n't, reach, it, .]
    Lemmatized tokens: [the, path, to, the, lake, be, block, ,, so, we, could, not, reach, it, .]
    POS tags: [DT, NN, TO, DT, NN, VBD-AUX, VBN, ,, IN, PRP, VBD-AUX, RB, VB, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0, nmod:to->4], [], [], [case->2, det->3], [], [nsubjpass->1, auxpass->5, punct->7, dep->8, parataxis->12, punct->14], [], [], [], [], [], [nsubj->9, aux->10, neg->11, dobj->13], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Path is used to reach somewhere. If path to somewhere is blocked, path can’t be used and somewhere can’t be reached. {
    Tokens: [path, is, used, to, reach, somewhere, ., if, path, to, somewhere, is, blocked, ,, path, ca, n't, be, used, and, somewhere, ca, n't, be, reached, .]
    Lemmatized tokens: [path, be, use, to, reach, somewhere, ., if, path, to, somewhere, be, block, ,, path, can, not, be, use, and, somewhere, can, not, be, reach, .]
    POS tags: [NN, VBD-AUX, VBN, TO, VB, RB, ., IN, NN, TO, RB, VBD-AUX, VBN, ,, NN, MD, RB, VBD-AUX, VBN, CC, RB, MD, RB, VBD-AUX, VBN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubjpass->0, auxpass->1, xcomp->4, punct->6], [], [mark->3, advmod->5], [], [], [], [nmod:to->10], [], [case->9], [], [auxpass->11, mark->7, nsubjpass->8], [], [], [], [], [], [punct->25, advcl->12, punct->13, nsubjpass->14, aux->15, neg->16, auxpass->17, cc->19, conj:and->24], [], [], [], [], [], [nsubjpass->14, advmod->20, aux->21, neg->22, auxpass->23], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What couldn't we reach {
    Tokens: [what, could, n't, we, reach]
    Lemmatized tokens: [what, could, not, we, reach]
    POS tags: [WP, VBD-AUX, RB, PRP, VBP]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, neg->2, ccomp->4], [], [], [nsubj->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The path to the lake was blocked, so we couldn't use it. {
    Tokens: [the, path, to, the, lake, was, blocked, ,, so, we, could, n't, use, it, .]
    Lemmatized tokens: [the, path, to, the, lake, be, block, ,, so, we, could, not, use, it, .]
    POS tags: [DT, NN, TO, DT, NN, VBD-AUX, VBN, ,, IN, PRP, VBD-AUX, RB, VB, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0, nmod:to->4], [], [], [case->2, det->3], [], [nsubjpass->1, auxpass->5, punct->7, dep->8, parataxis->12, punct->14], [], [], [], [], [], [nsubj->9, aux->10, neg->11, dobj->13], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Path is used to reach somewhere. If path to somewhere is blocked, path can’t be used and somewhere can’t be reached. {
    Tokens: [path, is, used, to, reach, somewhere, ., if, path, to, somewhere, is, blocked, ,, path, ca, n't, be, used, and, somewhere, ca, n't, be, reached, .]
    Lemmatized tokens: [path, be, use, to, reach, somewhere, ., if, path, to, somewhere, be, block, ,, path, can, not, be, use, and, somewhere, can, not, be, reach, .]
    POS tags: [NN, VBD-AUX, VBN, TO, VB, RB, ., IN, NN, TO, RB, VBD-AUX, VBN, ,, NN, MD, RB, VBD-AUX, VBN, CC, RB, MD, RB, VBD-AUX, VBN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubjpass->0, auxpass->1, xcomp->4, punct->6], [], [mark->3, advmod->5], [], [], [], [nmod:to->10], [], [case->9], [], [auxpass->11, mark->7, nsubjpass->8], [], [], [], [], [], [punct->25, advcl->12, punct->13, nsubjpass->14, aux->15, neg->16, auxpass->17, cc->19, conj:and->24], [], [], [], [], [], [nsubjpass->14, advmod->20, aux->21, neg->22, auxpass->23], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What couldn't we use {
    Tokens: [what, could, n't, we, use]
    Lemmatized tokens: [what, could, not, we, use]
    POS tags: [WP, VBD-AUX, RB, PRP, VBP]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, neg->2, ccomp->4], [], [], [nsubj->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The sun was covered by a thick cloud all morning, but luckily, by the time the picnic started, it was gone. {
    Tokens: [the, sun, was, covered, by, a, thick, cloud, all, morning, ,, but, luckily, ,, by, the, time, the, picnic, started, ,, it, was, gone, .]
    Lemmatized tokens: [the, sun, be, cover, by, a, thick, cloud, all, morning, ,, but, luckily, ,, by, the, time, the, picnic, start, ,, it, be, go, .]
    POS tags: [DT, NN, VBD-AUX, VBN, IN, DT, JJ, NN, DT, NN, ,, CC, RB, ,, IN, DT, NN, DT, NN, VBD, ,, PRP, VBD-AUX, VBN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, TIME, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, TMO, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [conj:but->16, nsubjpass->1, auxpass->2, nmod:agent->7, nmod:tmod->9, punct->10, cc->11, advmod->12, punct->13], [], [], [], [case->4, det->5, amod->6], [], [det->8], [], [], [], [], [], [], [det->15, acl:relcl->19, case->14], [], [det->17], [nsubj->18], [], [], [], [ccomp->16, ccomp->3, punct->20, nsubjpass->21, auxpass->22, punct->24], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If sun is covered by thing C and sun is out, it is lucky. If it is lucky, it is luckily. If sun is covered by thing C and thing C is gone, it is lucky. {
    Tokens: [if, sun, is, covered, by, thing, c, and, sun, is, out, ,, it, is, lucky, ., if, it, is, lucky, ,, it, is, luckily, ., if, sun, is, covered, by, thing, c, and, thing, c, is, gone, ,, it, is, lucky, .]
    Lemmatized tokens: [if, sun, be, cover, by, thing, c, and, sun, be, out, ,, it, be, lucky, ., if, it, be, lucky, ,, it, be, luckily, ., if, sun, be, cover, by, thing, c, and, thing, c, be, go, ,, it, be, lucky, .]
    POS tags: [IN, NN, VBD-AUX, VBN, IN, NN, NN, CC, NN, VBD-AUX, RB, ,, PRP, VBD-AUX, JJ, ., IN, PRP, VBD-AUX, JJ, ,, PRP, VBD-AUX, RB, ., IN, NN, VBD-AUX, VBN, IN, NN, NN, CC, NN, NN, VBD-AUX, VBN, ,, PRP, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [mark->0, nsubjpass->1, auxpass->2, nmod:agent->6, cc->7, conj:and->10], [], [], [case->4, compound->5], [], [], [], [nsubj->8, cop->9], [], [], [], [punct->15, advcl->3, advcl->10, punct->11, nsubj->12, cop->13], [], [], [], [], [cop->18, mark->16, nsubj->17], [], [], [advcl->19, punct->20, nsubj->21, advmod->23, punct->24], [], [], [], [], [], [nmod:agent->31, cc->32, conj:and->36, mark->25, nsubjpass->26, auxpass->27], [], [], [compound->30, case->29], [], [], [compound->33], [], [nsubjpass->34, auxpass->35], [], [], [], [advcl->36, punct->37, nsubj->38, cop->39, punct->41, advcl->28], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What was gone {
    Tokens: [what, was, gone]
    Lemmatized tokens: [what, be, go]
    POS tags: [WP, VBD-AUX, VBN]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubjpass->0, auxpass->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The sun was covered by a thick cloud all morning, but luckily, by the time the picnic started, it was out. {
    Tokens: [the, sun, was, covered, by, a, thick, cloud, all, morning, ,, but, luckily, ,, by, the, time, the, picnic, started, ,, it, was, out, .]
    Lemmatized tokens: [the, sun, be, cover, by, a, thick, cloud, all, morning, ,, but, luckily, ,, by, the, time, the, picnic, start, ,, it, be, out, .]
    POS tags: [DT, NN, VBD-AUX, VBN, IN, DT, JJ, NN, DT, NN, ,, CC, RB, ,, IN, DT, NN, DT, NN, VBD, ,, PRP, VBD-AUX, RB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, TIME, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, TMO, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [conj:but->16, nsubjpass->1, auxpass->2, nmod:agent->7, nmod:tmod->9, punct->10, cc->11, advmod->12, punct->13], [], [], [], [case->4, det->5, amod->6], [], [det->8], [], [], [], [], [], [], [det->15, acl:relcl->19, case->14], [], [det->17], [nsubj->18], [], [], [ccomp->16, ccomp->3, punct->20, nsubj->21, advmod->23, punct->24], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If sun is covered by thing C and sun is out, it is lucky. If it is lucky, it is luckily. If sun is covered by thing C and thing C is gone, it is lucky. {
    Tokens: [if, sun, is, covered, by, thing, c, and, sun, is, out, ,, it, is, lucky, ., if, it, is, lucky, ,, it, is, luckily, ., if, sun, is, covered, by, thing, c, and, thing, c, is, gone, ,, it, is, lucky, .]
    Lemmatized tokens: [if, sun, be, cover, by, thing, c, and, sun, be, out, ,, it, be, lucky, ., if, it, be, lucky, ,, it, be, luckily, ., if, sun, be, cover, by, thing, c, and, thing, c, be, go, ,, it, be, lucky, .]
    POS tags: [IN, NN, VBD-AUX, VBN, IN, NN, NN, CC, NN, VBD-AUX, RB, ,, PRP, VBD-AUX, JJ, ., IN, PRP, VBD-AUX, JJ, ,, PRP, VBD-AUX, RB, ., IN, NN, VBD-AUX, VBN, IN, NN, NN, CC, NN, NN, VBD-AUX, VBN, ,, PRP, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [mark->0, nsubjpass->1, auxpass->2, nmod:agent->6, cc->7, conj:and->10], [], [], [case->4, compound->5], [], [], [], [nsubj->8, cop->9], [], [], [], [punct->15, advcl->3, advcl->10, punct->11, nsubj->12, cop->13], [], [], [], [], [cop->18, mark->16, nsubj->17], [], [], [advcl->19, punct->20, nsubj->21, advmod->23, punct->24], [], [], [], [], [], [nmod:agent->31, cc->32, conj:and->36, mark->25, nsubjpass->26, auxpass->27], [], [], [compound->30, case->29], [], [], [compound->33], [], [nsubjpass->34, auxpass->35], [], [], [], [advcl->36, punct->37, nsubj->38, cop->39, punct->41, advcl->28], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What was out {
    Tokens: [what, was, out]
    Lemmatized tokens: [what, be, out]
    POS tags: [WP, VBD-AUX, IN]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: We went to the lake, because a shark had been seen at the ocean beach, so it was a dangerous place to swim. {
    Tokens: [we, went, to, the, lake, ,, because, a, shark, had, been, seen, at, the, ocean, beach, ,, so, it, was, a, dangerous, place, to, swim, .]
    Lemmatized tokens: [we, go, to, the, lake, ,, because, a, shark, have, be, see, at, the, ocean, beach, ,, so, it, be, a, dangerous, place, to, swim, .]
    POS tags: [PRP, VBD, TO, DT, NN, ,, IN, DT, NN, VBD-AUX, VBD-AUX, VBN, IN, DT, NNP, NNP, ,, IN, PRP, VBD-AUX, DT, JJ, NN, TO, VB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, punct->16, dep->17, nmod:to->4, punct->5, parataxis->22, punct->25, advcl->11], [], [], [case->2, det->3], [], [], [], [det->7], [], [], [nmod:at->15, mark->6, nsubjpass->8, aux->9, auxpass->10], [], [], [], [case->12, det->13, compound->14], [], [], [], [], [], [], [nsubj->18, cop->19, det->20, amod->21, acl->24], [], [mark->23], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If something dangerous is at place B, place B is dangerous.Shark is a dangerous thing. {
    Tokens: [if, something, dangerous, is, at, place, b, ,, place, b, is, dangerous.shark, is, a, dangerous, thing, .]
    Lemmatized tokens: [if, something, dangerous, be, at, place, b, ,, place, b, be, dangerous.Shark, be, a, dangerous, thing, .]
    POS tags: [IN, NN, JJ, VBD-AUX, IN, NN, NN, ,, NN, NN, VBD-AUX, NNP, VBD-AUX, DT, JJ, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [amod->2], [], [], [], [], [mark->0, nsubj->1, cop->3, case->4, compound->5], [], [], [compound->8], [], [acl:relcl->15, punct->16, advcl:at->6, punct->7, nsubj->9, cop->10], [], [], [], [cop->12, det->13, amod->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Which was a dangerous place to swim {
    Tokens: [which, was, a, dangerous, place, to, swim]
    Lemmatized tokens: [which, be, a, dangerous, place, to, swim]
    POS tags: [WDT, VBD-AUX, DT, JJ, NN, TO, VB]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [nsubj->0, cop->1, det->2, amod->3, acl->6], [], [mark->5]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: We went to the lake, because a shark had been seen at the ocean beach, so it was a safer place to swim. {
    Tokens: [we, went, to, the, lake, ,, because, a, shark, had, been, seen, at, the, ocean, beach, ,, so, it, was, a, safer, place, to, swim, .]
    Lemmatized tokens: [we, go, to, the, lake, ,, because, a, shark, have, be, see, at, the, ocean, beach, ,, so, it, be, a, safer, place, to, swim, .]
    POS tags: [PRP, VBD, TO, DT, NN, ,, IN, DT, NN, VBD-AUX, VBD-AUX, VBN, IN, DT, NNP, NNP, ,, IN, PRP, VBD-AUX, DT, JJR, NN, TO, VB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, punct->16, dep->17, nmod:to->4, punct->5, parataxis->22, punct->25, advcl->11], [], [], [case->2, det->3], [], [], [], [det->7], [], [], [nmod:at->15, mark->6, nsubjpass->8, aux->9, auxpass->10], [], [], [], [case->12, det->13, compound->14], [], [], [], [], [], [], [nsubj->18, cop->19, det->20, amod->21, acl->24], [], [mark->23], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If something dangerous is at place B, place B is dangerous.Shark is a dangerous thing. {
    Tokens: [if, something, dangerous, is, at, place, b, ,, place, b, is, dangerous.shark, is, a, dangerous, thing, .]
    Lemmatized tokens: [if, something, dangerous, be, at, place, b, ,, place, b, be, dangerous.Shark, be, a, dangerous, thing, .]
    POS tags: [IN, NN, JJ, VBD-AUX, IN, NN, NN, ,, NN, NN, VBD-AUX, NNP, VBD-AUX, DT, JJ, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [amod->2], [], [], [], [], [mark->0, nsubj->1, cop->3, case->4, compound->5], [], [], [compound->8], [], [acl:relcl->15, punct->16, advcl:at->6, punct->7, nsubj->9, cop->10], [], [], [], [cop->12, det->13, amod->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Which was a safer place to swim {
    Tokens: [which, was, a, safer, place, to, swim]
    Lemmatized tokens: [which, be, a, safer, place, to, swim]
    POS tags: [WDT, VBD-AUX, DT, JJR, NN, TO, VB]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [nsubj->0, cop->1, det->2, amod->3, acl->6], [], [mark->5]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Sam tried to paint a picture of shepherds with sheep, but they ended up looking more like dogs. {
    Tokens: [sam, tried, to, paint, a, picture, of, shepherds, with, sheep, ,, but, they, ended, up, looking, more, like, dogs, .]
    Lemmatized tokens: [Sam, try, to, paint, a, picture, of, shepherd, with, sheep, ,, but, they, end, up, look, more, like, dog, .]
    POS tags: [NNP, VBD, TO, VB, DT, NN, IN, NNS, IN, NN, ,, CC, PRP, VBD, RP, VBG, JJR, IN, NNS, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, xcomp->3, punct->19, punct->10, cc->11, conj:but->13], [], [mark->2, dobj->5, nmod:with->9], [], [det->4, nmod:of->7], [], [case->6], [], [case->8], [], [], [], [xcomp->15, nsubj->12, compound:prt->14], [], [dobj->16, nmod:like->18], [], [], [case->17], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B looks like thing C, thing B has the same shape with thing C. Shepherd and golfers are same specie. Sheep and dogs are the same specie. Sheep and shepherd are not same specie. If thing B and thing C are same species, thing B has the same shape with thing C. {
    Tokens: [if, thing, b, looks, like, thing, c, ,, thing, b, has, the, same, shape, with, thing, c., shepherd, and, golfers, are, same, specie, ., sheep, and, dogs, are, the, same, specie, ., sheep, and, shepherd, are, not, same, specie, ., if, thing, b, and, thing, c, are, same, species, ,, thing, b, has, the, same, shape, with, thing, c.]
    Lemmatized tokens: [if, thing, b, look, like, thing, c, ,, thing, b, have, the, same, shape, with, thing, c., Shepherd, and, golfer, be, same, specie, ., Sheep, and, dog, be, the, same, specie, ., Sheep, and, shepherd, be, not, same, specie, ., if, thing, b, and, thing, c, be, same, species, ,, thing, b, have, the, same, shape, with, thing, C.]
    POS tags: [IN, NN, NN, VBZ, IN, NN, NN, ,, NN, NN, VBD-AUX, DT, JJ, NN, IN, NN, JJ, NNP, CC, NNS, VBD-AUX, JJ, NN, ., NNP, CC, NNS, VBD-AUX, DT, JJ, NN, ., NNP, CC, NNP, VBD-AUX, RB, JJ, NN, ., IN, NN, NN, CC, NN, NN, VBD-AUX, JJ, NNS, ,, NN, NN, VBD-AUX, DT, JJ, NN, IN, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, nmod:like->6], [], [], [case->4, compound->5], [], [], [compound->8], [advcl->3, punct->7, punct->23, nsubj->9, dobj->13], [], [], [nmod:with->15, acl:relcl->22, det->11, amod->12], [], [case->14], [], [amod->16, cc->18, conj:and->19], [], [], [], [], [nsubj->17, nsubj->19, cop->20, amod->21], [], [conj:and->26, cc->25], [], [], [], [], [], [nsubj->26, cop->27, det->28, amod->29, punct->31, nsubj->24], [], [cc->33, conj:and->34], [], [], [], [], [], [amod->37, punct->39, nsubj->32, nsubj->34, cop->35, neg->36], [], [], [], [compound->41, cc->43, conj:and->45], [], [], [compound->44], [], [], [mark->40, nsubj->42, nsubj->45, cop->46, amod->47], [], [], [compound->50], [advcl->48, punct->49, nsubj->51, dobj->55], [], [], [det->53, amod->54, nmod:with->58], [], [], [case->56, compound->57]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What looked like dogs {
    Tokens: [what, looked, like, dogs]
    Lemmatized tokens: [what, look, like, dog]
    POS tags: [WDT, VBD, IN, NNS]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:like->3], [], [case->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Sam tried to paint a picture of shepherds with sheep, but they ended up looking more like golfers. {
    Tokens: [sam, tried, to, paint, a, picture, of, shepherds, with, sheep, ,, but, they, ended, up, looking, more, like, golfers, .]
    Lemmatized tokens: [Sam, try, to, paint, a, picture, of, shepherd, with, sheep, ,, but, they, end, up, look, more, like, golfer, .]
    POS tags: [NNP, VBD, TO, VB, DT, NN, IN, NNS, IN, NN, ,, CC, PRP, VBD, RP, VBG, JJR, IN, NNS, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, xcomp->3, punct->19, punct->10, cc->11, conj:but->13], [], [mark->2, dobj->5, nmod:with->9], [], [det->4, nmod:of->7], [], [case->6], [], [case->8], [], [], [], [xcomp->15, nsubj->12, compound:prt->14], [], [dobj->16, nmod:like->18], [], [], [case->17], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B looks like thing C, thing B has the same shape with thing C. Shepherd and golfers are same specie. Sheep and dogs are the same specie. Sheep and shepherd are not same specie. If thing B and thing C are same species, thing B has the same shape with thing C. {
    Tokens: [if, thing, b, looks, like, thing, c, ,, thing, b, has, the, same, shape, with, thing, c., shepherd, and, golfers, are, same, specie, ., sheep, and, dogs, are, the, same, specie, ., sheep, and, shepherd, are, not, same, specie, ., if, thing, b, and, thing, c, are, same, species, ,, thing, b, has, the, same, shape, with, thing, c.]
    Lemmatized tokens: [if, thing, b, look, like, thing, c, ,, thing, b, have, the, same, shape, with, thing, c., Shepherd, and, golfer, be, same, specie, ., Sheep, and, dog, be, the, same, specie, ., Sheep, and, shepherd, be, not, same, specie, ., if, thing, b, and, thing, c, be, same, species, ,, thing, b, have, the, same, shape, with, thing, C.]
    POS tags: [IN, NN, NN, VBZ, IN, NN, NN, ,, NN, NN, VBD-AUX, DT, JJ, NN, IN, NN, JJ, NNP, CC, NNS, VBD-AUX, JJ, NN, ., NNP, CC, NNS, VBD-AUX, DT, JJ, NN, ., NNP, CC, NNP, VBD-AUX, RB, JJ, NN, ., IN, NN, NN, CC, NN, NN, VBD-AUX, JJ, NNS, ,, NN, NN, VBD-AUX, DT, JJ, NN, IN, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, nmod:like->6], [], [], [case->4, compound->5], [], [], [compound->8], [advcl->3, punct->7, punct->23, nsubj->9, dobj->13], [], [], [nmod:with->15, acl:relcl->22, det->11, amod->12], [], [case->14], [], [amod->16, cc->18, conj:and->19], [], [], [], [], [nsubj->17, nsubj->19, cop->20, amod->21], [], [conj:and->26, cc->25], [], [], [], [], [], [nsubj->26, cop->27, det->28, amod->29, punct->31, nsubj->24], [], [cc->33, conj:and->34], [], [], [], [], [], [amod->37, punct->39, nsubj->32, nsubj->34, cop->35, neg->36], [], [], [], [compound->41, cc->43, conj:and->45], [], [], [compound->44], [], [], [mark->40, nsubj->42, nsubj->45, cop->46, amod->47], [], [], [compound->50], [advcl->48, punct->49, nsubj->51, dobj->55], [], [], [det->53, amod->54, nmod:with->58], [], [], [case->56, compound->57]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What looked like golfers {
    Tokens: [what, looked, like, golfers]
    Lemmatized tokens: [what, look, like, golfer]
    POS tags: [WDT, VBD, IN, NNS]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:like->3], [], [case->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Mary tucked her daughter Anne into bed, so that she could sleep. {
    Tokens: [mary, tucked, her, daughter, anne, into, bed, ,, so, that, she, could, sleep, .]
    Lemmatized tokens: [Mary, tuck, she, daughter, anne, into, bed, ,, so, that, she, could, sleep, .]
    POS tags: [NNP, VBD, PRP$, NN, VB, IN, NN, ,, RB, IN, PRP, VBD-AUX, VB, .]
    NER tags: [O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, punct->7, advcl->12, punct->13], [], [nmod:poss->2, nmod->4], [nmod:into->6], [], [case->5], [], [mwe->9], [], [], [], [mark->8, nsubj->10, aux->11], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B tucks person C into bed, person C could sleep. If person B sleeps, person B can’t work. {
    Tokens: [if, person, b, tucks, person, c, into, bed, ,, person, c, could, sleep, ., if, person, b, sleeps, ,, person, b, ca, n't, work, .]
    Lemmatized tokens: [if, person, b, tuck, person, c, into, bed, ,, person, c, could, sleep, ., if, person, b, sleep, ,, person, b, can, not, work, .]
    POS tags: [IN, NN, NN, NNS, NN, NN, IN, NN, ,, NN, NN, VBD-AUX, VB, ., IN, NN, NN, NNS, ,, NN, NN, MD, RB, VB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [compound->1, compound->2, compound->3], [mark->0, nsubj->4, nmod:into->7], [], [case->6], [], [], [compound->9], [], [advcl->5, punct->8, nsubj->10, aux->11, punct->13], [], [], [], [], [compound->16, case->14, compound->15], [], [], [compound->19], [], [], [nmod:if->17, punct->18, nsubj->20, aux->21, neg->22, punct->24], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who is going to sleep {
    Tokens: [who, is, going, to, sleep]
    Lemmatized tokens: [who, be, go, to, sleep]
    POS tags: [WP, VBD-AUX, VBG, TO, VB]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, xcomp->4], [], [mark->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Mary tucked her daughter Anne into bed, so that she could work. {
    Tokens: [mary, tucked, her, daughter, anne, into, bed, ,, so, that, she, could, work, .]
    Lemmatized tokens: [Mary, tuck, she, daughter, anne, into, bed, ,, so, that, she, could, work, .]
    POS tags: [NNP, VBD, PRP$, NN, VB, IN, NN, ,, RB, IN, PRP, VBD-AUX, VB, .]
    NER tags: [O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, punct->7, advcl->12, punct->13], [], [nmod:poss->2, nmod->4], [nmod:into->6], [], [case->5], [], [mwe->9], [], [], [], [mark->8, nsubj->10, aux->11], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B tucks person C into bed, person C could sleep. If person B sleeps, person B can’t work. {
    Tokens: [if, person, b, tucks, person, c, into, bed, ,, person, c, could, sleep, ., if, person, b, sleeps, ,, person, b, ca, n't, work, .]
    Lemmatized tokens: [if, person, b, tuck, person, c, into, bed, ,, person, c, could, sleep, ., if, person, b, sleep, ,, person, b, can, not, work, .]
    POS tags: [IN, NN, NN, NNS, NN, NN, IN, NN, ,, NN, NN, VBD-AUX, VB, ., IN, NN, NN, NNS, ,, NN, NN, MD, RB, VB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [compound->1, compound->2, compound->3], [mark->0, nsubj->4, nmod:into->7], [], [case->6], [], [], [compound->9], [], [advcl->5, punct->8, nsubj->10, aux->11, punct->13], [], [], [], [], [compound->16, case->14, compound->15], [], [], [compound->19], [], [], [nmod:if->17, punct->18, nsubj->20, aux->21, neg->22, punct->24], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who is going to work {
    Tokens: [who, is, going, to, work]
    Lemmatized tokens: [who, be, go, to, work]
    POS tags: [WP, VBD-AUX, VBG, TO, VB]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, xcomp->4], [], [mark->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Fred and Alice had very warm down coats, but they were not enough for the cold in Alaska. {
    Tokens: [fred, and, alice, had, very, warm, down, coats, ,, but, they, were, not, enough, for, the, cold, in, alaska, .]
    Lemmatized tokens: [Fred, and, Alice, have, very, warm, down, coat, ,, but, they, be, not, enough, for, the, cold, in, Alaska, .]
    POS tags: [NNP, CC, NNP, VBD-AUX, RB, JJ, IN, NNS, ,, CC, PRP, VBD-AUX, RB, RB, IN, DT, NN, IN, NNP, .]
    NER tags: [O, O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, LOCATION, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[cc->1, conj:and->2], [], [], [], [], [nsubj->0, nsubj->2, aux->3, punct->19, advmod->4, nmod:down->7, punct->8, cc->9, conj:but->13], [], [case->6], [], [], [], [], [], [nmod:for->16, nsubj->10, cop->11, neg->12], [], [], [det->15, nmod:in->18, case->14], [], [case->17], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Coats might not be enough for the cold. Persons might not be prepared for the cold. {
    Tokens: [coats, might, not, be, enough, for, the, cold, ., persons, might, not, be, prepared, for, the, cold, .]
    Lemmatized tokens: [coat, might, not, be, enough, for, the, cold, ., person, might, not, be, prepare, for, the, cold, .]
    POS tags: [NNS, VBD-AUX, RB, VBD-AUX, RB, IN, DT, NN, ., NNS, VBD-AUX, RB, VBD-AUX, VBN, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [nsubj->0, aux->1, neg->2, cop->3, nmod:for->7, punct->8], [], [], [case->5, det->6], [], [], [], [], [], [neg->11, auxpass->12, nmod:for->16, punct->17, nsubjpass->9, aux->10], [], [], [case->14, det->15], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who or what were not enough for the cold {
    Tokens: [who, or, what, were, not, enough, for, the, cold]
    Lemmatized tokens: [who, or, what, be, not, enough, for, the, cold]
    POS tags: [WP, CC, WP, VBD-AUX, RB, RB, IN, DT, NN]
    NER tags: [O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null]
    Dependency children: [[cc->1, conj:or->5], [], [], [], [], [nsubj->2, cop->3, neg->4, nmod:for->8], [], [], [case->6, det->7]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Fred and Alice had very warm down coats, but they were not prepared for the cold in Alaska. {
    Tokens: [fred, and, alice, had, very, warm, down, coats, ,, but, they, were, not, prepared, for, the, cold, in, alaska, .]
    Lemmatized tokens: [Fred, and, Alice, have, very, warm, down, coat, ,, but, they, be, not, prepare, for, the, cold, in, Alaska, .]
    POS tags: [NNP, CC, NNP, VBD-AUX, RB, JJ, IN, NNS, ,, CC, PRP, VBD-AUX, RB, VBN, IN, DT, NN, IN, NNP, .]
    NER tags: [O, O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, LOCATION, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[cc->1, conj:and->2], [], [], [], [], [nsubj->0, nsubj->2, aux->3, punct->19, advmod->4, nmod:down->7, punct->8, cc->9, conj:but->13], [], [case->6], [], [], [], [], [], [nmod:for->16, nsubjpass->10, auxpass->11, neg->12], [], [], [det->15, nmod:in->18, case->14], [], [case->17], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Coats might not be enough for the cold. Persons might not be prepared for the cold. {
    Tokens: [coats, might, not, be, enough, for, the, cold, ., persons, might, not, be, prepared, for, the, cold, .]
    Lemmatized tokens: [coat, might, not, be, enough, for, the, cold, ., person, might, not, be, prepare, for, the, cold, .]
    POS tags: [NNS, VBD-AUX, RB, VBD-AUX, RB, IN, DT, NN, ., NNS, VBD-AUX, RB, VBD-AUX, VBN, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [nsubj->0, aux->1, neg->2, cop->3, nmod:for->7, punct->8], [], [], [case->5, det->6], [], [], [], [], [], [neg->11, auxpass->12, nmod:for->16, punct->17, nsubjpass->9, aux->10], [], [], [case->14, det->15], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who or what were not prepared for the cold {
    Tokens: [who, or, what, were, not, prepared, for, the, cold]
    Lemmatized tokens: [who, or, what, be, not, prepare, for, the, cold]
    POS tags: [WP, CC, WP, VBD-AUX, RB, VBN, IN, DT, NN]
    NER tags: [O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null]
    Dependency children: [[cc->1, conj:or->5], [], [], [], [], [nsubjpass->2, auxpass->3, neg->4, nmod:for->8], [], [], [case->6, det->7]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Thomson visited Cooper's grave in 1765. At that date he had been dead for five years. {
    Tokens: [thomson, visited, cooper, 's, grave, in, 1765, ., at, that, date, he, had, been, dead, for, five, years, .]
    Lemmatized tokens: [Thomson, visit, Cooper, 's, grave, in, 1765, ., at, that, date, he, have, be, dead, for, five, year, .]
    POS tags: [NNP, VBD, NNP, POS, NN, IN, CD, ., IN, DT, NN, PRP, VBD-AUX, VBD-AUX, JJ, IN, CD, NNS, .]
    NER tags: [PERSON, O, PERSON, O, O, O, DATE, O, O, O, O, O, O, O, O, O, DURATION, DURATION, O]
    NER values: [null, null, null, null, null, null, 1765, null, null, null, null, null, null, null, null, null, P5Y, P5Y, null]
    Dependency children: [[], [nsubj->0, dobj->4, nmod:in->6, punct->7], [case->3], [], [nmod:poss->2], [], [case->5], [], [], [], [case->8, det->9], [], [], [], [nmod:at->10, nsubj->11, aux->12, cop->13, nmod:for->17, punct->18], [], [], [case->15, nummod->16], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B visit somewhere, person B might travel. If person B has grave, person B might be dead. {
    Tokens: [if, person, b, visit, somewhere, ,, person, b, might, travel, ., if, person, b, has, grave, ,, person, b, might, be, dead, .]
    Lemmatized tokens: [if, person, b, visit, somewhere, ,, person, b, might, travel, ., if, person, b, have, grave, ,, person, b, might, be, dead, .]
    POS tags: [IN, NN, NN, NN, RB, ,, NN, NN, VBD-AUX, VB, ., IN, NN, NN, VBD-AUX, NN, ,, NN, NN, VBD-AUX, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [mark->0, compound->1, compound->2, advmod->4], [], [], [], [compound->6], [], [advcl->3, punct->5, nsubj->7, aux->8, punct->10], [], [], [], [compound->12], [nsubj->13, dobj->15, mark->11], [], [], [], [compound->17], [], [], [advcl->14, punct->16, nsubj->18, aux->19, cop->20, punct->22], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who had been dead for five years {
    Tokens: [who, had, been, dead, for, five, years]
    Lemmatized tokens: [who, have, be, dead, for, five, year]
    POS tags: [WP, VBD-AUX, VBD-AUX, JJ, IN, CD, NNS]
    NER tags: [O, O, O, O, O, DURATION, DURATION]
    NER values: [null, null, null, null, null, P5Y, P5Y]
    Dependency children: [[], [], [], [nsubj->0, aux->1, cop->2, nmod:for->6], [], [], [case->4, nummod->5]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Thomson visited Cooper's grave in 1765. At that date he had been travelling for five years. {
    Tokens: [thomson, visited, cooper, 's, grave, in, 1765, ., at, that, date, he, had, been, travelling, for, five, years, .]
    Lemmatized tokens: [Thomson, visit, Cooper, 's, grave, in, 1765, ., at, that, date, he, have, be, travel, for, five, year, .]
    POS tags: [NNP, VBD, NNP, POS, NN, IN, CD, ., IN, DT, NN, PRP, VBD-AUX, VBD-AUX, VBG, IN, CD, NNS, .]
    NER tags: [PERSON, O, PERSON, O, O, O, DATE, O, O, O, O, O, O, O, O, O, DURATION, DURATION, O]
    NER values: [null, null, null, null, null, null, 1765, null, null, null, null, null, null, null, null, null, P5Y, P5Y, null]
    Dependency children: [[], [nsubj->0, dobj->4, nmod:in->6, punct->7], [case->3], [], [nmod:poss->2], [], [case->5], [], [], [], [case->8, det->9], [], [], [], [nmod:at->10, nsubj->11, aux->12, aux->13, nmod:for->17, punct->18], [], [], [case->15, nummod->16], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B visit somewhere, person B might travel. If person B has grave, person B might be dead. {
    Tokens: [if, person, b, visit, somewhere, ,, person, b, might, travel, ., if, person, b, has, grave, ,, person, b, might, be, dead, .]
    Lemmatized tokens: [if, person, b, visit, somewhere, ,, person, b, might, travel, ., if, person, b, have, grave, ,, person, b, might, be, dead, .]
    POS tags: [IN, NN, NN, NN, RB, ,, NN, NN, VBD-AUX, VB, ., IN, NN, NN, VBD-AUX, NN, ,, NN, NN, VBD-AUX, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [mark->0, compound->1, compound->2, advmod->4], [], [], [], [compound->6], [], [advcl->3, punct->5, nsubj->7, aux->8, punct->10], [], [], [], [compound->12], [nsubj->13, dobj->15, mark->11], [], [], [], [compound->17], [], [], [advcl->14, punct->16, nsubj->18, aux->19, cop->20, punct->22], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who had been travelling for five years {
    Tokens: [who, had, been, travelling, for, five, years]
    Lemmatized tokens: [who, have, be, travel, for, five, year]
    POS tags: [WP, VBD-AUX, VBD-AUX, VBG, IN, CD, NNS]
    NER tags: [O, O, O, O, O, DURATION, DURATION]
    NER values: [null, null, null, null, null, P5Y, P5Y]
    Dependency children: [[], [], [], [nsubj->0, aux->1, aux->2, nmod:for->6], [], [], [case->4, nummod->5]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Jackson was greatly influenced by Arnold, though he lived two centuries earlier. {
    Tokens: [jackson, was, greatly, influenced, by, arnold, ,, though, he, lived, two, centuries, earlier, .]
    Lemmatized tokens: [Jackson, be, greatly, influence, by, Arnold, ,, though, he, live, two, century, earlier, .]
    POS tags: [NNP, VBD-AUX, RB, VBN, IN, NNP, ,, IN, PRP, VBD, CD, NNS, RBR, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, DATE, DATE, DATE, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, OFFSET P-200Y, OFFSET P-200Y, OFFSET P-200Y, null]
    Dependency children: [[], [], [], [nsubjpass->0, auxpass->1, advmod->2, nmod:agent->5, punct->6, advcl->9, punct->13], [], [case->4], [], [], [], [mark->7, nsubj->8, advmod->12], [], [nummod->10], [nmod:npmod->11], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is influenced by person C, person B lived later and person C lived earlier. {
    Tokens: [if, person, b, is, influenced, by, person, c, ,, person, b, lived, later, and, person, c, lived, earlier, .]
    Lemmatized tokens: [if, person, b, be, influence, by, person, c, ,, person, b, live, later, and, person, c, live, earlier, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBN, IN, NN, NN, ,, NN, NN, VBD, RB, CC, NN, NN, VBD, JJR, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubjpass->2, auxpass->3, nmod:agent->7], [], [], [case->5, compound->6], [], [], [compound->9], [conj:and->16, punct->18, advcl->4, punct->8, nsubj->10, advmod->12, cc->13], [], [], [], [compound->14], [nsubj->15, dobj->17], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who lived earlier {
    Tokens: [who, lived, earlier]
    Lemmatized tokens: [who, live, earlier]
    POS tags: [WP, VBD, JJR]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Jackson was greatly influenced by Arnold, though he lived two centuries later. {
    Tokens: [jackson, was, greatly, influenced, by, arnold, ,, though, he, lived, two, centuries, later, .]
    Lemmatized tokens: [Jackson, be, greatly, influence, by, Arnold, ,, though, he, live, two, century, later, .]
    POS tags: [NNP, VBD-AUX, RB, VBN, IN, NNP, ,, IN, PRP, VBD, CD, NNS, RB, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, DATE, DATE, DATE, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, OFFSET P200Y, OFFSET P200Y, OFFSET P200Y, null]
    Dependency children: [[], [], [], [nsubjpass->0, auxpass->1, advmod->2, nmod:agent->5, punct->6, advcl->9, punct->13], [], [case->4], [], [], [], [mark->7, nsubj->8, advmod->12], [], [nummod->10], [nmod:npmod->11], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is influenced by person C, person B lived later and person C lived earlier. {
    Tokens: [if, person, b, is, influenced, by, person, c, ,, person, b, lived, later, and, person, c, lived, earlier, .]
    Lemmatized tokens: [if, person, b, be, influence, by, person, c, ,, person, b, live, later, and, person, c, live, earlier, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBN, IN, NN, NN, ,, NN, NN, VBD, RB, CC, NN, NN, VBD, JJR, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubjpass->2, auxpass->3, nmod:agent->7], [], [], [case->5, compound->6], [], [], [compound->9], [conj:and->16, punct->18, advcl->4, punct->8, nsubj->10, advmod->12, cc->13], [], [], [], [compound->14], [nsubj->15, dobj->17], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who lived later {
    Tokens: [who, lived, later]
    Lemmatized tokens: [who, live, later]
    POS tags: [WP, VBD, RB]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [nsubj->0, advmod->2], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Tom's daughter Eva is engaged to Dr. Stewart, who is his partner. The two doctors have known one another for ten years. {
    Tokens: [tom, 's, daughter, eva, is, engaged, to, dr., stewart, ,, who, is, his, partner, ., the, two, doctors, have, known, one, another, for, ten, years, .]
    Lemmatized tokens: [Tom, 's, daughter, Eva, be, engage, to, Dr., Stewart, ,, who, be, he, partner, ., the, two, doctor, have, know, one, another, for, ten, year, .]
    POS tags: [NNP, POS, NN, NNP, VBD-AUX, VBN, TO, NNP, NNP, ,, WP, VBD-AUX, PRP$, NN, ., DT, CD, NNS, VBD-AUX, VBN, CD, DT, IN, CD, NNS, .]
    NER tags: [PERSON, O, O, PERSON, O, O, O, O, PERSON, O, O, O, O, O, O, O, NUMBER, O, O, O, NUMBER, O, O, DURATION, DURATION, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 2.0, null, null, null, 1.0, null, null, P10Y, P10Y, null]
    Dependency children: [[case->1], [], [nmod:poss->0], [], [], [nsubjpass->2, nmod:tmod->3, auxpass->4, nmod:to->8, punct->14], [], [], [case->6, compound->7, punct->9, acl:relcl->13], [], [], [], [], [nsubj->10, cop->11, nmod:poss->12], [], [], [], [det->15, nummod->16], [], [nsubj->17, aux->18, dobj->20, nmod:for->24, punct->25], [dep->21], [], [], [], [case->22, nummod->23], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is engaged to person C, person B and person C are two lovers. If person B is person C’s partner, person B’s profession is the same with person C’s. {
    Tokens: [if, person, b, is, engaged, to, person, c, ,, person, b, and, person, c, are, two, lovers, ., if, person, b, is, person, c, 's, partner, ,, person, b, 's, profession, is, the, same, with, person, c, 's, .]
    Lemmatized tokens: [if, person, b, be, engage, to, person, c, ,, person, b, and, person, c, be, two, lover, ., if, person, b, be, person, c, 's, partner, ,, person, b, 's, profession, be, the, same, with, person, c, 's, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBN, TO, NN, NN, ,, NN, NN, CC, NN, NN, VBD-AUX, CD, NNS, ., IN, NN, NN, VBD-AUX, NN, NN, POS, NN, ,, NN, NN, POS, NN, VBD-AUX, DT, JJ, IN, NN, NN, POS, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, NUMBER, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 2.0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubjpass->2, auxpass->3, nmod:to->7], [], [], [case->5, compound->6], [], [], [compound->9, cc->11, conj:and->13], [], [], [compound->12], [], [], [nummod->15, punct->17, advcl->4, punct->8, nsubj->10, nsubj->13, cop->14], [], [], [], [compound->19], [], [], [compound->22, case->24], [], [nsubj->20, cop->21, nmod:poss->23, mark->18], [], [], [compound->27, case->29], [], [nmod:poss->28], [], [], [punct->38, advcl->25, punct->26, nsubj->30, cop->31, det->32, nmod:with->35], [], [nmod:poss->36, case->34], [case->37], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Which two people have known one another for ten years {
    Tokens: [which, two, people, have, known, one, another, for, ten, years]
    Lemmatized tokens: [which, two, people, have, know, one, another, for, ten, year]
    POS tags: [WDT, CD, NNS, VBD-AUX, VBN, CD, DT, IN, CD, NNS]
    NER tags: [O, NUMBER, O, O, O, NUMBER, O, O, DURATION, DURATION]
    NER values: [null, 2.0, null, null, null, 1.0, null, null, P10Y, P10Y]
    Dependency children: [[], [], [det->0, nummod->1], [], [nsubj->2, aux->3, dobj->5, nmod:for->9], [dep->6], [], [], [], [case->7, nummod->8]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Tom's daughter Eva is engaged to Dr. Stewart, who is his partner. The two lovers have known one another for ten years. {
    Tokens: [tom, 's, daughter, eva, is, engaged, to, dr., stewart, ,, who, is, his, partner, ., the, two, lovers, have, known, one, another, for, ten, years, .]
    Lemmatized tokens: [Tom, 's, daughter, Eva, be, engage, to, Dr., Stewart, ,, who, be, he, partner, ., the, two, lover, have, know, one, another, for, ten, year, .]
    POS tags: [NNP, POS, NN, NNP, VBD-AUX, VBN, TO, NNP, NNP, ,, WP, VBD-AUX, PRP$, NN, ., DT, CD, NNS, VBD-AUX, VBN, CD, DT, IN, CD, NNS, .]
    NER tags: [PERSON, O, O, PERSON, O, O, O, O, PERSON, O, O, O, O, O, O, O, NUMBER, O, O, O, NUMBER, O, O, DURATION, DURATION, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 2.0, null, null, null, 1.0, null, null, P10Y, P10Y, null]
    Dependency children: [[case->1], [], [nmod:poss->0], [], [], [nsubjpass->2, nmod:tmod->3, auxpass->4, nmod:to->8, punct->14], [], [], [case->6, compound->7, punct->9, acl:relcl->13], [], [], [], [], [nsubj->10, cop->11, nmod:poss->12], [], [], [], [det->15, nummod->16], [], [nsubj->17, aux->18, dobj->20, nmod:for->24, punct->25], [dep->21], [], [], [], [case->22, nummod->23], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is engaged to person C, person B and person C are two lovers. If person B is person C’s partner, person B’s profession is the same with person C’s. {
    Tokens: [if, person, b, is, engaged, to, person, c, ,, person, b, and, person, c, are, two, lovers, ., if, person, b, is, person, c, 's, partner, ,, person, b, 's, profession, is, the, same, with, person, c, 's, .]
    Lemmatized tokens: [if, person, b, be, engage, to, person, c, ,, person, b, and, person, c, be, two, lover, ., if, person, b, be, person, c, 's, partner, ,, person, b, 's, profession, be, the, same, with, person, c, 's, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBN, TO, NN, NN, ,, NN, NN, CC, NN, NN, VBD-AUX, CD, NNS, ., IN, NN, NN, VBD-AUX, NN, NN, POS, NN, ,, NN, NN, POS, NN, VBD-AUX, DT, JJ, IN, NN, NN, POS, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, NUMBER, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 2.0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubjpass->2, auxpass->3, nmod:to->7], [], [], [case->5, compound->6], [], [], [compound->9, cc->11, conj:and->13], [], [], [compound->12], [], [], [nummod->15, punct->17, advcl->4, punct->8, nsubj->10, nsubj->13, cop->14], [], [], [], [compound->19], [], [], [compound->22, case->24], [], [nsubj->20, cop->21, nmod:poss->23, mark->18], [], [], [compound->27, case->29], [], [nmod:poss->28], [], [], [punct->38, advcl->25, punct->26, nsubj->30, cop->31, det->32, nmod:with->35], [], [nmod:poss->36, case->34], [case->37], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Which two people have known one another for ten years {
    Tokens: [which, two, people, have, known, one, another, for, ten, years]
    Lemmatized tokens: [which, two, people, have, know, one, another, for, ten, year]
    POS tags: [WDT, CD, NNS, VBD-AUX, VBN, CD, DT, IN, CD, NNS]
    NER tags: [O, NUMBER, O, O, O, NUMBER, O, O, DURATION, DURATION]
    NER values: [null, 2.0, null, null, null, 1.0, null, null, P10Y, P10Y]
    Dependency children: [[], [], [det->0, nummod->1], [], [nsubj->2, aux->3, dobj->5, nmod:for->9], [dep->6], [], [], [], [case->7, nummod->8]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I can't cut that tree down with that axe; it is too thick. {
    Tokens: [i, ca, n't, cut, that, tree, down, with, that, axe, ;, it, is, too, thick, .]
    Lemmatized tokens: [I, can, not, cut, that, tree, down, with, that, axe, ;, it, be, too, thick, .]
    POS tags: [PRP, MD, RB, VB, DT, NN, RP, IN, DT, NNP, :, PRP, VBD-AUX, RB, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [punct->15, nsubj->0, aux->1, neg->2, dobj->5, compound:prt->6, nmod:with->9, punct->10, parataxis->14], [], [det->4], [], [], [], [case->7, det->8], [], [], [], [], [nsubj->11, cop->12, advmod->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing C is thick or thing D is small, somebody can’t cut thing C down with thing D. {
    Tokens: [if, thing, c, is, thick, or, thing, d, is, small, ,, somebody, ca, n't, cut, thing, c, down, with, thing, d.]
    Lemmatized tokens: [if, thing, c, be, thick, or, thing, d, be, small, ,, somebody, can, not, cut, thing, c, down, with, thing, D.]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, JJ, ,, NN, MD, RB, VB, NN, NN, RB, IN, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3, cc->5, conj:or->9], [], [], [compound->6], [], [nsubj->7, cop->8], [], [], [], [], [dobj->16, advmod->17, advcl->4, advcl->9, punct->10, nsubj->11, aux->12, neg->13], [], [compound->15], [nmod:with->20], [], [], [case->18, compound->19]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What is too thick {
    Tokens: [what, is, too, thick]
    Lemmatized tokens: [what, be, too, thick]
    POS tags: [WP, VBD-AUX, RB, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, advmod->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I can't cut that tree down with that axe; it is too small. {
    Tokens: [i, ca, n't, cut, that, tree, down, with, that, axe, ;, it, is, too, small, .]
    Lemmatized tokens: [I, can, not, cut, that, tree, down, with, that, axe, ;, it, be, too, small, .]
    POS tags: [PRP, MD, RB, VB, DT, NN, RP, IN, DT, NNP, :, PRP, VBD-AUX, RB, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [punct->15, nsubj->0, aux->1, neg->2, dobj->5, compound:prt->6, nmod:with->9, punct->10, parataxis->14], [], [det->4], [], [], [], [case->7, det->8], [], [], [], [], [nsubj->11, cop->12, advmod->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing C is thick or thing D is small, somebody can’t cut thing C down with thing D. {
    Tokens: [if, thing, c, is, thick, or, thing, d, is, small, ,, somebody, ca, n't, cut, thing, c, down, with, thing, d.]
    Lemmatized tokens: [if, thing, c, be, thick, or, thing, d, be, small, ,, somebody, can, not, cut, thing, c, down, with, thing, D.]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, JJ, ,, NN, MD, RB, VB, NN, NN, RB, IN, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3, cc->5, conj:or->9], [], [], [compound->6], [], [nsubj->7, cop->8], [], [], [], [], [dobj->16, advmod->17, advcl->4, advcl->9, punct->10, nsubj->11, aux->12, neg->13], [], [compound->15], [nmod:with->20], [], [], [case->18, compound->19]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What is too small {
    Tokens: [what, is, too, small]
    Lemmatized tokens: [what, be, too, small]
    POS tags: [WP, VBD-AUX, RB, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, advmod->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The foxes are getting in at night and attacking the chickens. I shall have to guard them. {
    Tokens: [the, foxes, are, getting, in, at, night, and, attacking, the, chickens, ., i, shall, have, to, guard, them, .]
    Lemmatized tokens: [the, fox, be, get, in, at, night, and, attack, the, chicken, ., I, shall, have, to, guard, they, .]
    POS tags: [DT, NNS, VBD-AUX, VBG, IN, IN, NN, CC, VBG, DT, NNS, ., PRP, VBD-AUX, VBD-AUX, TO, VB, PRP, .]
    NER tags: [O, O, O, O, O, O, TIME, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, TNI, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [nsubj->1, aux->2, nmod:at->6, cc->7, conj:and->8, punct->11], [], [], [case->4, case->5], [], [nsubj->1, dobj->10], [], [det->9], [], [], [], [xcomp->16, punct->18, nsubj->12, aux->13], [], [mark->15, dobj->17], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If animal B attacks animal C, animal B is dangerous and animal C is in danger. If animal B is dangerous, person D should kill animal B. If animal B is in danger, person D should guard animal B. {
    Tokens: [if, animal, b, attacks, animal, c, ,, animal, b, is, dangerous, and, animal, c, is, in, danger, ., if, animal, b, is, dangerous, ,, person, d, should, kill, animal, b, ., if, animal, b, is, in, danger, ,, person, d, should, guard, animal, b.]
    Lemmatized tokens: [if, animal, b, attack, animal, c, ,, animal, b, be, dangerous, and, animal, c, be, in, danger, ., if, animal, b, be, dangerous, ,, person, d, should, kill, animal, b, ., if, animal, b, be, in, danger, ,, person, d, should, guard, animal, B.]
    POS tags: [IN, NN, NN, NNS, NN, NN, ,, NN, NN, VBD-AUX, JJ, CC, JJ, NN, VBD-AUX, IN, NN, ., IN, NN, NN, VBD-AUX, JJ, ,, NN, NN, VBD-AUX, VB, NN, NN, ., IN, NN, NN, VBD-AUX, IN, NN, ,, NN, NN, VBD-AUX, VB, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [compound->1, compound->2, compound->3], [mark->0, nsubj->4], [], [], [compound->7], [], [ccomp->16, punct->17, advcl->5, punct->6, nsubj->8, cop->9, cc->11, conj:and->12], [], [nsubj->8], [], [], [], [case->15, nsubj->13, cop->14], [], [], [], [compound->19], [], [nsubj->20, cop->21, mark->18], [], [], [compound->24], [], [advcl->22, punct->23, nsubj->25, aux->26, dobj->29, punct->30], [], [compound->28], [], [], [], [compound->32], [], [], [mark->31, nsubj->33, cop->34, case->35], [], [], [compound->38], [], [advcl:in->36, punct->37, nsubj->39, aux->40, dobj->43], [], [compound->42]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What do I have to guard {
    Tokens: [what, do, i, have, to, guard]
    Lemmatized tokens: [what, do, I, have, to, guard]
    POS tags: [WP, VBD-AUX, PRP, VBD-AUX, TO, VB]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [], [], [dep->0, aux->1, nsubj->2, xcomp->5], [], [mark->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The foxes are getting in at night and attacking the chickens. I shall have to kill them. {
    Tokens: [the, foxes, are, getting, in, at, night, and, attacking, the, chickens, ., i, shall, have, to, kill, them, .]
    Lemmatized tokens: [the, fox, be, get, in, at, night, and, attack, the, chicken, ., I, shall, have, to, kill, they, .]
    POS tags: [DT, NNS, VBD-AUX, VBG, IN, IN, NN, CC, VBG, DT, NNS, ., PRP, VBD-AUX, VBD-AUX, TO, VB, PRP, .]
    NER tags: [O, O, O, O, O, O, TIME, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, TNI, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [nsubj->1, aux->2, nmod:at->6, cc->7, conj:and->8, punct->11], [], [], [case->4, case->5], [], [nsubj->1, dobj->10], [], [det->9], [], [], [], [xcomp->16, punct->18, nsubj->12, aux->13], [], [mark->15, dobj->17], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If animal B attacks animal C, animal B is dangerous and animal C is in danger. If animal B is dangerous, person D should kill animal B. If animal B is in danger, person D should guard animal B. {
    Tokens: [if, animal, b, attacks, animal, c, ,, animal, b, is, dangerous, and, animal, c, is, in, danger, ., if, animal, b, is, dangerous, ,, person, d, should, kill, animal, b, ., if, animal, b, is, in, danger, ,, person, d, should, guard, animal, b.]
    Lemmatized tokens: [if, animal, b, attack, animal, c, ,, animal, b, be, dangerous, and, animal, c, be, in, danger, ., if, animal, b, be, dangerous, ,, person, d, should, kill, animal, b, ., if, animal, b, be, in, danger, ,, person, d, should, guard, animal, B.]
    POS tags: [IN, NN, NN, NNS, NN, NN, ,, NN, NN, VBD-AUX, JJ, CC, JJ, NN, VBD-AUX, IN, NN, ., IN, NN, NN, VBD-AUX, JJ, ,, NN, NN, VBD-AUX, VB, NN, NN, ., IN, NN, NN, VBD-AUX, IN, NN, ,, NN, NN, VBD-AUX, VB, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [compound->1, compound->2, compound->3], [mark->0, nsubj->4], [], [], [compound->7], [], [ccomp->16, punct->17, advcl->5, punct->6, nsubj->8, cop->9, cc->11, conj:and->12], [], [nsubj->8], [], [], [], [case->15, nsubj->13, cop->14], [], [], [], [compound->19], [], [nsubj->20, cop->21, mark->18], [], [], [compound->24], [], [advcl->22, punct->23, nsubj->25, aux->26, dobj->29, punct->30], [], [compound->28], [], [], [], [compound->32], [], [], [mark->31, nsubj->33, cop->34, case->35], [], [], [compound->38], [], [advcl:in->36, punct->37, nsubj->39, aux->40, dobj->43], [], [compound->42]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What do I have to kill {
    Tokens: [what, do, i, have, to, kill]
    Lemmatized tokens: [what, do, I, have, to, kill]
    POS tags: [WP, VBD-AUX, PRP, VBD-AUX, TO, VB]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [], [], [dep->0, aux->1, nsubj->2, xcomp->5], [], [mark->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The foxes are getting in at night and attacking the chickens. They have gotten very bold. {
    Tokens: [the, foxes, are, getting, in, at, night, and, attacking, the, chickens, ., they, have, gotten, very, bold, .]
    Lemmatized tokens: [the, fox, be, get, in, at, night, and, attack, the, chicken, ., they, have, get, very, bold, .]
    POS tags: [DT, NNS, VBD-AUX, VBG, IN, IN, NN, CC, VBG, DT, NNS, ., PRP, VBD-AUX, VBN, RB, JJ, .]
    NER tags: [O, O, O, O, O, O, TIME, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, TNI, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [nsubj->1, aux->2, nmod:at->6, cc->7, conj:and->8, punct->11], [], [], [case->4, case->5], [], [nsubj->1, dobj->10], [], [det->9], [], [], [], [xcomp->16, punct->17, nsubj->12, aux->13], [], [advmod->15], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If animal B attacks animal C, animal B is bold and animal C is nervous. {
    Tokens: [if, animal, b, attacks, animal, c, ,, animal, b, is, bold, and, animal, c, is, nervous, .]
    Lemmatized tokens: [if, animal, b, attack, animal, c, ,, animal, b, be, bold, and, animal, c, be, nervous, .]
    POS tags: [IN, NN, NN, NNS, NN, NN, ,, NN, NN, VBD-AUX, JJ, CC, JJ, NN, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [compound->1, compound->2, compound->3], [mark->0, nsubj->4], [], [], [compound->7], [], [ccomp->15, punct->16, advcl->5, punct->6, nsubj->8, cop->9, cc->11, conj:and->12], [], [nsubj->8], [], [], [nsubj->13, cop->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What has gotten bold {
    Tokens: [what, has, gotten, bold]
    Lemmatized tokens: [what, have, get, bold]
    POS tags: [WDT, VBD-AUX, VBN, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, xcomp->3], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The foxes are getting in at night and attacking the chickens. They have gotten very nervous. {
    Tokens: [the, foxes, are, getting, in, at, night, and, attacking, the, chickens, ., they, have, gotten, very, nervous, .]
    Lemmatized tokens: [the, fox, be, get, in, at, night, and, attack, the, chicken, ., they, have, get, very, nervous, .]
    POS tags: [DT, NNS, VBD-AUX, VBG, IN, IN, NN, CC, VBG, DT, NNS, ., PRP, VBD-AUX, VBN, RB, JJ, .]
    NER tags: [O, O, O, O, O, O, TIME, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, TNI, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [nsubj->1, aux->2, nmod:at->6, cc->7, conj:and->8, punct->11], [], [], [case->4, case->5], [], [nsubj->1, dobj->10], [], [det->9], [], [], [], [xcomp->16, punct->17, nsubj->12, aux->13], [], [advmod->15], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If animal B attacks animal C, animal B is bold and animal C is nervous. {
    Tokens: [if, animal, b, attacks, animal, c, ,, animal, b, is, bold, and, animal, c, is, nervous, .]
    Lemmatized tokens: [if, animal, b, attack, animal, c, ,, animal, b, be, bold, and, animal, c, be, nervous, .]
    POS tags: [IN, NN, NN, NNS, NN, NN, ,, NN, NN, VBD-AUX, JJ, CC, JJ, NN, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [compound->1, compound->2, compound->3], [mark->0, nsubj->4], [], [], [compound->7], [], [ccomp->15, punct->16, advcl->5, punct->6, nsubj->8, cop->9, cc->11, conj:and->12], [], [nsubj->8], [], [], [nsubj->13, cop->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What has gotten nervous {
    Tokens: [what, has, gotten, nervous]
    Lemmatized tokens: [what, have, get, nervous]
    POS tags: [WDT, VBD-AUX, VBN, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, xcomp->3], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Fred covered his eyes with his hands, because the wind was blowing sand around. He opened them when the wind stopped. {
    Tokens: [fred, covered, his, eyes, with, his, hands, ,, because, the, wind, was, blowing, sand, around, ., he, opened, them, when, the, wind, stopped, .]
    Lemmatized tokens: [Fred, cover, he, eye, with, he, hand, ,, because, the, wind, be, blow, sand, around, ., he, open, they, when, the, wind, stop, .]
    POS tags: [NNP, VBD, PRP$, NNS, IN, PRP$, NNS, ,, IN, DT, NN, VBD-AUX, VBG, NN, IN, ., PRP, VBD, PRP, WRB, DT, NN, VBD, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [punct->15, nsubj->0, dobj->3, nmod:with->6, punct->7, advcl->12], [], [nmod:poss->2], [], [], [case->4, nmod:poss->5], [], [], [], [det->9], [], [mark->8, nsubj->10, aux->11, dobj->13, advmod->14], [], [], [], [], [dobj->18, advcl->22, punct->23, nsubj->16], [], [], [], [det->20], [advmod->19, nsubj->21], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B covers thing C with thing D and thing D is in lower position than thing C, thing C is closed and thing D is raised up. Hands is in lower position than eyes. If thing B is closed, person B can open thing B. If thing B is raised up, person B can lower thing B. {
    Tokens: [if, person, b, covers, thing, c, with, thing, d, and, thing, d, is, in, lower, position, than, thing, c, ,, thing, c, is, closed, and, thing, d, is, raised, up, ., hands, is, in, lower, position, than, eyes, ., if, thing, b, is, closed, ,, person, b, can, open, thing, b, ., if, thing, b, is, raised, up, ,, person, b, can, lower, thing, b.]
    Lemmatized tokens: [if, person, b, cover, thing, c, with, thing, d, and, thing, d, be, in, lower, position, than, thing, c, ,, thing, c, be, close, and, thing, d, be, raise, up, ., hand, be, in, lower, position, than, eye, ., if, thing, b, be, close, ,, person, b, can, open, thing, b, ., if, thing, b, be, raise, up, ,, person, b, can, lower, thing, B.]
    POS tags: [IN, NN, NN, VBZ, NN, NN, IN, NN, NN, CC, NN, NN, VBD-AUX, IN, JJR, NN, IN, NN, NN, ,, NN, NN, VBD-AUX, VBN, CC, NN, NN, VBD-AUX, VBN, RP, ., NNS, VBD-AUX, IN, JJR, NN, IN, NNS, ., IN, NN, NN, VBD-AUX, VBN, ,, NN, NN, VBD-AUX, VB, NN, NN, ., IN, NN, NN, VBD-AUX, VBN, RP, ,, NN, NN, VBD-AUX, VB, NNP, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [conj:and->15, mark->0, nsubj->2, dobj->5, nmod:with->8, cc->9], [], [compound->4], [], [], [case->6, compound->7], [], [], [compound->10], [], [], [], [nmod:than->18, nsubj->11, cop->12, case->13, amod->14], [], [], [case->16, compound->17], [], [], [compound->20], [], [advcl->15, advcl->3, punct->19, nsubjpass->21, auxpass->22, cc->24, conj:and->28, punct->30], [], [], [compound->25], [], [nsubjpass->26, auxpass->27, compound:prt->29], [], [], [], [], [], [], [case->33, amod->34, nmod:than->37, punct->38, nsubj->31, cop->32], [], [case->36], [], [], [], [compound->40], [], [mark->39, nsubjpass->41, auxpass->42], [], [], [compound->45], [], [punct->44, nsubj->46, aux->47, dobj->50, punct->51, advcl->43], [], [compound->49], [], [], [], [compound->53], [], [mark->52, nsubjpass->54, auxpass->55, compound:prt->57], [], [], [], [compound->59], [], [nsubj->60, aux->61, dobj->64, advcl->56, punct->58], [], [compound->63]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What did Fred open {
    Tokens: [what, did, fred, open]
    Lemmatized tokens: [what, do, Fred, open]
    POS tags: [WP, VBD-AUX, NNP, NNP]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3], [], [compound->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Fred covered his eyes with his hands, because the wind was blowing sand around. He lowered them when the wind stopped. {
    Tokens: [fred, covered, his, eyes, with, his, hands, ,, because, the, wind, was, blowing, sand, around, ., he, lowered, them, when, the, wind, stopped, .]
    Lemmatized tokens: [Fred, cover, he, eye, with, he, hand, ,, because, the, wind, be, blow, sand, around, ., he, lower, they, when, the, wind, stop, .]
    POS tags: [NNP, VBD, PRP$, NNS, IN, PRP$, NNS, ,, IN, DT, NN, VBD-AUX, VBG, NN, IN, ., PRP, VBD, PRP, WRB, DT, NN, VBD, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [punct->15, nsubj->0, dobj->3, nmod:with->6, punct->7, advcl->12], [], [nmod:poss->2], [], [], [case->4, nmod:poss->5], [], [], [], [det->9], [], [mark->8, nsubj->10, aux->11, dobj->13, advmod->14], [], [], [], [], [dobj->18, advcl->22, punct->23, nsubj->16], [], [], [], [det->20], [advmod->19, nsubj->21], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B covers thing C with thing D and thing D is in lower position than thing C, thing C is closed and thing D is raised up. Hands is in lower position than eyes. If thing B is closed, person B can open thing B. If thing B is raised up, person B can lower thing B. {
    Tokens: [if, person, b, covers, thing, c, with, thing, d, and, thing, d, is, in, lower, position, than, thing, c, ,, thing, c, is, closed, and, thing, d, is, raised, up, ., hands, is, in, lower, position, than, eyes, ., if, thing, b, is, closed, ,, person, b, can, open, thing, b, ., if, thing, b, is, raised, up, ,, person, b, can, lower, thing, b.]
    Lemmatized tokens: [if, person, b, cover, thing, c, with, thing, d, and, thing, d, be, in, lower, position, than, thing, c, ,, thing, c, be, close, and, thing, d, be, raise, up, ., hand, be, in, lower, position, than, eye, ., if, thing, b, be, close, ,, person, b, can, open, thing, b, ., if, thing, b, be, raise, up, ,, person, b, can, lower, thing, B.]
    POS tags: [IN, NN, NN, VBZ, NN, NN, IN, NN, NN, CC, NN, NN, VBD-AUX, IN, JJR, NN, IN, NN, NN, ,, NN, NN, VBD-AUX, VBN, CC, NN, NN, VBD-AUX, VBN, RP, ., NNS, VBD-AUX, IN, JJR, NN, IN, NNS, ., IN, NN, NN, VBD-AUX, VBN, ,, NN, NN, VBD-AUX, VB, NN, NN, ., IN, NN, NN, VBD-AUX, VBN, RP, ,, NN, NN, VBD-AUX, VB, NNP, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [conj:and->15, mark->0, nsubj->2, dobj->5, nmod:with->8, cc->9], [], [compound->4], [], [], [case->6, compound->7], [], [], [compound->10], [], [], [], [nmod:than->18, nsubj->11, cop->12, case->13, amod->14], [], [], [case->16, compound->17], [], [], [compound->20], [], [advcl->15, advcl->3, punct->19, nsubjpass->21, auxpass->22, cc->24, conj:and->28, punct->30], [], [], [compound->25], [], [nsubjpass->26, auxpass->27, compound:prt->29], [], [], [], [], [], [], [case->33, amod->34, nmod:than->37, punct->38, nsubj->31, cop->32], [], [case->36], [], [], [], [compound->40], [], [mark->39, nsubjpass->41, auxpass->42], [], [], [compound->45], [], [punct->44, nsubj->46, aux->47, dobj->50, punct->51, advcl->43], [], [compound->49], [], [], [], [compound->53], [], [mark->52, nsubjpass->54, auxpass->55, compound:prt->57], [], [], [], [compound->59], [], [nsubj->60, aux->61, dobj->64, advcl->56, punct->58], [], [compound->63]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What did Fred lower {
    Tokens: [what, did, fred, lower]
    Lemmatized tokens: [what, do, Fred, lower]
    POS tags: [WP, VBD-AUX, NNP, NNP]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3], [], [compound->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The actress used to be named Terpsichore, but she changed it to Tina a few years ago, because she figured it was easier to pronounce. {
    Tokens: [the, actress, used, to, be, named, terpsichore, ,, but, she, changed, it, to, tina, a, few, years, ago, ,, because, she, figured, it, was, easier, to, pronounce, .]
    Lemmatized tokens: [the, actress, use, to, be, name, Terpsichore, ,, but, she, change, it, to, Tina, a, few, year, ago, ,, because, she, figure, it, be, easier, to, pronounce, .]
    POS tags: [DT, NN, VBN, TO, VBD-AUX, VBN, NNP, ,, CC, PRP, VBD, PRP, TO, NNP, DT, JJ, NNS, RB, ,, IN, PRP, VBD, PRP, VBD-AUX, JJR, TO, VB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, DATE, DATE, DATE, DATE, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, OFFSET P-1Y, OFFSET P-1Y, OFFSET P-1Y, OFFSET P-1Y, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [nsubj->1, xcomp->5, punct->7, cc->8, conj:but->10, punct->27], [], [], [mark->3, auxpass->4, dobj->6], [], [], [], [], [punct->18, advcl->21, nsubj->9, dobj->11, nmod:to->13], [], [], [advmod->17, case->12], [], [], [amod->15, det->14], [nmod:npmod->16], [], [], [], [mark->19, nsubj->20, ccomp->24], [], [], [nsubj->22, cop->23, xcomp->26], [], [mark->25], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If name B is easier to pronounce than name C, sb change name B to name C. If name B is easier to pronounce than name C, name C is harder to pronounce than name B. {
    Tokens: [if, name, b, is, easier, to, pronounce, than, name, c, ,, sb, change, name, b, to, name, c, ., if, name, b, is, easier, to, pronounce, than, name, c, ,, name, c, is, harder, to, pronounce, than, name, b.]
    Lemmatized tokens: [if, name, b, be, easier, to, pronounce, than, name, c, ,, sb, change, name, b, to, name, c, ., if, name, b, be, easier, to, pronounce, than, name, c, ,, name, c, be, harder, to, pronounce, than, name, B.]
    POS tags: [IN, NN, NN, VBD-AUX, JJR, TO, VB, IN, VB, NN, ,, NN, NN, NN, NN, TO, VB, NN, ., IN, NN, NN, VBD-AUX, JJR, TO, VB, IN, VB, NN, ,, NN, NN, VBD-AUX, JJR, TO, VB, IN, VB, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3, xcomp->6], [], [mark->5, advmod->7], [], [xcomp->16, punct->18, csubj->4, dobj->14], [], [], [], [], [], [compound->9, punct->10, dep->11, compound->12, compound->13], [], [mark->15, dobj->17], [], [], [], [], [compound->20], [], [nsubj->21, cop->22, xcomp->25, mark->19], [], [mark->24, advcl->27], [], [mark->26, dobj->28], [], [], [], [compound->30], [], [advcl->23, punct->29, nsubj->31, cop->32, xcomp->35], [], [advcl->37, mark->34], [], [dobj->38, mark->36], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Which name was easier to pronounce {
    Tokens: [which, name, was, easier, to, pronounce]
    Lemmatized tokens: [which, name, be, easier, to, pronounce]
    POS tags: [WDT, NN, VBD-AUX, JJR, TO, VB]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [nsubj->1, cop->2, xcomp->5], [], [mark->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The actress used to be named Terpsichore, but she changed it to Tina a few years ago, because she figured it was too hard to pronounce. {
    Tokens: [the, actress, used, to, be, named, terpsichore, ,, but, she, changed, it, to, tina, a, few, years, ago, ,, because, she, figured, it, was, too, hard, to, pronounce, .]
    Lemmatized tokens: [the, actress, use, to, be, name, Terpsichore, ,, but, she, change, it, to, Tina, a, few, year, ago, ,, because, she, figure, it, be, too, hard, to, pronounce, .]
    POS tags: [DT, NN, VBN, TO, VBD-AUX, VBN, NNP, ,, CC, PRP, VBD, PRP, TO, NNP, DT, JJ, NNS, RB, ,, IN, PRP, VBD, PRP, VBD-AUX, RB, JJ, TO, VB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, DATE, DATE, DATE, DATE, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, OFFSET P-1Y, OFFSET P-1Y, OFFSET P-1Y, OFFSET P-1Y, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [nsubj->1, xcomp->5, punct->7, cc->8, conj:but->10, punct->28], [], [], [mark->3, auxpass->4, dobj->6], [], [], [], [], [punct->18, advcl->21, nsubj->9, dobj->11, nmod:to->13], [], [], [advmod->17, case->12], [], [], [amod->15, det->14], [nmod:npmod->16], [], [], [], [mark->19, nsubj->20, ccomp->25], [], [], [], [nsubj->22, cop->23, advmod->24, xcomp->27], [], [mark->26], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If name B is easier to pronounce than name C, sb change name B to name C. If name B is easier to pronounce than name C, name C is harder to pronounce than name B. {
    Tokens: [if, name, b, is, easier, to, pronounce, than, name, c, ,, sb, change, name, b, to, name, c, ., if, name, b, is, easier, to, pronounce, than, name, c, ,, name, c, is, harder, to, pronounce, than, name, b.]
    Lemmatized tokens: [if, name, b, be, easier, to, pronounce, than, name, c, ,, sb, change, name, b, to, name, c, ., if, name, b, be, easier, to, pronounce, than, name, c, ,, name, c, be, harder, to, pronounce, than, name, B.]
    POS tags: [IN, NN, NN, VBD-AUX, JJR, TO, VB, IN, VB, NN, ,, NN, NN, NN, NN, TO, VB, NN, ., IN, NN, NN, VBD-AUX, JJR, TO, VB, IN, VB, NN, ,, NN, NN, VBD-AUX, JJR, TO, VB, IN, VB, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3, xcomp->6], [], [mark->5, advmod->7], [], [xcomp->16, punct->18, csubj->4, dobj->14], [], [], [], [], [], [compound->9, punct->10, dep->11, compound->12, compound->13], [], [mark->15, dobj->17], [], [], [], [], [compound->20], [], [nsubj->21, cop->22, xcomp->25, mark->19], [], [mark->24, advcl->27], [], [mark->26, dobj->28], [], [], [], [compound->30], [], [advcl->23, punct->29, nsubj->31, cop->32, xcomp->35], [], [advcl->37, mark->34], [], [dobj->38, mark->36], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Which name was too hard to pronounce {
    Tokens: [which, name, was, too, hard, to, pronounce]
    Lemmatized tokens: [which, name, be, too, hard, to, pronounce]
    POS tags: [WDT, NN, VBD-AUX, RB, JJ, TO, VB]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [], [dobj->1, cop->2, advmod->3, xcomp->6], [], [mark->5]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Fred watched TV while George went out to buy groceries. After an hour he got up. {
    Tokens: [fred, watched, tv, while, george, went, out, to, buy, groceries, ., after, an, hour, he, got, up, .]
    Lemmatized tokens: [Fred, watch, tv, while, George, go, out, to, buy, grocery, ., after, a, hour, he, get, up, .]
    POS tags: [NNP, VBD, NN, IN, NNP, VBD, IN, TO, VB, NNS, ., IN, DT, NN, PRP, VBD, RP, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, DURATION, DURATION, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, PT1H, PT1H, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2, advcl->5, punct->10], [], [], [], [mark->3, nsubj->4, compound:prt->6, xcomp->8], [], [], [mark->7, dobj->9], [], [], [], [], [case->11, det->12], [], [nmod:after->13, nsubj->14, compound:prt->16, punct->17], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B go out to buy groceries, person B is out. If person B is out, person B could get back. If person B watches TV, he might sit down. If person B might sit down, he could get up. {
    Tokens: [if, person, b, go, out, to, buy, groceries, ,, person, b, is, out, ., if, person, b, is, out, ,, person, b, could, get, back, ., if, person, b, watches, tv, ,, he, might, sit, down, ., if, person, b, might, sit, down, ,, he, could, get, up, .]
    Lemmatized tokens: [if, person, b, go, out, to, buy, grocery, ,, person, b, be, out, ., if, person, b, be, out, ,, person, b, could, get, back, ., if, person, b, watch, tv, ,, he, might, sit, down, ., if, person, b, might, sit, down, ,, he, could, get, up, .]
    POS tags: [IN, NN, NN, VB, RP, TO, VB, NNS, ,, NN, NN, VBD-AUX, RB, ., IN, NN, NN, VBD-AUX, RB, ,, NN, NN, VBD-AUX, VB, RB, ., IN, NN, NN, VBZ, NN, ,, PRP, VBD-AUX, VB, RB, ., IN, NN, NN, VBD-AUX, VB, RB, ,, PRP, VBD-AUX, VB, RP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, compound:prt->4, xcomp->6], [], [], [mark->5, dobj->7], [], [], [], [compound->9], [], [advcl->3, punct->8, nsubj->10, cop->11, punct->13], [], [], [], [compound->15], [], [nsubj->16, cop->17, mark->14], [], [], [compound->20], [], [advcl->18, punct->19, nsubj->21, aux->22, advmod->24, punct->25], [], [], [], [], [compound->27], [mark->26, nsubj->28, dobj->30], [], [], [], [], [punct->31, nsubj->32, aux->33, advmod->35, punct->36, advcl->29], [], [], [], [], [compound->38], [], [mark->37, nsubj->39, aux->40, advmod->42], [], [], [], [], [aux->45, compound:prt->47, punct->48, advcl->41, punct->43, nsubj->44], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who got up {
    Tokens: [who, got, up]
    Lemmatized tokens: [who, get, up]
    POS tags: [WP, VBD, RP]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [nsubj->0, compound:prt->2], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Fred watched TV while George went out to buy groceries. After an hour he got back. {
    Tokens: [fred, watched, tv, while, george, went, out, to, buy, groceries, ., after, an, hour, he, got, back, .]
    Lemmatized tokens: [Fred, watch, tv, while, George, go, out, to, buy, grocery, ., after, a, hour, he, get, back, .]
    POS tags: [NNP, VBD, NN, IN, NNP, VBD, IN, TO, VB, NNS, ., IN, DT, NN, PRP, VBD, RB, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, DURATION, DURATION, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, PT1H, PT1H, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2, advcl->5, punct->10], [], [], [], [mark->3, nsubj->4, compound:prt->6, xcomp->8], [], [], [mark->7, dobj->9], [], [], [], [], [case->11, det->12], [], [nmod:after->13, nsubj->14, advmod->16, punct->17], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B go out to buy groceries, person B is out. If person B is out, person B could get back. If person B watches TV, he might sit down. If person B might sit down, he could get up. {
    Tokens: [if, person, b, go, out, to, buy, groceries, ,, person, b, is, out, ., if, person, b, is, out, ,, person, b, could, get, back, ., if, person, b, watches, tv, ,, he, might, sit, down, ., if, person, b, might, sit, down, ,, he, could, get, up, .]
    Lemmatized tokens: [if, person, b, go, out, to, buy, grocery, ,, person, b, be, out, ., if, person, b, be, out, ,, person, b, could, get, back, ., if, person, b, watch, tv, ,, he, might, sit, down, ., if, person, b, might, sit, down, ,, he, could, get, up, .]
    POS tags: [IN, NN, NN, VB, RP, TO, VB, NNS, ,, NN, NN, VBD-AUX, RB, ., IN, NN, NN, VBD-AUX, RB, ,, NN, NN, VBD-AUX, VB, RB, ., IN, NN, NN, VBZ, NN, ,, PRP, VBD-AUX, VB, RB, ., IN, NN, NN, VBD-AUX, VB, RB, ,, PRP, VBD-AUX, VB, RP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, compound:prt->4, xcomp->6], [], [], [mark->5, dobj->7], [], [], [], [compound->9], [], [advcl->3, punct->8, nsubj->10, cop->11, punct->13], [], [], [], [compound->15], [], [nsubj->16, cop->17, mark->14], [], [], [compound->20], [], [advcl->18, punct->19, nsubj->21, aux->22, advmod->24, punct->25], [], [], [], [], [compound->27], [mark->26, nsubj->28, dobj->30], [], [], [], [], [punct->31, nsubj->32, aux->33, advmod->35, punct->36, advcl->29], [], [], [], [], [compound->38], [], [mark->37, nsubj->39, aux->40, advmod->42], [], [], [], [], [aux->45, compound:prt->47, punct->48, advcl->41, punct->43, nsubj->44], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who got back {
    Tokens: [who, got, back]
    Lemmatized tokens: [who, get, back]
    POS tags: [WP, VBD, RB]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [nsubj->0, advmod->2], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Fred was supposed to run the dishwasher, but he put it off, because he wanted to watch TV. But the show turned out to be boring, so he changed his mind and turned it on. {
    Tokens: [fred, was, supposed, to, run, the, dishwasher, ,, but, he, put, it, off, ,, because, he, wanted, to, watch, tv, ., but, the, show, turned, out, to, be, boring, ,, so, he, changed, his, mind, and, turned, it, on, .]
    Lemmatized tokens: [Fred, be, suppose, to, run, the, dishwasher, ,, but, he, put, it, off, ,, because, he, want, to, watch, tv, ., but, the, show, turn, out, to, be, boring, ,, so, he, change, he, mind, and, turn, it, on, .]
    POS tags: [NNP, VBD-AUX, VBN, TO, VB, DT, NN, ,, CC, PRP, VBD, PRP, RP, ,, IN, PRP, VBD, TO, VB, NN, ., CC, DT, NN, VBD, RP, TO, VBD-AUX, JJ, ,, IN, PRP, VBD, PRP$, NN, CC, VBD, PRP, IN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubjpass->0, auxpass->1, xcomp->4, punct->20, punct->7, cc->8, conj:but->10], [], [mark->3, dobj->6], [], [det->5], [], [], [], [advcl->16, nsubj->9, dobj->11, compound:prt->12, punct->13], [], [], [], [], [], [nsubj->15, xcomp->18, mark->14], [], [mark->17, dobj->19], [], [], [], [], [det->22], [nsubj->23, punct->39, compound:prt->25, xcomp->28, punct->29, advcl->32, advcl->36, cc->21], [], [], [], [mark->26, cop->27], [], [], [], [mark->30, nsubj->31, dobj->34, cc->35, conj:and->36], [], [nmod:poss->33], [], [nsubj->31, dobj->37, nmod->38], [], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is on, thing B could be turned off. If thing B is off, thing B could be turned on. If person B watches thing C, thing C is on. If person B puts off thing C, thing C is off. {
    Tokens: [if, thing, b, is, on, ,, thing, b, could, be, turned, off, ., if, thing, b, is, off, ,, thing, b, could, be, turned, on, ., if, person, b, watches, thing, c, ,, thing, c, is, on, ., if, person, b, puts, off, thing, c, ,, thing, c, is, off, .]
    Lemmatized tokens: [if, thing, b, be, on, ,, thing, b, could, be, turn, off, ., if, thing, b, be, off, ,, thing, b, could, be, turn, on, ., if, person, b, watch, thing, c, ,, thing, c, be, on, ., if, person, b, put, off, thing, c, ,, thing, c, be, off, .]
    POS tags: [IN, NN, NN, VBD-AUX, IN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, RP, ., IN, NN, NN, VBD-AUX, RB, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, RP, ., IN, NN, NN, VBZ, NN, NN, ,, NN, NN, VBD-AUX, IN, ., IN, NN, NN, VBZ, RP, NN, NN, ,, NN, NN, VBD-AUX, RB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3], [], [], [compound->6], [], [], [advcl->4, punct->5, nsubjpass->7, aux->8, auxpass->9, compound:prt->11, punct->12], [], [], [], [], [compound->14], [nsubj->15, advmod->17, mark->13], [], [], [], [compound->19], [], [], [advcl->16, punct->18, nsubjpass->20, aux->21, auxpass->22, compound:prt->24, punct->25], [], [], [], [], [compound->27], [dobj->31, mark->26, nsubj->28], [], [compound->30], [], [], [compound->33], [], [punct->32, nsubj->34, cop->35, punct->37, advcl->29], [], [], [], [compound->39], [mark->38, nsubj->40, compound:prt->42, dobj->44], [], [], [compound->43], [], [], [compound->46], [nsubj->47, advmod->49, punct->50, advcl->41, punct->45], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What did Fred turn on {
    Tokens: [what, did, fred, turn, on]
    Lemmatized tokens: [what, do, Fred, turn, on]
    POS tags: [WP, VBD-AUX, NNP, VB, RP]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [], [], [dobj->0, aux->1, nsubj->2, compound:prt->4], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Fred was supposed to run the dishwasher, but he put it off, because he wanted to watch TV. But the show turned out to be boring, so he changed his mind and turned it off. {
    Tokens: [fred, was, supposed, to, run, the, dishwasher, ,, but, he, put, it, off, ,, because, he, wanted, to, watch, tv, ., but, the, show, turned, out, to, be, boring, ,, so, he, changed, his, mind, and, turned, it, off, .]
    Lemmatized tokens: [Fred, be, suppose, to, run, the, dishwasher, ,, but, he, put, it, off, ,, because, he, want, to, watch, tv, ., but, the, show, turn, out, to, be, boring, ,, so, he, change, he, mind, and, turn, it, off, .]
    POS tags: [NNP, VBD-AUX, VBN, TO, VB, DT, NN, ,, CC, PRP, VBD, PRP, RP, ,, IN, PRP, VBD, TO, VB, NN, ., CC, DT, NN, VBD, RP, TO, VBD-AUX, JJ, ,, IN, PRP, VBD, PRP$, NN, CC, VBD, PRP, RP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubjpass->0, auxpass->1, xcomp->4, punct->20, punct->7, cc->8, conj:but->10], [], [mark->3, dobj->6], [], [det->5], [], [], [], [advcl->16, nsubj->9, dobj->11, compound:prt->12, punct->13], [], [], [], [], [], [nsubj->15, xcomp->18, mark->14], [], [mark->17, dobj->19], [], [], [], [], [det->22], [nsubj->23, punct->39, compound:prt->25, xcomp->28, punct->29, advcl->32, advcl->36, cc->21], [], [], [], [mark->26, cop->27], [], [], [], [mark->30, nsubj->31, dobj->34, cc->35, conj:and->36], [], [nmod:poss->33], [], [nsubj->31, dobj->37, compound:prt->38], [], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is on, thing B could be turned off. If thing B is off, thing B could be turned on. If person B watches thing C, thing C is on. If person B puts off thing C, thing C is off. {
    Tokens: [if, thing, b, is, on, ,, thing, b, could, be, turned, off, ., if, thing, b, is, off, ,, thing, b, could, be, turned, on, ., if, person, b, watches, thing, c, ,, thing, c, is, on, ., if, person, b, puts, off, thing, c, ,, thing, c, is, off, .]
    Lemmatized tokens: [if, thing, b, be, on, ,, thing, b, could, be, turn, off, ., if, thing, b, be, off, ,, thing, b, could, be, turn, on, ., if, person, b, watch, thing, c, ,, thing, c, be, on, ., if, person, b, put, off, thing, c, ,, thing, c, be, off, .]
    POS tags: [IN, NN, NN, VBD-AUX, IN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, RP, ., IN, NN, NN, VBD-AUX, RB, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, RP, ., IN, NN, NN, VBZ, NN, NN, ,, NN, NN, VBD-AUX, IN, ., IN, NN, NN, VBZ, RP, NN, NN, ,, NN, NN, VBD-AUX, RB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3], [], [], [compound->6], [], [], [advcl->4, punct->5, nsubjpass->7, aux->8, auxpass->9, compound:prt->11, punct->12], [], [], [], [], [compound->14], [nsubj->15, advmod->17, mark->13], [], [], [], [compound->19], [], [], [advcl->16, punct->18, nsubjpass->20, aux->21, auxpass->22, compound:prt->24, punct->25], [], [], [], [], [compound->27], [dobj->31, mark->26, nsubj->28], [], [compound->30], [], [], [compound->33], [], [punct->32, nsubj->34, cop->35, punct->37, advcl->29], [], [], [], [compound->39], [mark->38, nsubj->40, compound:prt->42, dobj->44], [], [], [compound->43], [], [], [compound->46], [nsubj->47, advmod->49, punct->50, advcl->41, punct->45], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What did Fred turn off {
    Tokens: [what, did, fred, turn, off]
    Lemmatized tokens: [what, do, Fred, turn, off]
    POS tags: [WP, VBD-AUX, NNP, VB, RP]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [], [], [dobj->0, aux->1, nsubj->2, compound:prt->4], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Fred is the only man still alive who remembers my great-grandfather. He is a remarkable man. {
    Tokens: [fred, is, the, only, man, still, alive, who, remembers, my, great, grandfather, ., he, is, a, remarkable, man, .]
    Lemmatized tokens: [Fred, be, the, only, man, still, alive, who, remember, my, great, grandfather, ., he, be, a, remarkable, man, .]
    POS tags: [NNP, VBD-AUX, DT, JJ, NN, RB, JJ, WP, VBZ, PRP$, JJ, NN, ., PRP, VBD-AUX, DT, JJ, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [nsubj->0, cop->1, det->2, amod->3, amod->6, acl:relcl->8, punct->12], [], [advmod->5], [], [nsubj->7, dobj->11], [], [], [nmod:poss->9, amod->10], [], [], [], [], [], [det->15, amod->16, punct->18, nsubj->13, cop->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is alive, person B is remarkable. If person B is dead, person B was remarkable. Great-grandfather might be dead. {
    Tokens: [if, person, b, is, alive, ,, person, b, is, remarkable, ., if, person, b, is, dead, ,, person, b, was, remarkable, ., great, grandfather, might, be, dead, .]
    Lemmatized tokens: [if, person, b, be, alive, ,, person, b, be, remarkable, ., if, person, b, be, dead, ,, person, b, be, remarkable, ., great, grandfather, might, be, dead, .]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, ,, NN, NN, VBD-AUX, JJ, ., IN, NN, NN, VBD-AUX, JJ, ,, NN, NN, VBD-AUX, JJ, ., JJ, NN, VBD-AUX, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3], [], [], [compound->6], [], [advcl->4, punct->5, nsubj->7, cop->8, punct->10], [], [], [], [compound->12], [], [nsubj->13, cop->14, mark->11], [], [], [compound->17], [], [advcl->15, punct->16, nsubj->18, cop->19, punct->21], [], [], [amod->22], [], [], [punct->27, nsubj->23, aux->24, cop->25], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who is a remarkable man {
    Tokens: [who, is, a, remarkable, man]
    Lemmatized tokens: [who, be, a, remarkable, man]
    POS tags: [WP, VBD-AUX, DT, JJ, NN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[cop->1, nsubj->4], [], [], [], [det->2, amod->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Fred is the only man still alive who remembers my great-grandfather. He was a remarkable man. {
    Tokens: [fred, is, the, only, man, still, alive, who, remembers, my, great, grandfather, ., he, was, a, remarkable, man, .]
    Lemmatized tokens: [Fred, be, the, only, man, still, alive, who, remember, my, great, grandfather, ., he, be, a, remarkable, man, .]
    POS tags: [NNP, VBD-AUX, DT, JJ, NN, RB, JJ, WP, VBZ, PRP$, JJ, NN, ., PRP, VBD-AUX, DT, JJ, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [nsubj->0, cop->1, det->2, amod->3, amod->6, acl:relcl->8, punct->12], [], [advmod->5], [], [nsubj->7, dobj->11], [], [], [nmod:poss->9, amod->10], [], [], [], [], [], [det->15, amod->16, punct->18, nsubj->13, cop->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is alive, person B is remarkable. If person B is dead, person B was remarkable. Great-grandfather might be dead. {
    Tokens: [if, person, b, is, alive, ,, person, b, is, remarkable, ., if, person, b, is, dead, ,, person, b, was, remarkable, ., great, grandfather, might, be, dead, .]
    Lemmatized tokens: [if, person, b, be, alive, ,, person, b, be, remarkable, ., if, person, b, be, dead, ,, person, b, be, remarkable, ., great, grandfather, might, be, dead, .]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, ,, NN, NN, VBD-AUX, JJ, ., IN, NN, NN, VBD-AUX, JJ, ,, NN, NN, VBD-AUX, JJ, ., JJ, NN, VBD-AUX, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3], [], [], [compound->6], [], [advcl->4, punct->5, nsubj->7, cop->8, punct->10], [], [], [], [compound->12], [], [nsubj->13, cop->14, mark->11], [], [], [compound->17], [], [advcl->15, punct->16, nsubj->18, cop->19, punct->21], [], [], [amod->22], [], [], [punct->27, nsubj->23, aux->24, cop->25], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was a remarkable man {
    Tokens: [who, was, a, remarkable, man]
    Lemmatized tokens: [who, be, a, remarkable, man]
    POS tags: [WP, VBD-AUX, DT, JJ, NN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[cop->1, nsubj->4], [], [], [], [det->2, amod->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Fred is the only man alive who still remembers my father as an infant. When Fred first saw my father, he was twelve years old. {
    Tokens: [fred, is, the, only, man, alive, who, still, remembers, my, father, as, an, infant, ., when, fred, first, saw, my, father, ,, he, was, twelve, years, old, .]
    Lemmatized tokens: [Fred, be, the, only, man, alive, who, still, remember, my, father, as, a, infant, ., when, Fred, first, see, my, father, ,, he, be, twelve, year, old, .]
    POS tags: [NNP, VBD-AUX, DT, JJ, NN, JJ, WP, RB, VBZ, PRP$, NN, IN, DT, NN, ., WRB, NNP, RB, VBD, PRP$, NN, ,, PRP, VBD-AUX, CD, NNS, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, ORDINAL, O, O, O, O, O, O, DURATION, DURATION, DURATION, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1.0, null, null, null, null, null, null, P12Y, P12Y, P12Y, null]
    Dependency children: [[], [], [], [], [nsubj->0, cop->1, det->2, amod->3, amod->5, acl:relcl->8, punct->14], [], [], [], [nsubj->6, advmod->7, dobj->10, nmod:as->13], [], [nmod:poss->9], [], [], [case->11, det->12], [], [], [], [], [advmod->17, dobj->20, advmod->15, nsubj->16], [], [nmod:poss->19], [], [], [], [], [nummod->24], [advcl->18, punct->21, nsubj->22, cop->23, nmod:npmod->25, punct->27], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is an infant, his age is less than three years. Twelve years is not less than three years. Twelve months is equal to one year. One year is less than three years. {
    Tokens: [if, person, b, is, an, infant, ,, his, age, is, less, than, three, years, ., twelve, years, is, not, less, than, three, years, ., twelve, months, is, equal, to, one, year, ., one, year, is, less, than, three, years, .]
    Lemmatized tokens: [if, person, b, be, a, infant, ,, he, age, be, less, than, three, year, ., twelve, year, be, not, less, than, three, year, ., twelve, month, be, equal, to, one, year, ., one, year, be, less, than, three, year, .]
    POS tags: [IN, NN, NN, VBD-AUX, DT, NN, ,, PRP$, NN, VBD-AUX, JJR, IN, CD, NNS, ., CD, NNS, VBD-AUX, RB, JJR, IN, CD, NNS, ., CD, NNS, VBD-AUX, JJ, TO, CD, NN, ., CD, NN, VBD-AUX, JJR, IN, CD, NNS, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, DURATION, DURATION, DURATION, DURATION, O, DURATION, DURATION, O, O, DURATION, DURATION, DURATION, DURATION, O, DURATION, DURATION, O, O, O, DURATION, DURATION, O, DURATION, DURATION, O, DURATION, DURATION, DURATION, DURATION, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, P3Y, P3Y, P3Y, P3Y, null, P12Y, P12Y, null, null, P3Y, P3Y, P3Y, P3Y, null, P12M, P12M, null, null, null, P1Y, P1Y, null, P1Y, P1Y, null, P3Y, P3Y, P3Y, P3Y, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubj->2, cop->3, det->4], [], [], [nmod:poss->7], [], [mwe->11], [], [advmod->10], [advcl->5, punct->6, nsubj->8, cop->9, nummod->12, punct->14], [], [], [nummod->15], [], [], [mwe->20], [], [advmod->19], [cop->17, neg->18, nummod->21, punct->23, nsubj->16], [], [], [nummod->24], [], [nmod:to->30, punct->31, nsubj->25, cop->26], [], [], [nummod->29, case->28], [], [], [nummod->32], [], [mwe->36], [], [advmod->35], [nsubj->33, cop->34, nummod->37, punct->39], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was twelve years old {
    Tokens: [who, was, twelve, years, old]
    Lemmatized tokens: [who, be, twelve, year, old]
    POS tags: [WP, VBD-AUX, CD, NNS, JJ]
    NER tags: [O, O, DURATION, DURATION, DURATION]
    NER values: [null, null, P12Y, P12Y, P12Y]
    Dependency children: [[], [], [], [nummod->2], [nsubj->0, cop->1, nmod:npmod->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Fred is the only man alive who still remembers my father as an infant. When Fred first saw my father, he was twelve months old. {
    Tokens: [fred, is, the, only, man, alive, who, still, remembers, my, father, as, an, infant, ., when, fred, first, saw, my, father, ,, he, was, twelve, months, old, .]
    Lemmatized tokens: [Fred, be, the, only, man, alive, who, still, remember, my, father, as, a, infant, ., when, Fred, first, see, my, father, ,, he, be, twelve, month, old, .]
    POS tags: [NNP, VBD-AUX, DT, JJ, NN, JJ, WP, RB, VBZ, PRP$, NN, IN, DT, NN, ., WRB, NNP, RB, VBD, PRP$, NN, ,, PRP, VBD-AUX, CD, NNS, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, ORDINAL, O, O, O, O, O, O, DURATION, DURATION, DURATION, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1.0, null, null, null, null, null, null, P12M, P12M, P12M, null]
    Dependency children: [[], [], [], [], [nsubj->0, cop->1, det->2, amod->3, amod->5, acl:relcl->8, punct->14], [], [], [], [nsubj->6, advmod->7, dobj->10, nmod:as->13], [], [nmod:poss->9], [], [], [case->11, det->12], [], [], [], [], [advmod->17, dobj->20, advmod->15, nsubj->16], [], [nmod:poss->19], [], [], [], [], [nummod->24], [advcl->18, punct->21, nsubj->22, cop->23, nmod:npmod->25, punct->27], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is an infant, his age is less than three years. Twelve years is not less than three years. Twelve months is equal to one year. One year is less than three years. {
    Tokens: [if, person, b, is, an, infant, ,, his, age, is, less, than, three, years, ., twelve, years, is, not, less, than, three, years, ., twelve, months, is, equal, to, one, year, ., one, year, is, less, than, three, years, .]
    Lemmatized tokens: [if, person, b, be, a, infant, ,, he, age, be, less, than, three, year, ., twelve, year, be, not, less, than, three, year, ., twelve, month, be, equal, to, one, year, ., one, year, be, less, than, three, year, .]
    POS tags: [IN, NN, NN, VBD-AUX, DT, NN, ,, PRP$, NN, VBD-AUX, JJR, IN, CD, NNS, ., CD, NNS, VBD-AUX, RB, JJR, IN, CD, NNS, ., CD, NNS, VBD-AUX, JJ, TO, CD, NN, ., CD, NN, VBD-AUX, JJR, IN, CD, NNS, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, DURATION, DURATION, DURATION, DURATION, O, DURATION, DURATION, O, O, DURATION, DURATION, DURATION, DURATION, O, DURATION, DURATION, O, O, O, DURATION, DURATION, O, DURATION, DURATION, O, DURATION, DURATION, DURATION, DURATION, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, P3Y, P3Y, P3Y, P3Y, null, P12Y, P12Y, null, null, P3Y, P3Y, P3Y, P3Y, null, P12M, P12M, null, null, null, P1Y, P1Y, null, P1Y, P1Y, null, P3Y, P3Y, P3Y, P3Y, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubj->2, cop->3, det->4], [], [], [nmod:poss->7], [], [mwe->11], [], [advmod->10], [advcl->5, punct->6, nsubj->8, cop->9, nummod->12, punct->14], [], [], [nummod->15], [], [], [mwe->20], [], [advmod->19], [cop->17, neg->18, nummod->21, punct->23, nsubj->16], [], [], [nummod->24], [], [nmod:to->30, punct->31, nsubj->25, cop->26], [], [], [nummod->29, case->28], [], [], [nummod->32], [], [mwe->36], [], [advmod->35], [nsubj->33, cop->34, nummod->37, punct->39], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was twelve months old {
    Tokens: [who, was, twelve, months, old]
    Lemmatized tokens: [who, be, twelve, month, old]
    POS tags: [WP, VBD-AUX, CD, NNS, JJ]
    NER tags: [O, O, DURATION, DURATION, DURATION]
    NER values: [null, null, P12M, P12M, P12M]
    Dependency children: [[], [], [], [nummod->2], [nsubj->0, cop->1, nmod:npmod->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: In July, Kamtchatka declared war on Yakutsk. Since Yakutsk's army was much better equipped and ten times larger, they were victorious within weeks. {
    Tokens: [in, july, ,, kamtchatka, declared, war, on, yakutsk, ., since, yakutsk, 's, army, was, much, better, equipped, and, ten, times, larger, ,, they, were, victorious, within, weeks, .]
    Lemmatized tokens: [in, July, ,, Kamtchatka, declare, war, on, Yakutsk, ., since, Yakutsk, 's, army, be, much, better, equip, and, ten, time, larger, ,, they, be, victorious, within, week, .]
    POS tags: [IN, NNP, ,, NNP, VBD, NN, IN, NNP, ., IN, NNP, POS, NN, VBD-AUX, RB, JJR, VBN, CC, CD, NNS, JJR, ,, PRP, VBD-AUX, JJ, IN, NNS, .]
    NER tags: [O, DATE, O, O, O, O, O, LOCATION, O, O, LOCATION, O, O, O, O, O, O, O, NUMBER, O, O, O, O, O, O, O, DURATION, O]
    NER values: [null, XXXX-07, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 10.0, null, null, null, null, null, null, null, PXW, null]
    Dependency children: [[], [case->0], [], [], [nmod:in->1, punct->2, nsubj->3, dobj->5, nmod:on->7, punct->8], [], [], [case->6], [], [], [case->11], [], [nmod:poss->10], [], [], [advmod->14], [nsubjpass->12, auxpass->13, advmod->15, cc->17, conj:and->20, mark->9], [], [], [nummod->18], [nsubj->12, nmod:npmod->19], [], [], [], [punct->27, advcl->16, advcl->20, punct->21, nsubj->22, cop->23, nmod:within->26], [], [case->25], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If region B is stronger,  region B wins. If region B wins, region B is victorious and  not defeated. If region B is better, region B is stronger. {
    Tokens: [if, region, b, is, stronger, ,, region, b, wins, ., if, region, b, wins, ,, region, b, is, victorious, and, not, defeated, ., if, region, b, is, better, ,, region, b, is, stronger, .]
    Lemmatized tokens: [if, region, b, be, stronger, ,, region, b, win, ., if, region, b, win, ,, region, b, be, victorious, and, not, defeat, ., if, region, b, be, better, ,, region, b, be, stronger, .]
    POS tags: [IN, NN, NN, VBD-AUX, JJR, ,, NN, NN, NNS, ., IN, NN, NN, VBZ, ,, NN, NN, VBD-AUX, JJ, CC, RB, VBN, ., IN, NN, NN, VBD-AUX, RBR, ,, NN, NN, VBD-AUX, JJR, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [case->0, compound->1], [nmod:if->2, nsubj->4, punct->9], [punct->5, appos->8], [], [], [], [compound->6, compound->7], [], [], [], [compound->11], [nsubj->12, mark->10], [], [], [compound->15], [], [advcl->13, punct->14, nsubj->16, cop->17, cc->19, conj:and->21, punct->22], [], [], [nsubj->16, neg->20], [], [], [], [compound->24], [], [mark->23, nsubj->25, cop->26], [], [], [compound->29], [], [punct->28, nsubj->30, cop->31, punct->33, advcl->27], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was victorious {
    Tokens: [who, was, victorious]
    Lemmatized tokens: [who, be, victorious]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: In July, Kamtchatka declared war on Yakutsk. Since Yakutsk's army was much better equipped and ten times larger, they were defeated within weeks. {
    Tokens: [in, july, ,, kamtchatka, declared, war, on, yakutsk, ., since, yakutsk, 's, army, was, much, better, equipped, and, ten, times, larger, ,, they, were, defeated, within, weeks, .]
    Lemmatized tokens: [in, July, ,, Kamtchatka, declare, war, on, Yakutsk, ., since, Yakutsk, 's, army, be, much, better, equip, and, ten, time, larger, ,, they, be, defeat, within, week, .]
    POS tags: [IN, NNP, ,, NNP, VBD, NN, IN, NNP, ., IN, NNP, POS, NN, VBD-AUX, RB, JJR, VBN, CC, CD, NNS, JJR, ,, PRP, VBD-AUX, VBN, IN, NNS, .]
    NER tags: [O, DATE, O, O, O, O, O, LOCATION, O, O, LOCATION, O, O, O, O, O, O, O, NUMBER, O, O, O, O, O, O, O, DURATION, O]
    NER values: [null, XXXX-07, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 10.0, null, null, null, null, null, null, null, PXW, null]
    Dependency children: [[], [case->0], [], [], [nmod:in->1, punct->2, nsubj->3, dobj->5, nmod:on->7, punct->8], [], [], [case->6], [], [], [case->11], [], [nmod:poss->10], [], [], [advmod->14], [nsubjpass->12, auxpass->13, advmod->15, cc->17, conj:and->20, mark->9], [], [], [nummod->18], [nsubj->12, nmod:npmod->19], [], [], [], [punct->27, advcl->16, advcl->20, punct->21, nsubjpass->22, auxpass->23, nmod:within->26], [], [case->25], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If region B is stronger,  region B wins. If region B wins, region B is victorious and  not defeated. If region B is better, region B is stronger. {
    Tokens: [if, region, b, is, stronger, ,, region, b, wins, ., if, region, b, wins, ,, region, b, is, victorious, and, not, defeated, ., if, region, b, is, better, ,, region, b, is, stronger, .]
    Lemmatized tokens: [if, region, b, be, stronger, ,, region, b, win, ., if, region, b, win, ,, region, b, be, victorious, and, not, defeat, ., if, region, b, be, better, ,, region, b, be, stronger, .]
    POS tags: [IN, NN, NN, VBD-AUX, JJR, ,, NN, NN, NNS, ., IN, NN, NN, VBZ, ,, NN, NN, VBD-AUX, JJ, CC, RB, VBN, ., IN, NN, NN, VBD-AUX, RBR, ,, NN, NN, VBD-AUX, JJR, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [case->0, compound->1], [nmod:if->2, nsubj->4, punct->9], [punct->5, appos->8], [], [], [], [compound->6, compound->7], [], [], [], [compound->11], [nsubj->12, mark->10], [], [], [compound->15], [], [advcl->13, punct->14, nsubj->16, cop->17, cc->19, conj:and->21, punct->22], [], [], [nsubj->16, neg->20], [], [], [], [compound->24], [], [mark->23, nsubj->25, cop->26], [], [], [compound->29], [], [punct->28, nsubj->30, cop->31, punct->33, advcl->27], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was defeated {
    Tokens: [who, was, defeated]
    Lemmatized tokens: [who, be, defeat]
    POS tags: [WP, VBD-AUX, VBN]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubjpass->0, auxpass->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Elizabeth moved her company from Sparta to Troy to save money on taxes; the taxes are much higher there. {
    Tokens: [elizabeth, moved, her, company, from, sparta, to, troy, to, save, money, on, taxes, ;, the, taxes, are, much, higher, there, .]
    Lemmatized tokens: [Elizabeth, move, she, company, from, Sparta, to, Troy, to, save, money, on, tax, ;, the, tax, be, much, higher, there, .]
    POS tags: [NNP, VBD, PRP$, NN, IN, NNP, TO, NNP, TO, VB, NN, IN, NNS, :, DT, NNS, VBD-AUX, RB, JJR, EX, .]
    NER tags: [PERSON, O, O, O, O, ORGANIZATION, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, parataxis->19, punct->20, nmod:from->5, nmod:to->7, advcl->9, punct->13], [], [nmod:poss->2], [], [case->4], [], [case->6], [], [mark->8, dobj->10, nmod:on->12], [], [], [case->11], [], [], [det->14], [], [], [advmod->17], [nsubj->15, cop->16, advmod->18], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B moves from place C to place D to do sth, person B do sth in place D. If place D might has lower taxes and place C has higher taxes , person B can save money in place D. If person B save money in place D, person B do sth in place D. {
    Tokens: [if, person, b, moves, from, place, c, to, place, d, to, do, sth, ,, person, b, do, sth, in, place, d, ., if, place, d, might, has, lower, taxes, and, place, c, has, higher, taxes, ,, person, b, can, save, money, in, place, d, ., if, person, b, save, money, in, place, d, ,, person, b, do, sth, in, place, d.]
    Lemmatized tokens: [if, person, b, move, from, place, c, to, place, d, to, do, sth, ,, person, b, do, sth, in, place, d, ., if, place, d, might, have, lower, tax, and, place, c, have, higher, tax, ,, person, b, can, save, money, in, place, d, ., if, person, b, save, money, in, place, d, ,, person, b, do, sth, in, place, D.]
    POS tags: [IN, NN, NN, NNS, IN, NN, NN, TO, NN, NN, TO, VBD-AUX, NN, ,, NN, NN, VBD-AUX, NN, IN, NN, NN, ., IN, NN, NN, VBD-AUX, VBD-AUX, JJR, NNS, CC, NN, NN, VBD-AUX, JJR, NNS, ,, NN, NN, VBD-AUX, VB, NN, IN, NN, NN, ., IN, NN, NN, VB, NN, IN, NN, NN, ,, NN, NN, VBD-AUX, NN, IN, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [compound->1, compound->2, nmod:from->6], [], [], [case->4, compound->5, nmod:to->9], [], [], [case->7, compound->8], [], [mark->0, nsubj->3, mark->10, dobj->12], [], [], [], [compound->14], [nsubj->15, dobj->17, punct->21, advcl->11, punct->13], [nmod:in->20], [], [], [case->18, compound->19], [], [], [], [compound->23], [], [nsubj->24, aux->25, dobj->28, cc->29, conj:and->32, mark->22], [], [amod->27], [], [], [compound->30], [nsubj->31, dobj->34], [], [amod->33], [], [], [compound->36], [], [dobj->40, advcl->26, nmod:in->43, punct->44, advcl->32, punct->35, nsubj->37, aux->38], [], [], [], [case->41, compound->42], [], [], [], [compound->46], [nmod:in->52, mark->45, nsubj->47, dobj->49], [], [], [], [case->50, compound->51], [], [], [compound->54], [punct->53, nsubj->55, dobj->57, advcl->48], [nmod:in->60], [], [], [case->58, compound->59]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Where are the taxes higher {
    Tokens: [where, are, the, taxes, higher]
    Lemmatized tokens: [where, be, the, tax, higher]
    POS tags: [WRB, VBD-AUX, DT, NNS, JJR]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [], [], [det->2], [advmod->0, cop->1, nsubj->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Elizabeth moved her company from Sparta to Troy to save money on taxes; the taxes are much lower there. {
    Tokens: [elizabeth, moved, her, company, from, sparta, to, troy, to, save, money, on, taxes, ;, the, taxes, are, much, lower, there, .]
    Lemmatized tokens: [Elizabeth, move, she, company, from, Sparta, to, Troy, to, save, money, on, tax, ;, the, tax, be, much, lower, there, .]
    POS tags: [NNP, VBD, PRP$, NN, IN, NNP, TO, NNP, TO, VB, NN, IN, NNS, :, DT, NNS, VBD-AUX, RB, JJR, EX, .]
    NER tags: [PERSON, O, O, O, O, ORGANIZATION, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, parataxis->19, punct->20, nmod:from->5, nmod:to->7, advcl->9, punct->13], [], [nmod:poss->2], [], [case->4], [], [case->6], [], [mark->8, dobj->10, nmod:on->12], [], [], [case->11], [], [], [det->14], [], [], [advmod->17], [nsubj->15, cop->16, advmod->18], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B moves from place C to place D to do sth, person B do sth in place D. If place D might has lower taxes and place C has higher taxes , person B can save money in place D. If person B save money in place D, person B do sth in place D. {
    Tokens: [if, person, b, moves, from, place, c, to, place, d, to, do, sth, ,, person, b, do, sth, in, place, d, ., if, place, d, might, has, lower, taxes, and, place, c, has, higher, taxes, ,, person, b, can, save, money, in, place, d, ., if, person, b, save, money, in, place, d, ,, person, b, do, sth, in, place, d.]
    Lemmatized tokens: [if, person, b, move, from, place, c, to, place, d, to, do, sth, ,, person, b, do, sth, in, place, d, ., if, place, d, might, have, lower, tax, and, place, c, have, higher, tax, ,, person, b, can, save, money, in, place, d, ., if, person, b, save, money, in, place, d, ,, person, b, do, sth, in, place, D.]
    POS tags: [IN, NN, NN, NNS, IN, NN, NN, TO, NN, NN, TO, VBD-AUX, NN, ,, NN, NN, VBD-AUX, NN, IN, NN, NN, ., IN, NN, NN, VBD-AUX, VBD-AUX, JJR, NNS, CC, NN, NN, VBD-AUX, JJR, NNS, ,, NN, NN, VBD-AUX, VB, NN, IN, NN, NN, ., IN, NN, NN, VB, NN, IN, NN, NN, ,, NN, NN, VBD-AUX, NN, IN, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [compound->1, compound->2, nmod:from->6], [], [], [case->4, compound->5, nmod:to->9], [], [], [case->7, compound->8], [], [mark->0, nsubj->3, mark->10, dobj->12], [], [], [], [compound->14], [nsubj->15, dobj->17, punct->21, advcl->11, punct->13], [nmod:in->20], [], [], [case->18, compound->19], [], [], [], [compound->23], [], [nsubj->24, aux->25, dobj->28, cc->29, conj:and->32, mark->22], [], [amod->27], [], [], [compound->30], [nsubj->31, dobj->34], [], [amod->33], [], [], [compound->36], [], [dobj->40, advcl->26, nmod:in->43, punct->44, advcl->32, punct->35, nsubj->37, aux->38], [], [], [], [case->41, compound->42], [], [], [], [compound->46], [nmod:in->52, mark->45, nsubj->47, dobj->49], [], [], [], [case->50, compound->51], [], [], [compound->54], [punct->53, nsubj->55, dobj->57, advcl->48], [nmod:in->60], [], [], [case->58, compound->59]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Where are the taxes lower {
    Tokens: [where, are, the, taxes, lower]
    Lemmatized tokens: [where, be, the, tax, lower]
    POS tags: [WRB, VBD-AUX, DT, NNS, JJR]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [], [], [det->2], [advmod->0, cop->1, nsubj->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Esther figures that she will save shipping costs if she builds her factory in Springfield instead of Franklin, because most of her customers live there. {
    Tokens: [esther, figures, that, she, will, save, shipping, costs, if, she, builds, her, factory, in, springfield, instead, of, franklin, ,, because, most, of, her, customers, live, there, .]
    Lemmatized tokens: [Esther, figure, that, she, will, save, shipping, cost, if, she, build, she, factory, in, Springfield, instead, of, Franklin, ,, because, most, of, she, customer, live, there, .]
    POS tags: [NNP, VBZ, IN, PRP, VBD-AUX, VB, NN, NNS, IN, PRP, VBZ, PRP$, NN, IN, NNP, RB, IN, NNP, ,, IN, JJS, IN, PRP$, NNS, VBP, EX, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, LOCATION, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, ccomp->5, punct->26], [], [], [], [mark->2, nsubj->3, aux->4, dobj->7, advcl->10], [], [compound->6], [], [], [punct->18, mark->8, advcl->24, nsubj->9, dobj->12, nmod:in->14], [], [nmod:poss->11], [], [nmod:instead_of->17, case->13], [mwe->16], [], [case->15], [], [], [nmod:of->23], [], [], [case->21, nmod:poss->22], [mark->19, nsubj->20, xcomp->25], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B builds factory in place C and most of customers live in place C, person B will save shipping costs.  If person B doesn’t build factory in place C and none of customers live in place C, person B might save money. If person B builds factory in place C instead of place D, person B builds factory in place C and person B doesn’t build factory in place D. {
    Tokens: [if, person, b, builds, factory, in, place, c, and, most, of, customers, live, in, place, c, ,, person, b, will, save, shipping, costs, ., if, person, b, does, n't, build, factory, in, place, c, and, none, of, customers, live, in, place, c, ,, person, b, might, save, money, ., if, person, b, builds, factory, in, place, c, instead, of, place, d, ,, person, b, builds, factory, in, place, c, and, person, b, does, n't, build, factory, in, place, d.]
    Lemmatized tokens: [if, person, b, build, factory, in, place, c, and, most, of, customer, live, in, place, c, ,, person, b, will, save, shipping, cost, ., if, person, b, do, not, build, factory, in, place, c, and, none, of, customer, live, in, place, c, ,, person, b, might, save, money, ., if, person, b, build, factory, in, place, c, instead, of, place, d, ,, person, b, build, factory, in, place, c, and, person, b, do, not, build, factory, in, place, D.]
    POS tags: [IN, NN, NN, VBZ, NN, IN, NN, NN, CC, JJS, IN, NNS, VBP, IN, NN, NN, ,, NN, NN, VBD-AUX, VB, NN, NNS, ., IN, NN, NN, VBD-AUX, RB, VB, NN, IN, NN, NN, CC, NN, IN, NNS, VBP, IN, NN, NN, ,, NN, NN, VBD-AUX, VB, NN, ., IN, NN, NN, VBZ, NN, IN, NN, NN, RB, IN, NN, NN, ,, NN, NN, VBZ, NN, IN, NN, NN, CC, NN, NN, VBD-AUX, RB, VB, NN, IN, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->4, cc->8, conj:and->12], [nmod:in->7], [], [], [case->5, compound->6], [], [nmod:of->11], [], [case->10], [nmod:in->15, nsubj->9], [], [], [case->13, compound->14], [], [], [compound->17], [], [punct->16, nsubj->18, advcl->3, aux->19, dobj->22, punct->23, advcl->12], [], [compound->21], [], [], [], [compound->25], [], [], [nsubj->26, aux->27, neg->28, dobj->30, nmod:in->33, cc->34, conj:and->38, mark->24], [], [], [], [case->31, compound->32], [], [nmod:of->37], [], [case->36], [nsubj->35, nmod:in->41], [], [], [case->39, compound->40], [], [], [compound->43], [], [punct->42, nsubj->44, advcl->29, aux->45, dobj->47, punct->48, advcl->38], [], [], [], [], [compound->50], [nmod:in->56, mark->49, nsubj->51, dobj->53], [], [], [], [case->54, compound->55, nmod:instead_of->60], [mwe->58], [], [], [case->57, compound->59], [], [], [compound->62], [nmod:in->71, punct->61, nsubj->63, dobj->65, advcl->52, nmod:in->68], [], [], [], [conj:and->71, case->66, compound->67, cc->69], [], [], [compound->70], [], [], [aux->72, neg->73, dobj->75, nmod:in->77, nsubj->78, dep->64], [], [], [case->76], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: In which town do most of Esther's customers live {
    Tokens: [in, which, town, do, most, of, esther, 's, customers, live]
    Lemmatized tokens: [in, which, town, do, most, of, Esther, 's, customer, live]
    POS tags: [IN, WDT, NN, VBD-AUX, JJS, IN, NNP, POS, NNS, VBP]
    NER tags: [O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [case->0], [], [nmod:in->1, nsubj->2, ccomp->9], [nmod:of->8], [], [case->7], [], [case->5, nmod:poss->6], [nsubj->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Esther figures that she will save shipping costs if she builds her factory in Springfield instead of Franklin, because none of her customers live there. {
    Tokens: [esther, figures, that, she, will, save, shipping, costs, if, she, builds, her, factory, in, springfield, instead, of, franklin, ,, because, none, of, her, customers, live, there, .]
    Lemmatized tokens: [Esther, figure, that, she, will, save, shipping, cost, if, she, build, she, factory, in, Springfield, instead, of, Franklin, ,, because, none, of, she, customer, live, there, .]
    POS tags: [NNP, VBZ, IN, PRP, VBD-AUX, VB, NN, NNS, IN, PRP, VBZ, PRP$, NN, IN, NNP, RB, IN, NNP, ,, IN, NN, IN, PRP$, NNS, VBP, EX, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, LOCATION, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, ccomp->5, punct->26], [], [], [], [mark->2, nsubj->3, aux->4, dobj->7, advcl->10], [], [compound->6], [], [], [punct->18, mark->8, advcl->24, nsubj->9, dobj->12, nmod:in->14], [], [nmod:poss->11], [], [nmod:instead_of->17, case->13], [mwe->16], [], [case->15], [], [], [nmod:of->23], [], [], [case->21, nmod:poss->22], [mark->19, nsubj->20, xcomp->25], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B builds factory in place C and most of customers live in place C, person B will save shipping costs.  If person B doesn’t build factory in place C and none of customers live in place C, person B might save money. If person B builds factory in place C instead of place D, person B builds factory in place C and person B doesn’t build factory in place D. {
    Tokens: [if, person, b, builds, factory, in, place, c, and, most, of, customers, live, in, place, c, ,, person, b, will, save, shipping, costs, ., if, person, b, does, n't, build, factory, in, place, c, and, none, of, customers, live, in, place, c, ,, person, b, might, save, money, ., if, person, b, builds, factory, in, place, c, instead, of, place, d, ,, person, b, builds, factory, in, place, c, and, person, b, does, n't, build, factory, in, place, d.]
    Lemmatized tokens: [if, person, b, build, factory, in, place, c, and, most, of, customer, live, in, place, c, ,, person, b, will, save, shipping, cost, ., if, person, b, do, not, build, factory, in, place, c, and, none, of, customer, live, in, place, c, ,, person, b, might, save, money, ., if, person, b, build, factory, in, place, c, instead, of, place, d, ,, person, b, build, factory, in, place, c, and, person, b, do, not, build, factory, in, place, D.]
    POS tags: [IN, NN, NN, VBZ, NN, IN, NN, NN, CC, JJS, IN, NNS, VBP, IN, NN, NN, ,, NN, NN, VBD-AUX, VB, NN, NNS, ., IN, NN, NN, VBD-AUX, RB, VB, NN, IN, NN, NN, CC, NN, IN, NNS, VBP, IN, NN, NN, ,, NN, NN, VBD-AUX, VB, NN, ., IN, NN, NN, VBZ, NN, IN, NN, NN, RB, IN, NN, NN, ,, NN, NN, VBZ, NN, IN, NN, NN, CC, NN, NN, VBD-AUX, RB, VB, NN, IN, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->4, cc->8, conj:and->12], [nmod:in->7], [], [], [case->5, compound->6], [], [nmod:of->11], [], [case->10], [nmod:in->15, nsubj->9], [], [], [case->13, compound->14], [], [], [compound->17], [], [punct->16, nsubj->18, advcl->3, aux->19, dobj->22, punct->23, advcl->12], [], [compound->21], [], [], [], [compound->25], [], [], [nsubj->26, aux->27, neg->28, dobj->30, nmod:in->33, cc->34, conj:and->38, mark->24], [], [], [], [case->31, compound->32], [], [nmod:of->37], [], [case->36], [nsubj->35, nmod:in->41], [], [], [case->39, compound->40], [], [], [compound->43], [], [punct->42, nsubj->44, advcl->29, aux->45, dobj->47, punct->48, advcl->38], [], [], [], [], [compound->50], [nmod:in->56, mark->49, nsubj->51, dobj->53], [], [], [], [case->54, compound->55, nmod:instead_of->60], [mwe->58], [], [], [case->57, compound->59], [], [], [compound->62], [nmod:in->71, punct->61, nsubj->63, dobj->65, advcl->52, nmod:in->68], [], [], [], [conj:and->71, case->66, compound->67, cc->69], [], [], [compound->70], [], [], [aux->72, neg->73, dobj->75, nmod:in->77, nsubj->78, dep->64], [], [], [case->76], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: In which town do none of Esther's customers live {
    Tokens: [in, which, town, do, none, of, esther, 's, customers, live]
    Lemmatized tokens: [in, which, town, do, none, of, Esther, 's, customer, live]
    POS tags: [IN, WDT, NN, VBD-AUX, NN, IN, NNP, POS, NNS, VBP]
    NER tags: [O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [case->0], [], [nmod:in->1, nsubj->2, ccomp->9], [nmod:of->8], [], [case->7], [], [case->5, nmod:poss->6], [nsubj->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Look! There is a shark swimming right below that duck! It had better get away to safety fast! What needs to get away to safety {
    Tokens: [look, !, there, is, a, shark, swimming, right, below, that, duck, !, it, had, better, get, away, to, safety, fast, !, what, needs, to, get, away, to, safety]
    Lemmatized tokens: [look, !, there, be, a, shark, swimming, right, below, that, duck, !, it, have, better, get, away, to, safety, fast, !, what, need, to, get, away, to, safety]
    POS tags: [VB, ., EX, VBD-AUX, DT, NN, NN, RB, IN, DT, NN, ., PRP, VBD-AUX, RBR, VB, RB, TO, NN, RB, ., WDT, NNS, TO, VB, RB, TO, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[punct->1], [], [], [nsubj->6, advmod->7, punct->11, expl->2], [], [], [det->4, compound->5], [nmod:below->10], [], [], [case->8, det->9], [], [], [mwe->14], [], [advmod->19, punct->20, nsubj->12, dep->13, advmod->16], [nmod:to->18], [], [case->17], [], [], [], [], [], [dobj->21, nsubj->22, mark->23, advmod->25, nmod:to->27], [], [], [case->26]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Look! There is a minnow swimming right below that duck! It had better get away to safety fast! What needs to get away to safety {
    Tokens: [look, !, there, is, a, minnow, swimming, right, below, that, duck, !, it, had, better, get, away, to, safety, fast, !, what, needs, to, get, away, to, safety]
    Lemmatized tokens: [look, !, there, be, a, minnow, swimming, right, below, that, duck, !, it, have, better, get, away, to, safety, fast, !, what, need, to, get, away, to, safety]
    POS tags: [VB, ., EX, VBD-AUX, DT, NN, NN, RB, IN, DT, NN, ., PRP, VBD-AUX, RBR, VB, RB, TO, NN, RB, ., WDT, NNS, TO, VB, RB, TO, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[punct->1], [], [], [nsubj->6, advmod->7, punct->11, expl->2], [], [], [det->4, compound->5], [nmod:below->10], [], [], [case->8, det->9], [], [], [mwe->14], [], [advmod->19, punct->20, nsubj->12, dep->13, advmod->16], [nmod:to->18], [], [case->17], [], [], [], [], [], [dobj->21, nsubj->22, mark->23, advmod->25, nmod:to->27], [], [], [case->26]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is the prey of thing C and thing B is near thing C, thing B might get away to safety {
    Tokens: [if, thing, b, is, the, prey, of, thing, c, and, thing, b, is, near, thing, c, ,, thing, b, might, get, away, to, safety]
    Lemmatized tokens: [if, thing, b, be, the, prey, of, thing, c, and, thing, b, be, near, thing, c, ,, thing, b, might, get, away, to, safety]
    POS tags: [IN, NN, NN, VBD-AUX, DT, NN, IN, NN, NN, CC, NN, NN, VBD-AUX, IN, NN, NN, ,, NN, NN, VBD-AUX, VB, RB, TO, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [conj:and->15, mark->0, nsubj->2, cop->3, det->4, nmod:of->8, cc->9], [], [], [case->6, compound->7], [], [], [compound->10], [], [], [], [nsubj->11, cop->12, case->13, compound->14], [], [], [compound->17], [], [advcl->15, punct->16, nsubj->18, aux->19, advcl->5, advmod->21, nmod:to->23], [], [], [case->22]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Duck is the prey of shark {
    Tokens: [duck, is, the, prey, of, shark]
    Lemmatized tokens: [duck, be, the, prey, of, shark]
    POS tags: [NN, VBD-AUX, DT, NN, IN, NN]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, det->2, nmod:of->5], [], [case->4]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Minnow is the prey of duck. {
    Tokens: [minnow, is, the, prey, of, duck, .]
    Lemmatized tokens: [minnow, be, the, prey, of, duck, .]
    POS tags: [NN, VBD-AUX, DT, NN, IN, NN, .]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, det->2, nmod:of->5, punct->6], [], [case->4], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: There are too many deer in the park, so the park service brought in a small pack of wolves. The population should increase over the next few years. {
    Tokens: [there, are, too, many, deer, in, the, park, ,, so, the, park, service, brought, in, a, small, pack, of, wolves, ., the, population, should, increase, over, the, next, few, years, .]
    Lemmatized tokens: [there, be, too, many, deer, in, the, park, ,, so, the, park, service, bring, in, a, small, pack, of, wolf, ., the, population, should, increase, over, the, next, few, year, .]
    POS tags: [EX, VBD-AUX, RB, JJ, NNS, IN, DT, NN, ,, IN, DT, NNP, NNP, VBD, RP, DT, JJ, NN, IN, NNS, ., DT, NN, VBD-AUX, VB, IN, DT, JJ, JJ, NNS, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, DURATION, DURATION, DURATION, DURATION, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, PXY, PXY, PXY, PXY, null]
    Dependency children: [[], [expl->0, advmod->2, nsubj->4, punct->20, punct->8, dep->9, parataxis->13], [], [], [amod->3, nmod:in->7], [], [], [case->5, det->6], [], [], [], [], [det->10, compound->11], [dobj->17, nsubj->12, compound:prt->14], [], [], [], [det->15, amod->16, nmod:of->19], [], [case->18], [], [], [det->21], [], [aux->23, nmod:over->29, punct->30, nsubj->22], [], [], [], [], [case->25, det->26, amod->27, amod->28], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If animal B’s prey is animal C, animal B’s population should increase and animal C should decrease. Wolves’s prey is deer. {
    Tokens: [if, animal, b, 's, prey, is, animal, c, ,, animal, b, 's, population, should, increase, and, animal, c, should, decrease, ., wolves, 's, prey, is, deer, .]
    Lemmatized tokens: [if, animal, b, 's, prey, be, animal, c, ,, animal, b, 's, population, should, increase, and, animal, c, should, decrease, ., wolf, 's, prey, be, deer, .]
    POS tags: [IN, NN, NN, POS, NN, VBD-AUX, JJ, NN, ,, NN, NN, POS, NN, VBD-AUX, VB, CC, NN, NN, VBD-AUX, VB, ., NNS, POS, NN, VBD-AUX, NNS, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1, case->3], [], [nmod:poss->2], [], [], [mark->0, dep->4, dep->5, dep->6], [], [], [compound->9, case->11], [], [nmod:poss->10], [], [cc->15, conj:and->19, punct->20, advcl->7, punct->8, nsubj->12, aux->13], [], [], [compound->16], [], [nsubj->17, aux->18], [], [case->22], [], [nmod:poss->21], [], [nsubj->23, cop->24, punct->26], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Which population will increase {
    Tokens: [which, population, will, increase]
    Lemmatized tokens: [which, population, will, increase]
    POS tags: [WDT, NN, VBD-AUX, VB]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [dobj->0, nsubj->1, aux->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: There are too many deer in the park, so the park service brought in a small pack of wolves. The population should decrease over the next few years. {
    Tokens: [there, are, too, many, deer, in, the, park, ,, so, the, park, service, brought, in, a, small, pack, of, wolves, ., the, population, should, decrease, over, the, next, few, years, .]
    Lemmatized tokens: [there, be, too, many, deer, in, the, park, ,, so, the, park, service, bring, in, a, small, pack, of, wolf, ., the, population, should, decrease, over, the, next, few, year, .]
    POS tags: [EX, VBD-AUX, RB, JJ, NNS, IN, DT, NN, ,, IN, DT, NNP, NNP, VBD, RP, DT, JJ, NN, IN, NNS, ., DT, NN, VBD-AUX, VB, IN, DT, JJ, JJ, NNS, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, DURATION, DURATION, DURATION, DURATION, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, PXY, PXY, PXY, PXY, null]
    Dependency children: [[], [expl->0, advmod->2, nsubj->4, punct->20, punct->8, dep->9, parataxis->13], [], [], [amod->3, nmod:in->7], [], [], [case->5, det->6], [], [], [], [], [det->10, compound->11], [dobj->17, nsubj->12, compound:prt->14], [], [], [], [det->15, amod->16, nmod:of->19], [], [case->18], [], [], [det->21], [], [aux->23, nmod:over->29, punct->30, nsubj->22], [], [], [], [], [case->25, det->26, amod->27, amod->28], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If animal B’s prey is animal C, animal B’s population should increase and animal C should decrease. Wolves’s prey is deer. {
    Tokens: [if, animal, b, 's, prey, is, animal, c, ,, animal, b, 's, population, should, increase, and, animal, c, should, decrease, ., wolves, 's, prey, is, deer, .]
    Lemmatized tokens: [if, animal, b, 's, prey, be, animal, c, ,, animal, b, 's, population, should, increase, and, animal, c, should, decrease, ., wolf, 's, prey, be, deer, .]
    POS tags: [IN, NN, NN, POS, NN, VBD-AUX, JJ, NN, ,, NN, NN, POS, NN, VBD-AUX, VB, CC, NN, NN, VBD-AUX, VB, ., NNS, POS, NN, VBD-AUX, NNS, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1, case->3], [], [nmod:poss->2], [], [], [mark->0, dep->4, dep->5, dep->6], [], [], [compound->9, case->11], [], [nmod:poss->10], [], [cc->15, conj:and->19, punct->20, advcl->7, punct->8, nsubj->12, aux->13], [], [], [compound->16], [], [nsubj->17, aux->18], [], [case->22], [], [nmod:poss->21], [], [nsubj->23, cop->24, punct->26], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Which population will decrease {
    Tokens: [which, population, will, decrease]
    Lemmatized tokens: [which, population, will, decrease]
    POS tags: [WDT, NN, VBD-AUX, VB]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [dobj->0, nsubj->1, aux->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Archaeologists have concluded that humans lived in Laputa 20,000 years ago. They hunted for deer on the river banks. {
    Tokens: [archaeologists, have, concluded, that, humans, lived, in, laputa, 20,000, years, ago, ., they, hunted, for, deer, on, the, river, banks, .]
    Lemmatized tokens: [archaeologist, have, conclude, that, human, live, in, Laputa, 20,000, year, ago, ., they, hunt, for, deer, on, the, river, bank, .]
    POS tags: [NNS, VBD-AUX, VBN, IN, NNS, VBD, IN, NNP, CD, NNS, RB, ., PRP, VBD, IN, NNS, IN, DT, NN, NNS, .]
    NER tags: [O, O, O, O, O, O, O, LOCATION, DATE, DATE, DATE, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, OFFSET P-20000Y, OFFSET P-20000Y, OFFSET P-20000Y, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, ccomp->5, punct->11], [], [], [mark->3, nsubj->4, nmod:in->7, advmod->10], [], [case->6], [], [nummod->8], [nmod:npmod->9], [], [], [nmod:for->15, nmod:on->19, punct->20, nsubj->12], [], [case->14], [], [], [], [case->16, det->17, compound->18], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B has concluded sth, person B hunts for evidence. If person B lives many years ago, person B is ancient. If person B is an ancient, person B hunts for animals. If person B hunts for deer, person B hunts for animals. {
    Tokens: [if, person, b, has, concluded, sth, ,, person, b, hunts, for, evidence, ., if, person, b, lives, many, years, ago, ,, person, b, is, ancient, ., if, person, b, is, an, ancient, ,, person, b, hunts, for, animals, ., if, person, b, hunts, for, deer, ,, person, b, hunts, for, animals, .]
    Lemmatized tokens: [if, person, b, have, conclude, sth, ,, person, b, hunt, for, evidence, ., if, person, b, live, many, year, ago, ,, person, b, be, ancient, ., if, person, b, be, a, ancient, ,, person, b, hunt, for, animal, ., if, person, b, hunt, for, deer, ,, person, b, hunt, for, animal, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBN, NN, ,, NN, NN, VBZ, IN, NN, ., IN, NN, NN, VBZ, JJ, NNS, RB, ,, NN, NN, VBD-AUX, JJ, ., IN, NN, NN, VBD-AUX, DT, JJ, ,, NN, NN, VBZ, IN, NNS, ., IN, NN, NN, VBZ, IN, NNS, ,, NN, NN, VBZ, IN, NNS, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, DATE, DATE, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, OFFSET P-1Y, OFFSET P-1Y, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, aux->3, dobj->5], [], [], [], [compound->7], [advcl->4, punct->6, nsubj->8, nmod:for->11, punct->12], [], [case->10], [], [], [], [compound->14], [nsubj->15, advmod->19, mark->13], [], [amod->17], [nmod:npmod->18], [], [], [compound->21], [], [advcl->16, punct->20, nsubj->22, cop->23, punct->25], [], [], [], [compound->27], [], [], [mark->26, nsubj->28, cop->29, det->30], [], [], [compound->33], [advcl->31, punct->32, nsubj->34, nmod:for->37, punct->38], [], [case->36], [], [], [], [compound->40], [mark->39, nsubj->41, nmod:for->44], [], [case->43], [], [], [compound->46], [nsubj->47, nmod:for->50, punct->51, advcl->42, punct->45], [], [case->49], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who hunted for deer {
    Tokens: [who, hunted, for, deer]
    Lemmatized tokens: [who, hunt, for, deer]
    POS tags: [WP, VBN, IN, NNS]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:for->3], [], [case->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Archaeologists have concluded that humans lived in Laputa 20,000 years ago. They hunted for evidence on the river banks. {
    Tokens: [archaeologists, have, concluded, that, humans, lived, in, laputa, 20,000, years, ago, ., they, hunted, for, evidence, on, the, river, banks, .]
    Lemmatized tokens: [archaeologist, have, conclude, that, human, live, in, Laputa, 20,000, year, ago, ., they, hunt, for, evidence, on, the, river, bank, .]
    POS tags: [NNS, VBD-AUX, VBN, IN, NNS, VBD, IN, NNP, CD, NNS, RB, ., PRP, VBD, IN, NN, IN, DT, NN, NNS, .]
    NER tags: [O, O, O, O, O, O, O, LOCATION, DATE, DATE, DATE, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, OFFSET P-20000Y, OFFSET P-20000Y, OFFSET P-20000Y, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, ccomp->5, punct->11], [], [], [mark->3, nsubj->4, nmod:in->7, advmod->10], [], [case->6], [], [nummod->8], [nmod:npmod->9], [], [], [nmod:for->15, nmod:on->19, punct->20, nsubj->12], [], [case->14], [], [], [], [case->16, det->17, compound->18], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B has concluded sth, person B hunts for evidence. If person B lives many years ago, person B is ancient. If person B is an ancient, person B hunts for animals. If person B hunts for deer, person B hunts for animals. {
    Tokens: [if, person, b, has, concluded, sth, ,, person, b, hunts, for, evidence, ., if, person, b, lives, many, years, ago, ,, person, b, is, ancient, ., if, person, b, is, an, ancient, ,, person, b, hunts, for, animals, ., if, person, b, hunts, for, deer, ,, person, b, hunts, for, animals, .]
    Lemmatized tokens: [if, person, b, have, conclude, sth, ,, person, b, hunt, for, evidence, ., if, person, b, live, many, year, ago, ,, person, b, be, ancient, ., if, person, b, be, a, ancient, ,, person, b, hunt, for, animal, ., if, person, b, hunt, for, deer, ,, person, b, hunt, for, animal, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBN, NN, ,, NN, NN, VBZ, IN, NN, ., IN, NN, NN, VBZ, JJ, NNS, RB, ,, NN, NN, VBD-AUX, JJ, ., IN, NN, NN, VBD-AUX, DT, JJ, ,, NN, NN, VBZ, IN, NNS, ., IN, NN, NN, VBZ, IN, NNS, ,, NN, NN, VBZ, IN, NNS, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, DATE, DATE, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, OFFSET P-1Y, OFFSET P-1Y, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, aux->3, dobj->5], [], [], [], [compound->7], [advcl->4, punct->6, nsubj->8, nmod:for->11, punct->12], [], [case->10], [], [], [], [compound->14], [nsubj->15, advmod->19, mark->13], [], [amod->17], [nmod:npmod->18], [], [], [compound->21], [], [advcl->16, punct->20, nsubj->22, cop->23, punct->25], [], [], [], [compound->27], [], [], [mark->26, nsubj->28, cop->29, det->30], [], [], [compound->33], [advcl->31, punct->32, nsubj->34, nmod:for->37, punct->38], [], [case->36], [], [], [], [compound->40], [mark->39, nsubj->41, nmod:for->44], [], [case->43], [], [], [compound->46], [nsubj->47, nmod:for->50, punct->51, advcl->42, punct->45], [], [case->49], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who hunted for evidence {
    Tokens: [who, hunted, for, evidence]
    Lemmatized tokens: [who, hunt, for, evidence]
    POS tags: [WP, VBN, IN, NN]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:for->3], [], [case->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The scientists are studying three species of fish that have recently been found living in the Indian Ocean. They appeared two years ago. {
    Tokens: [the, scientists, are, studying, three, species, of, fish, that, have, recently, been, found, living, in, the, indian, ocean, ., they, appeared, two, years, ago, .]
    Lemmatized tokens: [the, scientist, be, study, three, species, of, fish, that, have, recently, be, find, live, in, the, indian, ocean, ., they, appear, two, year, ago, .]
    POS tags: [DT, NNS, VBD-AUX, VBG, CD, NNS, IN, NN, WDT, VBD-AUX, RB, VBD-AUX, VBN, VBG, IN, DT, JJ, NN, ., PRP, VBD, CD, NNS, RB, .]
    NER tags: [O, O, O, O, NUMBER, O, O, O, O, O, DATE, O, O, O, O, O, MISC, O, O, O, O, DATE, DATE, DATE, O]
    NER values: [null, null, null, null, 3.0, null, null, null, null, null, PAST_REF, null, null, null, null, null, null, null, null, null, null, OFFSET P-2Y, OFFSET P-2Y, OFFSET P-2Y, null]
    Dependency children: [[], [det->0], [], [nsubj->1, aux->2, punct->18, dobj->5], [], [nummod->4, nmod:of->7, acl:relcl->12], [], [case->6], [], [], [], [], [nsubjpass->8, aux->9, advmod->10, auxpass->11, xcomp->13], [nmod:in->17], [], [], [], [det->15, amod->16, case->14], [], [], [advmod->23, punct->24, nsubj->19], [], [nummod->21], [nmod:npmod->22], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B has been found living in some place, thing B might appear some years ago. If thing B is studying sth, thing B might begin some years ago. {
    Tokens: [if, thing, b, has, been, found, living, in, some, place, ,, thing, b, might, appear, some, years, ago, ., if, thing, b, is, studying, sth, ,, thing, b, might, begin, some, years, ago, .]
    Lemmatized tokens: [if, thing, b, have, be, find, live, in, some, place, ,, thing, b, might, appear, some, year, ago, ., if, thing, b, be, study, sth, ,, thing, b, might, begin, some, year, ago, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBD-AUX, VBN, VBG, IN, DT, NN, ,, NN, NN, VBD-AUX, VB, DT, NNS, RB, ., IN, NN, NN, VBD-AUX, VBG, NN, ,, NN, NN, VBD-AUX, VB, DT, NNS, RB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, DATE, DATE, O, O, O, O, O, O, O, O, O, O, O, O, O, DATE, DATE, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, OFFSET P-1Y, OFFSET P-1Y, null, null, null, null, null, null, null, null, null, null, null, null, null, OFFSET P-1Y, OFFSET P-1Y, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubjpass->2, aux->3, auxpass->4, xcomp->6], [nmod:in->9], [], [], [case->7, det->8], [], [], [compound->11], [], [nmod:tmod->16, advmod->17, punct->18, advcl->5, punct->10, nsubj->12, aux->13], [], [det->15], [], [], [], [], [compound->20], [], [nsubj->21, aux->22, dobj->24, mark->19], [], [], [], [compound->26], [], [advcl->23, punct->25, nsubj->27, aux->28, nmod:tmod->31, advmod->32, punct->33], [], [det->30], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who or what appeared two years ago {
    Tokens: [who, or, what, appeared, two, years, ago]
    Lemmatized tokens: [who, or, what, appear, two, year, ago]
    POS tags: [WP, CC, WP, VBD, CD, NNS, IN]
    NER tags: [O, O, O, O, DATE, DATE, DATE]
    NER values: [null, null, null, null, OFFSET P-2Y, OFFSET P-2Y, OFFSET P-2Y]
    Dependency children: [[cc->1, conj:or->3], [], [], [nsubj->2, advmod->5], [], [nummod->4, case->6], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The scientists are studying three species of fish that have recently been found living in the Indian Ocean. They began two years ago. {
    Tokens: [the, scientists, are, studying, three, species, of, fish, that, have, recently, been, found, living, in, the, indian, ocean, ., they, began, two, years, ago, .]
    Lemmatized tokens: [the, scientist, be, study, three, species, of, fish, that, have, recently, be, find, live, in, the, indian, ocean, ., they, begin, two, year, ago, .]
    POS tags: [DT, NNS, VBD-AUX, VBG, CD, NNS, IN, NN, WDT, VBD-AUX, RB, VBD-AUX, VBN, VBG, IN, DT, JJ, NN, ., PRP, VBD, CD, NNS, RB, .]
    NER tags: [O, O, O, O, NUMBER, O, O, O, O, O, DATE, O, O, O, O, O, MISC, O, O, O, O, DATE, DATE, DATE, O]
    NER values: [null, null, null, null, 3.0, null, null, null, null, null, PAST_REF, null, null, null, null, null, null, null, null, null, null, OFFSET P-2Y, OFFSET P-2Y, OFFSET P-2Y, null]
    Dependency children: [[], [det->0], [], [nsubj->1, aux->2, punct->18, dobj->5], [], [nummod->4, nmod:of->7, acl:relcl->12], [], [case->6], [], [], [], [], [nsubjpass->8, aux->9, advmod->10, auxpass->11, xcomp->13], [nmod:in->17], [], [], [], [det->15, amod->16, case->14], [], [], [advmod->23, punct->24, nsubj->19], [], [nummod->21], [nmod:npmod->22], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B has been found living in some place, thing B might appear some years ago. If thing B is studying sth, thing B might begin some years ago. {
    Tokens: [if, thing, b, has, been, found, living, in, some, place, ,, thing, b, might, appear, some, years, ago, ., if, thing, b, is, studying, sth, ,, thing, b, might, begin, some, years, ago, .]
    Lemmatized tokens: [if, thing, b, have, be, find, live, in, some, place, ,, thing, b, might, appear, some, year, ago, ., if, thing, b, be, study, sth, ,, thing, b, might, begin, some, year, ago, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBD-AUX, VBN, VBG, IN, DT, NN, ,, NN, NN, VBD-AUX, VB, DT, NNS, RB, ., IN, NN, NN, VBD-AUX, VBG, NN, ,, NN, NN, VBD-AUX, VB, DT, NNS, RB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, DATE, DATE, O, O, O, O, O, O, O, O, O, O, O, O, O, DATE, DATE, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, OFFSET P-1Y, OFFSET P-1Y, null, null, null, null, null, null, null, null, null, null, null, null, null, OFFSET P-1Y, OFFSET P-1Y, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubjpass->2, aux->3, auxpass->4, xcomp->6], [nmod:in->9], [], [], [case->7, det->8], [], [], [compound->11], [], [nmod:tmod->16, advmod->17, punct->18, advcl->5, punct->10, nsubj->12, aux->13], [], [det->15], [], [], [], [], [compound->20], [], [nsubj->21, aux->22, dobj->24, mark->19], [], [], [], [compound->26], [], [advcl->23, punct->25, nsubj->27, aux->28, nmod:tmod->31, advmod->32, punct->33], [], [det->30], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who or what began two years ago {
    Tokens: [who, or, what, began, two, years, ago]
    Lemmatized tokens: [who, or, what, begin, two, year, ago]
    POS tags: [WP, CC, WDT, VBD, CD, NNS, IN]
    NER tags: [O, O, O, O, DATE, DATE, DATE]
    NER values: [null, null, null, null, OFFSET P-2Y, OFFSET P-2Y, OFFSET P-2Y]
    Dependency children: [[cc->1, conj:or->3], [], [], [nsubj->2, advmod->5], [], [nummod->4, case->6], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The journalists interviewed the stars of the new movie. They were very cooperative, so the interview lasted for a long time. {
    Tokens: [the, journalists, interviewed, the, stars, of, the, new, movie, ., they, were, very, cooperative, ,, so, the, interview, lasted, for, a, long, time, .]
    Lemmatized tokens: [the, journalist, interview, the, star, of, the, new, movie, ., they, be, very, cooperative, ,, so, the, interview, last, for, a, long, time, .]
    POS tags: [DT, NNS, VBD, DT, NNS, IN, DT, JJ, NN, ., PRP, VBD-AUX, RB, JJ, ,, IN, DT, NN, VBD, IN, DT, JJ, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [nsubj->1, dobj->4, punct->9], [], [det->3, nmod:of->8], [], [], [], [case->5, det->6, amod->7], [], [], [], [], [advmod->12, punct->14, dep->15, parataxis->18, punct->23, nsubj->10, cop->11], [], [], [], [det->16], [nsubj->17, nmod:for->22], [], [], [], [case->19, det->20, amod->21], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B interview person C, person C might be cooperative and person B might be persistent. {
    Tokens: [if, person, b, interview, person, c, ,, person, c, might, be, cooperative, and, person, b, might, be, persistent, .]
    Lemmatized tokens: [if, person, b, interview, person, c, ,, person, c, might, be, cooperative, and, person, b, might, be, persistent, .]
    POS tags: [IN, NN, NN, NN, NN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [mark->0, compound->1, compound->2, compound->3, dep->5], [], [], [], [compound->7], [], [], [conj:and->17, punct->18, advcl->4, punct->6, nsubj->8, aux->9, cop->10, cc->12], [], [], [compound->13], [], [], [aux->15, cop->16, nsubj->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was cooperative {
    Tokens: [who, was, cooperative]
    Lemmatized tokens: [who, be, cooperative]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The journalists interviewed the stars of the new movie. They were very persistent, so the interview lasted for a long time. {
    Tokens: [the, journalists, interviewed, the, stars, of, the, new, movie, ., they, were, very, persistent, ,, so, the, interview, lasted, for, a, long, time, .]
    Lemmatized tokens: [the, journalist, interview, the, star, of, the, new, movie, ., they, be, very, persistent, ,, so, the, interview, last, for, a, long, time, .]
    POS tags: [DT, NNS, VBD, DT, NNS, IN, DT, JJ, NN, ., PRP, VBD-AUX, RB, JJ, ,, IN, DT, NN, VBD, IN, DT, JJ, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [nsubj->1, dobj->4, punct->9], [], [det->3, nmod:of->8], [], [], [], [case->5, det->6, amod->7], [], [], [], [], [advmod->12, punct->14, dep->15, parataxis->18, punct->23, nsubj->10, cop->11], [], [], [], [det->16], [nsubj->17, nmod:for->22], [], [], [], [case->19, det->20, amod->21], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B interview person C, person C might be cooperative and person B might be persistent. {
    Tokens: [if, person, b, interview, person, c, ,, person, c, might, be, cooperative, and, person, b, might, be, persistent, .]
    Lemmatized tokens: [if, person, b, interview, person, c, ,, person, c, might, be, cooperative, and, person, b, might, be, persistent, .]
    POS tags: [IN, NN, NN, NN, NN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [mark->0, compound->1, compound->2, compound->3, dep->5], [], [], [], [compound->7], [], [], [conj:and->17, punct->18, advcl->4, punct->6, nsubj->8, aux->9, cop->10, cc->12], [], [], [compound->13], [], [], [aux->15, cop->16, nsubj->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was persistent {
    Tokens: [who, was, persistent]
    Lemmatized tokens: [who, be, persistent]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The police arrested all of the gang members. They were trying to run the drug trade in the neighborhood. {
    Tokens: [the, police, arrested, all, of, the, gang, members, ., they, were, trying, to, run, the, drug, trade, in, the, neighborhood, .]
    Lemmatized tokens: [the, police, arrest, all, of, the, gang, member, ., they, be, try, to, run, the, drug, trade, in, the, neighborhood, .]
    POS tags: [DT, NN, VBD, DT, IN, DT, NN, NNS, ., PRP, VBD-AUX, VBG, TO, VB, DT, NN, NN, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [nsubj->1, dobj->3, punct->8], [nmod:of->7], [], [], [], [case->4, det->5, compound->6], [], [], [], [xcomp->13, punct->20, nsubj->9, aux->10], [], [mark->12, dobj->16, nmod:in->19], [], [], [det->14, compound->15], [], [], [case->17, det->18], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The police is good man. The gang members is bad man. Good man do good things. Bad man do bad things. Run the drug trade is to do bad things. Stop drug trade is to do good things. {
    Tokens: [the, police, is, good, man, ., the, gang, members, is, bad, man, ., good, man, do, good, things, ., bad, man, do, bad, things, ., run, the, drug, trade, is, to, do, bad, things, ., stop, drug, trade, is, to, do, good, things, .]
    Lemmatized tokens: [the, police, be, good, man, ., the, gang, member, be, bad, man, ., good, man, do, good, thing, ., bad, man, do, bad, thing, ., run, the, drug, trade, be, to, do, bad, thing, ., stop, drug, trade, be, to, do, good, thing, .]
    POS tags: [DT, NN, VBD-AUX, JJ, NN, ., DT, NN, NNS, VBD-AUX, JJ, NN, ., JJ, NN, VBD-AUX, JJ, NNS, ., JJ, NN, VBD-AUX, JJ, NNS, ., VB, DT, NN, NN, VBD-AUX, TO, VBD-AUX, JJ, NNS, ., VB, NN, NN, VBD-AUX, TO, VBD-AUX, JJ, NNS, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [], [nsubj->1, cop->2, amod->3, punct->5], [], [], [], [det->6, compound->7], [], [], [nsubj->8, cop->9, amod->10, punct->12], [], [], [amod->13], [punct->18, nsubj->14, dobj->17], [], [amod->16], [], [], [amod->19], [nsubj->20, dobj->23, punct->24], [], [amod->22], [], [ccomp->29, punct->34], [], [], [det->26, compound->27], [nsubj->28, xcomp->31], [], [mark->30, dobj->33], [], [amod->32], [], [ccomp->38, punct->43], [], [compound->36], [nsubj->37, xcomp->40], [], [mark->39, dobj->42], [], [amod->41], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was trying to run the drug trade {
    Tokens: [who, was, trying, to, run, the, drug, trade]
    Lemmatized tokens: [who, be, try, to, run, the, drug, trade]
    POS tags: [WP, VBD-AUX, VBG, TO, VB, DT, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, xcomp->4], [], [mark->3, dobj->7], [], [], [det->5, compound->6]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The police arrested all of the gang members. They were trying to stop the drug trade in the neighborhood. {
    Tokens: [the, police, arrested, all, of, the, gang, members, ., they, were, trying, to, stop, the, drug, trade, in, the, neighborhood, .]
    Lemmatized tokens: [the, police, arrest, all, of, the, gang, member, ., they, be, try, to, stop, the, drug, trade, in, the, neighborhood, .]
    POS tags: [DT, NN, VBD, DT, IN, DT, NN, NNS, ., PRP, VBD-AUX, VBG, TO, VB, DT, NN, NN, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [nsubj->1, dobj->3, punct->8], [nmod:of->7], [], [], [], [case->4, det->5, compound->6], [], [], [], [xcomp->13, punct->20, nsubj->9, aux->10], [], [mark->12, dobj->16, nmod:in->19], [], [], [det->14, compound->15], [], [], [case->17, det->18], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The police is good man. The gang members is bad man. Good man do good things. Bad man do bad things. Run the drug trade is to do bad things. Stop drug trade is to do good things. {
    Tokens: [the, police, is, good, man, ., the, gang, members, is, bad, man, ., good, man, do, good, things, ., bad, man, do, bad, things, ., run, the, drug, trade, is, to, do, bad, things, ., stop, drug, trade, is, to, do, good, things, .]
    Lemmatized tokens: [the, police, be, good, man, ., the, gang, member, be, bad, man, ., good, man, do, good, thing, ., bad, man, do, bad, thing, ., run, the, drug, trade, be, to, do, bad, thing, ., stop, drug, trade, be, to, do, good, thing, .]
    POS tags: [DT, NN, VBD-AUX, JJ, NN, ., DT, NN, NNS, VBD-AUX, JJ, NN, ., JJ, NN, VBD-AUX, JJ, NNS, ., JJ, NN, VBD-AUX, JJ, NNS, ., VB, DT, NN, NN, VBD-AUX, TO, VBD-AUX, JJ, NNS, ., VB, NN, NN, VBD-AUX, TO, VBD-AUX, JJ, NNS, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [], [nsubj->1, cop->2, amod->3, punct->5], [], [], [], [det->6, compound->7], [], [], [nsubj->8, cop->9, amod->10, punct->12], [], [], [amod->13], [punct->18, nsubj->14, dobj->17], [], [amod->16], [], [], [amod->19], [nsubj->20, dobj->23, punct->24], [], [amod->22], [], [ccomp->29, punct->34], [], [], [det->26, compound->27], [nsubj->28, xcomp->31], [], [mark->30, dobj->33], [], [amod->32], [], [ccomp->38, punct->43], [], [compound->36], [nsubj->37, xcomp->40], [], [mark->39, dobj->42], [], [amod->41], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was trying to stop the drug trade {
    Tokens: [who, was, trying, to, stop, the, drug, trade]
    Lemmatized tokens: [who, be, try, to, stop, the, drug, trade]
    POS tags: [WP, VBD-AUX, VBG, TO, VB, DT, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, xcomp->4], [], [mark->3, dobj->7], [], [], [det->5, compound->6]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I put the cake away in the refrigerator. It has a lot of butter in it. {
    Tokens: [i, put, the, cake, away, in, the, refrigerator, ., it, has, a, lot, of, butter, in, it, .]
    Lemmatized tokens: [I, put, the, cake, away, in, the, refrigerator, ., it, have, a, lot, of, butter, in, it, .]
    POS tags: [PRP, VBD, DT, NN, RB, IN, DT, NN, ., PRP, VBD-AUX, DT, NN, IN, NN, IN, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, advmod->4, nmod:in->7, punct->8], [], [det->2], [nmod:npmod->3], [], [], [case->5, det->6], [], [], [dobj->12, punct->17, nsubj->9], [], [det->11, nmod:of->14], [], [case->13, nmod:in->16], [], [case->15], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Cake has butter. Refrigerator has leftovers {
    Tokens: [cake, has, butter, ., refrigerator, has, leftovers]
    Lemmatized tokens: [cake, have, butter, ., refrigerator, have, leftovers]
    POS tags: [NN, VBD-AUX, NN, ., NN, VBD-AUX, NNP]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2, punct->3], [], [], [], [dobj->6, nsubj->4], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What has a lot of butter {
    Tokens: [what, has, a, lot, of, butter]
    Lemmatized tokens: [what, have, a, lot, of, butter]
    POS tags: [WDT, VBD-AUX, DT, NN, IN, NN]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3], [], [det->2, nmod:of->5], [], [case->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I put the cake away in the refrigerator. It has a lot of leftovers in it. {
    Tokens: [i, put, the, cake, away, in, the, refrigerator, ., it, has, a, lot, of, leftovers, in, it, .]
    Lemmatized tokens: [I, put, the, cake, away, in, the, refrigerator, ., it, have, a, lot, of, leftovers, in, it, .]
    POS tags: [PRP, VBD, DT, NN, RB, IN, DT, NN, ., PRP, VBD-AUX, DT, NN, IN, NNP, IN, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, advmod->4, nmod:in->7, punct->8], [], [det->2], [nmod:npmod->3], [], [], [case->5, det->6], [], [], [dobj->12, punct->17, nsubj->9], [], [det->11, nmod:of->14], [], [case->13, nmod:in->16], [], [case->15], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Cake has butter. Refrigerator has leftovers {
    Tokens: [cake, has, butter, ., refrigerator, has, leftovers]
    Lemmatized tokens: [cake, have, butter, ., refrigerator, have, leftovers]
    POS tags: [NN, VBD-AUX, NN, ., NN, VBD-AUX, NNP]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2, punct->3], [], [], [], [dobj->6, nsubj->4], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What has a lot of leftovers {
    Tokens: [what, has, a, lot, of, leftovers]
    Lemmatized tokens: [what, have, a, lot, of, leftovers]
    POS tags: [WDT, VBD-AUX, DT, NN, IN, NNP]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3], [], [det->2, nmod:of->5], [], [case->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Sam broke both his ankles and he's walking with crutches. But a month or so from now they should be better. {
    Tokens: [sam, broke, both, his, ankles, and, he, 's, walking, with, crutches, ., but, a, month, or, so, from, now, they, should, be, better, .]
    Lemmatized tokens: [Sam, break, both, he, ankle, and, he, be, walk, with, crutch, ., but, a, month, or, so, from, now, they, should, be, better, .]
    POS tags: [NNP, VBD, CC, PRP$, NNS, CC, PRP, VBZ, VBG, IN, NNS, ., CC, DT, NN, CC, RB, IN, RB, PRP, VBD-AUX, VBD-AUX, RBR, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, DURATION, DURATION, O, O, O, DATE, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, P1M, P1M, null, null, null, PRESENT_REF, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, ccomp->8, punct->11], [], [], [cc:preconj->2, nmod:poss->3, cc->5, conj:and->6], [], [], [], [nsubj->4, nsubj->6, aux->7, nmod:with->10], [], [case->9], [], [], [], [cc->15, advmod->16, conj:or->19, det->13], [], [advcl:from->18], [], [case->17], [], [], [], [nsubj->14, nsubj->19, aux->20, cop->21, punct->23, cc->12], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is broken, thing B is bad. If thing B is a tool, thing B is necessary. If thing B is at state C and after long time, thing B is not at state C. Crutches is a tool. If person B break thing C, thing C is broken. {
    Tokens: [if, thing, b, is, broken, ,, thing, b, is, bad, ., if, thing, b, is, a, tool, ,, thing, b, is, necessary, ., if, thing, b, is, at, state, c, and, after, long, time, ,, thing, b, is, not, at, state, c., crutches, is, a, tool, ., if, person, b, break, thing, c, ,, thing, c, is, broken, .]
    Lemmatized tokens: [if, thing, b, be, break, ,, thing, b, be, bad, ., if, thing, b, be, a, tool, ,, thing, b, be, necessary, ., if, thing, b, be, at, state, c, and, after, long, time, ,, thing, b, be, not, at, state, c., crutch, be, a, tool, ., if, person, b, break, thing, c, ,, thing, c, be, break, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBN, ,, NN, NN, VBD-AUX, JJ, ., IN, NN, NN, VBD-AUX, DT, NN, ,, NN, NN, VBD-AUX, JJ, ., IN, NN, NN, VBD-AUX, IN, NN, NN, CC, IN, JJ, NN, ,, NN, NN, VBD-AUX, RB, IN, NN, JJ, NNS, VBD-AUX, DT, NN, ., IN, NN, NN, NN, NN, NN, ,, NN, NN, VBD-AUX, VBN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubjpass->2, auxpass->3], [], [], [compound->6], [], [advcl->4, punct->5, nsubj->7, cop->8, punct->10], [], [], [], [compound->12], [], [], [nsubj->13, cop->14, det->15, mark->11], [], [], [compound->18], [], [advcl->16, punct->17, nsubj->19, cop->20, punct->22], [], [], [], [compound->24], [], [], [], [compound->28, mark->23, nsubj->25, cop->26, case->27], [], [], [], [case->31, amod->32], [], [], [compound->35], [], [], [], [nmod:after->33, punct->34, nsubj->36, cop->37, neg->38, case->39], [], [amod->41], [], [], [det->44, advcl:at->29, conj:and->45, cc->30, punct->46, nsubj->42, cop->43], [], [], [], [compound->48], [mark->47, nsubj->49, dobj->52], [], [compound->51], [], [], [compound->54], [], [nsubjpass->55, auxpass->56, punct->58, advcl->50, punct->53], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What should be better {
    Tokens: [what, should, be, better]
    Lemmatized tokens: [what, should, be, better]
    POS tags: [WP, VBD-AUX, VBD-AUX, RBR]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, aux->1, cop->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Sam broke both his ankles and he's walking with crutches. But a month or so from now they should be unnecessary. {
    Tokens: [sam, broke, both, his, ankles, and, he, 's, walking, with, crutches, ., but, a, month, or, so, from, now, they, should, be, unnecessary, .]
    Lemmatized tokens: [Sam, break, both, he, ankle, and, he, be, walk, with, crutch, ., but, a, month, or, so, from, now, they, should, be, unnecessary, .]
    POS tags: [NNP, VBD, CC, PRP$, NNS, CC, PRP, VBZ, VBG, IN, NNS, ., CC, DT, NN, CC, RB, IN, RB, PRP, VBD-AUX, VBD-AUX, JJ, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, DURATION, DURATION, O, O, O, DATE, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, P1M, P1M, null, null, null, PRESENT_REF, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, ccomp->8, punct->11], [], [], [cc:preconj->2, nmod:poss->3, cc->5, conj:and->6], [], [], [], [nsubj->4, nsubj->6, aux->7, nmod:with->10], [], [case->9], [], [], [], [cc->15, advmod->16, conj:or->19, det->13], [], [advcl:from->18], [], [case->17], [], [], [], [nsubj->14, nsubj->19, aux->20, cop->21, punct->23, cc->12], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is broken, thing B is bad. If thing B is a tool, thing B is necessary. If thing B is at state C and after long time, thing B is not at state C. Crutches is a tool. If person B break thing C, thing C is broken. {
    Tokens: [if, thing, b, is, broken, ,, thing, b, is, bad, ., if, thing, b, is, a, tool, ,, thing, b, is, necessary, ., if, thing, b, is, at, state, c, and, after, long, time, ,, thing, b, is, not, at, state, c., crutches, is, a, tool, ., if, person, b, break, thing, c, ,, thing, c, is, broken, .]
    Lemmatized tokens: [if, thing, b, be, break, ,, thing, b, be, bad, ., if, thing, b, be, a, tool, ,, thing, b, be, necessary, ., if, thing, b, be, at, state, c, and, after, long, time, ,, thing, b, be, not, at, state, c., crutch, be, a, tool, ., if, person, b, break, thing, c, ,, thing, c, be, break, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBN, ,, NN, NN, VBD-AUX, JJ, ., IN, NN, NN, VBD-AUX, DT, NN, ,, NN, NN, VBD-AUX, JJ, ., IN, NN, NN, VBD-AUX, IN, NN, NN, CC, IN, JJ, NN, ,, NN, NN, VBD-AUX, RB, IN, NN, JJ, NNS, VBD-AUX, DT, NN, ., IN, NN, NN, NN, NN, NN, ,, NN, NN, VBD-AUX, VBN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubjpass->2, auxpass->3], [], [], [compound->6], [], [advcl->4, punct->5, nsubj->7, cop->8, punct->10], [], [], [], [compound->12], [], [], [nsubj->13, cop->14, det->15, mark->11], [], [], [compound->18], [], [advcl->16, punct->17, nsubj->19, cop->20, punct->22], [], [], [], [compound->24], [], [], [], [compound->28, mark->23, nsubj->25, cop->26, case->27], [], [], [], [case->31, amod->32], [], [], [compound->35], [], [], [], [nmod:after->33, punct->34, nsubj->36, cop->37, neg->38, case->39], [], [amod->41], [], [], [det->44, advcl:at->29, conj:and->45, cc->30, punct->46, nsubj->42, cop->43], [], [], [], [compound->48], [mark->47, nsubj->49, dobj->52], [], [compound->51], [], [], [compound->54], [], [nsubjpass->55, auxpass->56, punct->58, advcl->50, punct->53], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What should be unnecessary {
    Tokens: [what, should, be, unnecessary]
    Lemmatized tokens: [what, should, be, unnecessary]
    POS tags: [WP, VBD-AUX, VBD-AUX, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, aux->1, cop->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: When the sponsors of the bill got to the town hall, they were surprised to find that the room was full of opponents. They were very much in the majority. {
    Tokens: [when, the, sponsors, of, the, bill, got, to, the, town, hall, ,, they, were, surprised, to, find, that, the, room, was, full, of, opponents, ., they, were, very, much, in, the, majority, .]
    Lemmatized tokens: [when, the, sponsor, of, the, bill, get, to, the, town, hall, ,, they, be, surprise, to, find, that, the, room, be, full, of, opponent, ., they, be, very, much, in, the, majority, .]
    POS tags: [WRB, DT, NNS, IN, DT, NN, VBD, TO, DT, NN, NN, ,, PRP, VBD-AUX, VBN, TO, VB, IN, DT, NN, VBD-AUX, JJ, IN, NNS, ., PRP, VBD-AUX, RB, RB, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [det->1, nmod:of->5], [], [], [case->3, det->4], [advmod->0, nsubj->2, nmod:to->10], [], [], [], [case->7, det->8, compound->9], [], [], [], [xcomp->16, advcl->6, punct->24, punct->11, nsubjpass->12, auxpass->13], [], [mark->15, ccomp->21], [], [], [det->18], [], [mark->17, nsubj->19, cop->20, nmod:of->23], [], [case->22], [], [], [], [], [advmod->27, nmod:in->31, punct->32, nsubj->25, cop->26], [], [], [case->29, det->30], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If there is full of person B, person B is in the majority and person B is not in the minority. {
    Tokens: [if, there, is, full, of, person, b, ,, person, b, is, in, the, majority, and, person, b, is, not, in, the, minority, .]
    Lemmatized tokens: [if, there, be, full, of, person, b, ,, person, b, be, in, the, majority, and, person, b, be, not, in, the, minority, .]
    POS tags: [IN, EX, VBD-AUX, JJ, IN, NN, NN, ,, NN, NN, VBD-AUX, IN, DT, NN, CC, NN, NN, VBD-AUX, RB, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [mark->0, expl->1, xcomp->3], [nmod:of->6], [], [], [case->4, compound->5], [], [], [compound->8], [advcl->2, advcl:in->21, punct->22, punct->7, nsubj->9], [], [], [conj:and->15, cc->14], [], [], [compound->15, det->12, compound->13], [], [], [], [], [nsubj->16, cop->17, neg->18, case->19, det->20, mark->11], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who were in the majority {
    Tokens: [who, were, in, the, majority]
    Lemmatized tokens: [who, be, in, the, majority]
    POS tags: [WP, VBD-AUX, IN, DT, NN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [], [], [], [nsubj->0, cop->1, case->2, det->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: When the sponsors of the bill got to the town hall, they were surprised to find that the room was full of opponents. They were very much in the minority. {
    Tokens: [when, the, sponsors, of, the, bill, got, to, the, town, hall, ,, they, were, surprised, to, find, that, the, room, was, full, of, opponents, ., they, were, very, much, in, the, minority, .]
    Lemmatized tokens: [when, the, sponsor, of, the, bill, get, to, the, town, hall, ,, they, be, surprise, to, find, that, the, room, be, full, of, opponent, ., they, be, very, much, in, the, minority, .]
    POS tags: [WRB, DT, NNS, IN, DT, NN, VBD, TO, DT, NN, NN, ,, PRP, VBD-AUX, VBN, TO, VB, IN, DT, NN, VBD-AUX, JJ, IN, NNS, ., PRP, VBD-AUX, RB, RB, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [det->1, nmod:of->5], [], [], [case->3, det->4], [advmod->0, nsubj->2, nmod:to->10], [], [], [], [case->7, det->8, compound->9], [], [], [], [xcomp->16, advcl->6, punct->24, punct->11, nsubjpass->12, auxpass->13], [], [mark->15, ccomp->21], [], [], [det->18], [], [mark->17, nsubj->19, cop->20, nmod:of->23], [], [case->22], [], [], [], [], [advmod->27, nmod:in->31, punct->32, nsubj->25, cop->26], [], [], [case->29, det->30], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If there is full of person B, person B is in the majority and person B is not in the minority. {
    Tokens: [if, there, is, full, of, person, b, ,, person, b, is, in, the, majority, and, person, b, is, not, in, the, minority, .]
    Lemmatized tokens: [if, there, be, full, of, person, b, ,, person, b, be, in, the, majority, and, person, b, be, not, in, the, minority, .]
    POS tags: [IN, EX, VBD-AUX, JJ, IN, NN, NN, ,, NN, NN, VBD-AUX, IN, DT, NN, CC, NN, NN, VBD-AUX, RB, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [mark->0, expl->1, xcomp->3], [nmod:of->6], [], [], [case->4, compound->5], [], [], [compound->8], [advcl->2, advcl:in->21, punct->22, punct->7, nsubj->9], [], [], [conj:and->15, cc->14], [], [], [compound->15, det->12, compound->13], [], [], [], [], [nsubj->16, cop->17, neg->18, case->19, det->20, mark->11], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who were in the minority {
    Tokens: [who, were, in, the, minority]
    Lemmatized tokens: [who, be, in, the, minority]
    POS tags: [WP, VBD-AUX, IN, DT, NN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [], [], [], [nsubj->0, cop->1, case->2, det->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Everyone really loved the oatmeal cookies; only a few people liked the chocolate chip cookies. Next time, we should make more of them. {
    Tokens: [everyone, really, loved, the, oatmeal, cookies, ;, only, a, few, people, liked, the, chocolate, chip, cookies, ., next, time, ,, we, should, make, more, of, them, .]
    Lemmatized tokens: [everyone, really, love, the, oatmeal, cookie, ;, only, a, few, people, like, the, chocolate, chip, cookie, ., next, time, ,, we, should, make, more, of, they, .]
    POS tags: [NN, RB, VBD, DT, NN, NNS, :, RB, DT, JJ, NNS, VBD, DT, NN, NN, NNS, ., JJ, NN, ,, PRP, VBD-AUX, VB, JJR, IN, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, punct->16, advmod->1, dobj->5, punct->6, parataxis->11], [], [], [det->3, compound->4], [], [], [], [], [advmod->7, det->8, amod->9], [dobj->15, nsubj->10], [], [], [], [det->12, compound->13, compound->14], [], [], [amod->17], [], [], [], [punct->19, nsubj->20, aux->21, dobj->23, punct->26, nmod:tmod->18], [nmod:of->25], [], [case->24], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If more people like thing B, thing B should be make more. If less people like thing C, thing C should be make fewer. Everyone loves thing B, everyone likes thing B. Everyone likes thing B, more people likes thing B.  B few people likes thing B, less people likes thing B. {
    Tokens: [if, more, people, like, thing, b, ,, thing, b, should, be, make, more, ., if, less, people, like, thing, c, ,, thing, c, should, be, make, fewer, ., everyone, loves, thing, b, ,, everyone, likes, thing, b., everyone, likes, thing, b, ,, more, people, likes, thing, b., b, few, people, likes, thing, b, ,, less, people, likes, thing, b.]
    Lemmatized tokens: [if, more, people, like, thing, b, ,, thing, b, should, be, make, more, ., if, less, people, like, thing, c, ,, thing, c, should, be, make, fewer, ., everyone, love, thing, b, ,, everyone, like, thing, B., everyone, like, thing, b, ,, more, people, like, thing, B., B, few, people, like, thing, b, ,, less, people, like, thing, B.]
    POS tags: [IN, JJR, NNS, IN, NN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, VB, JJR, ., IN, JJR, NNS, IN, NN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, VB, JJR, ., NN, VBZ, NN, NN, ,, NN, VBZ, NNP, NNP, NN, VBZ, NN, NN, ,, JJR, NNS, VBZ, NN, NNP, NNP, JJ, NNS, VBZ, NN, NN, ,, JJR, NNS, VBZ, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [mark->0, amod->1, dep->5], [], [], [case->3, compound->4], [], [], [compound->7], [], [], [advcl->2, punct->6, nsubj->8, aux->9, aux->10, dobj->12, punct->13], [], [], [], [], [dep->19, mark->14, amod->15], [], [], [case->17, compound->18], [], [], [compound->21], [], [], [advcl->16, punct->20, nsubj->22, aux->23, aux->24, dobj->26, punct->27], [], [], [], [ccomp->34, nsubj->28], [], [appos->33, compound->30, punct->32], [], [], [ccomp->38, nsubj->31], [], [], [compound->35, compound->36], [nsubj->37, ccomp->44], [], [], [], [], [compound->39, compound->40, punct->41, amod->42], [ccomp->50, nsubj->43], [], [], [dep->49, compound->45, compound->46], [], [amod->48], [ccomp->56, nsubj->47], [], [], [], [], [compound->51, compound->52, punct->53, amod->54], [nsubj->55, dobj->58], [], [compound->57]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Which cookie should we make more of, next time {
    Tokens: [which, cookie, should, we, make, more, of, ,, next, time]
    Lemmatized tokens: [which, cookie, should, we, make, more, of, ,, next, time]
    POS tags: [WDT, NN, VBD-AUX, PRP, VB, JJR, IN, ,, JJ, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [], [dobj->1, aux->2, nsubj->3, advmod->5, punct->7, advmod->8], [case->6], [], [], [dep->9], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Everyone really loved the oatmeal cookies; only a few people liked the chocolate chip cookies. Next time, we should make fewer of them. {
    Tokens: [everyone, really, loved, the, oatmeal, cookies, ;, only, a, few, people, liked, the, chocolate, chip, cookies, ., next, time, ,, we, should, make, fewer, of, them, .]
    Lemmatized tokens: [everyone, really, love, the, oatmeal, cookie, ;, only, a, few, people, like, the, chocolate, chip, cookie, ., next, time, ,, we, should, make, fewer, of, they, .]
    POS tags: [NN, RB, VBD, DT, NN, NNS, :, RB, DT, JJ, NNS, VBD, DT, NN, NN, NNS, ., JJ, NN, ,, PRP, VBD-AUX, VB, JJR, IN, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, punct->16, advmod->1, dobj->5, punct->6, parataxis->11], [], [], [det->3, compound->4], [], [], [], [], [advmod->7, det->8, amod->9], [dobj->15, nsubj->10], [], [], [], [det->12, compound->13, compound->14], [], [], [amod->17], [], [], [], [punct->19, nsubj->20, aux->21, dobj->23, punct->26, nmod:tmod->18], [nmod:of->25], [], [case->24], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If more people like thing B, thing B should be make more. If less people like thing C, thing C should be make fewer. Everyone loves thing B, everyone likes thing B. Everyone likes thing B, more people likes thing B.  B few people likes thing B, less people likes thing B. {
    Tokens: [if, more, people, like, thing, b, ,, thing, b, should, be, make, more, ., if, less, people, like, thing, c, ,, thing, c, should, be, make, fewer, ., everyone, loves, thing, b, ,, everyone, likes, thing, b., everyone, likes, thing, b, ,, more, people, likes, thing, b., b, few, people, likes, thing, b, ,, less, people, likes, thing, b.]
    Lemmatized tokens: [if, more, people, like, thing, b, ,, thing, b, should, be, make, more, ., if, less, people, like, thing, c, ,, thing, c, should, be, make, fewer, ., everyone, love, thing, b, ,, everyone, like, thing, B., everyone, like, thing, b, ,, more, people, like, thing, B., B, few, people, like, thing, b, ,, less, people, like, thing, B.]
    POS tags: [IN, JJR, NNS, IN, NN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, VB, JJR, ., IN, JJR, NNS, IN, NN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, VB, JJR, ., NN, VBZ, NN, NN, ,, NN, VBZ, NNP, NNP, NN, VBZ, NN, NN, ,, JJR, NNS, VBZ, NN, NNP, NNP, JJ, NNS, VBZ, NN, NN, ,, JJR, NNS, VBZ, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [mark->0, amod->1, dep->5], [], [], [case->3, compound->4], [], [], [compound->7], [], [], [advcl->2, punct->6, nsubj->8, aux->9, aux->10, dobj->12, punct->13], [], [], [], [], [dep->19, mark->14, amod->15], [], [], [case->17, compound->18], [], [], [compound->21], [], [], [advcl->16, punct->20, nsubj->22, aux->23, aux->24, dobj->26, punct->27], [], [], [], [ccomp->34, nsubj->28], [], [appos->33, compound->30, punct->32], [], [], [ccomp->38, nsubj->31], [], [], [compound->35, compound->36], [nsubj->37, ccomp->44], [], [], [], [], [compound->39, compound->40, punct->41, amod->42], [ccomp->50, nsubj->43], [], [], [dep->49, compound->45, compound->46], [], [amod->48], [ccomp->56, nsubj->47], [], [], [], [], [compound->51, compound->52, punct->53, amod->54], [nsubj->55, dobj->58], [], [compound->57]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Which cookie should we make fewer of, next time {
    Tokens: [which, cookie, should, we, make, fewer, of, ,, next, time]
    Lemmatized tokens: [which, cookie, should, we, make, fewer, of, ,, next, time]
    POS tags: [WDT, NN, VBD-AUX, PRP, VB, JJR, IN, ,, JJ, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [], [dep->1, aux->2, nsubj->3, dobj->9], [nmod->6], [], [], [], [amod->5, punct->7, amod->8]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: We had hoped to place copies of our newsletter on all the chairs in the auditorium, but there were simply not enough  of them. {
    Tokens: [we, had, hoped, to, place, copies, of, our, newsletter, on, all, the, chairs, in, the, auditorium, ,, but, there, were, simply, not, enough, of, them, .]
    Lemmatized tokens: [we, have, hope, to, place, copy, of, we, newsletter, on, all, the, chair, in, the, auditorium, ,, but, there, be, simply, not, enough, of, they, .]
    POS tags: [PRP, VBD-AUX, VBN, TO, VB, NNS, IN, PRP$, NN, IN, PDT, DT, NNS, IN, DT, NN, ,, CC, EX, VBD-AUX, RB, RB, RB, IN, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, punct->16, aux->1, cc->17, conj:but->19, xcomp->4, punct->25], [], [mark->3, dobj->5, nmod:on->12], [nmod:of->8], [], [], [case->6, nmod:poss->7], [], [], [], [nmod:in->15, case->9, det:predet->10, det->11], [], [], [case->13, det->14], [], [], [], [expl->18, advmod->20, nsubj->22], [], [], [neg->21, nmod:of->24], [], [case->23], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is all, thing B is too many. {
    Tokens: [if, thing, b, is, all, ,, thing, b, is, too, many, .]
    Lemmatized tokens: [if, thing, b, be, all, ,, thing, b, be, too, many, .]
    POS tags: [IN, NN, NN, VBD-AUX, RB, ,, NN, NN, VBD-AUX, RB, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, advmod->4], [], [], [], [compound->6], [], [], [advcl->3, punct->5, nsubj->7, cop->8, advmod->9, punct->11], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: There are too many of what {
    Tokens: [there, are, too, many, of, what]
    Lemmatized tokens: [there, be, too, many, of, what]
    POS tags: [EX, VBD-AUX, RB, JJ, IN, WP]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [expl->0, advmod->2, xcomp->3], [], [nmod:of->5], [], [case->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: We had hoped to place copies of our newsletter on all the chairs in the auditorium, but there were simply  too many of them. {
    Tokens: [we, had, hoped, to, place, copies, of, our, newsletter, on, all, the, chairs, in, the, auditorium, ,, but, there, were, simply, too, many, of, them, .]
    Lemmatized tokens: [we, have, hope, to, place, copy, of, we, newsletter, on, all, the, chair, in, the, auditorium, ,, but, there, be, simply, too, many, of, they, .]
    POS tags: [PRP, VBD-AUX, VBN, TO, VB, NNS, IN, PRP$, NN, IN, PDT, DT, NNS, IN, DT, NN, ,, CC, EX, VBD-AUX, RB, RB, JJ, IN, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, punct->16, aux->1, cc->17, conj:but->19, xcomp->4, punct->25], [], [mark->3, dobj->5, nmod:on->12], [nmod:of->8], [], [], [case->6, nmod:poss->7], [], [], [], [nmod:in->15, case->9, det:predet->10, det->11], [], [], [case->13, det->14], [], [], [], [nsubj->0, expl->18, advmod->20, xcomp->22], [], [], [advmod->21, nmod:of->24], [], [case->23], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is all, thing B is too many. {
    Tokens: [if, thing, b, is, all, ,, thing, b, is, too, many, .]
    Lemmatized tokens: [if, thing, b, be, all, ,, thing, b, be, too, many, .]
    POS tags: [IN, NN, NN, VBD-AUX, RB, ,, NN, NN, VBD-AUX, RB, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, advmod->4], [], [], [], [compound->6], [], [], [advcl->3, punct->5, nsubj->7, cop->8, advmod->9, punct->11], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: There are not enough of what {
    Tokens: [there, are, not, enough, of, what]
    Lemmatized tokens: [there, be, not, enough, of, what]
    POS tags: [EX, VBD-AUX, RB, RB, IN, WP]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [expl->0, neg->2, nsubj->3], [], [nmod:of->5], [], [case->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I stuck a pin through a carrot. When I pulled the pin out, it left a hole. {
    Tokens: [i, stuck, a, pin, through, a, carrot, ., when, i, pulled, the, pin, out, ,, it, left, a, hole, .]
    Lemmatized tokens: [I, stick, a, pin, through, a, carrot, ., when, I, pull, the, pin, out, ,, it, leave, a, hole, .]
    POS tags: [PRP, VBD, DT, NN, IN, DT, NN, ., WRB, PRP, VBD, DT, NN, RP, ,, PRP, VBD, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, nmod:through->6, punct->7], [], [det->2], [], [], [case->4, det->5], [], [], [], [dobj->12, compound:prt->13, advmod->8, nsubj->9], [], [det->11], [], [], [], [advcl->10, punct->14, nsubj->15, dobj->18, punct->19], [], [det->17], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B sticks thing B through thing C, thing B might left a hole and thing C might have a hole. {
    Tokens: [if, person, b, sticks, thing, b, through, thing, c, ,, thing, b, might, left, a, hole, and, thing, c, might, have, a, hole, .]
    Lemmatized tokens: [if, person, b, stick, thing, b, through, thing, c, ,, thing, b, might, leave, a, hole, and, thing, c, might, have, a, hole, .]
    POS tags: [IN, NN, NN, VBZ, NN, NN, IN, NN, NN, ,, NN, NN, VBD-AUX, VBD, DT, NN, CC, NN, NN, VBD-AUX, VBD-AUX, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5, nmod:through->8], [], [compound->4], [], [], [case->6, compound->7], [], [], [compound->10], [], [advcl->3, ccomp->20, punct->23, punct->9, nsubj->11, aux->12], [], [cc->16, conj:and->17], [], [], [compound->15, compound->17, det->14], [], [nsubj->18, aux->19, dobj->22], [], [det->21], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What left a hole {
    Tokens: [what, left, a, hole]
    Lemmatized tokens: [what, leave, a, hole]
    POS tags: [WDT, VBD, DT, NN]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3], [], [det->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I stuck a pin through a carrot. When I pulled the pin out, it had a hole. {
    Tokens: [i, stuck, a, pin, through, a, carrot, ., when, i, pulled, the, pin, out, ,, it, had, a, hole, .]
    Lemmatized tokens: [I, stick, a, pin, through, a, carrot, ., when, I, pull, the, pin, out, ,, it, have, a, hole, .]
    POS tags: [PRP, VBD, DT, NN, IN, DT, NN, ., WRB, PRP, VBD, DT, NN, RP, ,, PRP, VBD-AUX, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, nmod:through->6, punct->7], [], [det->2], [], [], [case->4, det->5], [], [], [], [dobj->12, compound:prt->13, advmod->8, nsubj->9], [], [det->11], [], [], [], [advcl->10, punct->14, nsubj->15, dobj->18, punct->19], [], [det->17], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B sticks thing B through thing C, thing B might left a hole and thing C might have a hole. {
    Tokens: [if, person, b, sticks, thing, b, through, thing, c, ,, thing, b, might, left, a, hole, and, thing, c, might, have, a, hole, .]
    Lemmatized tokens: [if, person, b, stick, thing, b, through, thing, c, ,, thing, b, might, leave, a, hole, and, thing, c, might, have, a, hole, .]
    POS tags: [IN, NN, NN, VBZ, NN, NN, IN, NN, NN, ,, NN, NN, VBD-AUX, VBD, DT, NN, CC, NN, NN, VBD-AUX, VBD-AUX, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5, nmod:through->8], [], [compound->4], [], [], [case->6, compound->7], [], [], [compound->10], [], [advcl->3, ccomp->20, punct->23, punct->9, nsubj->11, aux->12], [], [cc->16, conj:and->17], [], [], [compound->15, compound->17, det->14], [], [nsubj->18, aux->19, dobj->22], [], [det->21], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What had a hole {
    Tokens: [what, had, a, hole]
    Lemmatized tokens: [what, have, a, hole]
    POS tags: [WDT, VBD-AUX, DT, NN]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3], [], [det->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I couldn't find a spoon, so I tried using a pen to stir my coffee. But that turned out to be a bad idea, because it got full of ink. {
    Tokens: [i, could, n't, find, a, spoon, ,, so, i, tried, using, a, pen, to, stir, my, coffee, ., but, that, turned, out, to, be, a, bad, idea, ,, because, it, got, full, of, ink, .]
    Lemmatized tokens: [I, could, not, find, a, spoon, ,, so, I, try, use, a, pen, to, stir, my, coffee, ., but, that, turn, out, to, be, a, bad, idea, ,, because, it, get, full, of, ink, .]
    POS tags: [PRP, VBD-AUX, RB, VB, DT, NNP, ,, IN, PRP, VBD, VBG, DT, NN, TO, VB, PRP$, NN, ., CC, DT, VBD, RP, TO, VBD-AUX, DT, JJ, NN, ,, IN, PRP, VBD, JJ, IN, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, aux->1, punct->17, neg->2, dobj->5, punct->6, dep->7, parataxis->9], [], [det->4], [], [], [], [nsubj->8, xcomp->10], [dobj->12], [], [det->11, acl->14], [], [dobj->16, mark->13], [], [nmod:poss->15], [], [], [], [compound:prt->21, xcomp->26, punct->27, advcl->30, cc->18, punct->34, nsubj->19], [], [], [], [], [], [mark->22, cop->23, det->24, amod->25], [], [], [], [mark->28, nsubj->29, dobj->31], [nmod:of->33], [], [case->32], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Pen’s content is ink. Coffee’s content is coffee. If person B use thing C to stir thing D, thing C might get full of  thing D’s content and thing D might get full of thing C’s content. {
    Tokens: [pen, 's, content, is, ink, ., coffee, 's, content, is, coffee, ., if, person, b, use, thing, c, to, stir, thing, d, ,, thing, c, might, get, full, of, thing, d, 's, content, and, thing, d, might, get, full, of, thing, c, 's, content, .]
    Lemmatized tokens: [pen, 's, content, be, ink, ., coffee, 's, content, be, coffee, ., if, person, b, use, thing, c, to, stir, thing, d, ,, thing, c, might, get, full, of, thing, d, 's, content, and, thing, d, might, get, full, of, thing, c, 's, content, .]
    POS tags: [NN, POS, NN, VBD-AUX, NN, ., NN, POS, NN, VBD-AUX, NN, ., IN, NN, NN, NN, NN, NN, TO, VB, NN, NN, ,, NN, NN, VBD-AUX, VB, JJ, IN, NN, NN, POS, NN, CC, NN, NN, VBD-AUX, VB, JJ, IN, NN, NN, POS, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[case->1], [], [nmod:poss->0], [], [nsubj->2, cop->3, punct->5], [], [case->7], [], [nmod:poss->6], [], [nsubj->8, cop->9, punct->11], [], [], [], [dep->17, compound->13], [], [], [compound->15, compound->16], [], [mark->18, dobj->21, mark->12, nsubj->14], [], [compound->20], [], [], [compound->23], [], [advcl->19, ccomp->37, punct->22, nsubj->24, aux->25, punct->44], [nmod:of->35, nmod:of->32], [], [], [compound->29, case->31], [], [cc->33, conj:and->35, case->28, nmod:poss->30], [], [], [compound->34], [], [aux->36, dobj->38, nsubj->27], [nmod:of->43], [], [], [compound->40, case->42], [], [case->39, nmod:poss->41], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What got full of ink {
    Tokens: [what, got, full, of, ink]
    Lemmatized tokens: [what, get, full, of, ink]
    POS tags: [WDT, VBD, JJ, IN, NN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2], [nmod:of->4], [], [case->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I couldn't find a spoon, so I tried using a pen to stir my coffee. But that turned out to be a bad idea, because it got full of coffee. {
    Tokens: [i, could, n't, find, a, spoon, ,, so, i, tried, using, a, pen, to, stir, my, coffee, ., but, that, turned, out, to, be, a, bad, idea, ,, because, it, got, full, of, coffee, .]
    Lemmatized tokens: [I, could, not, find, a, spoon, ,, so, I, try, use, a, pen, to, stir, my, coffee, ., but, that, turn, out, to, be, a, bad, idea, ,, because, it, get, full, of, coffee, .]
    POS tags: [PRP, VBD-AUX, RB, VB, DT, NNP, ,, IN, PRP, VBD, VBG, DT, NN, TO, VB, PRP$, NN, ., CC, DT, VBD, RP, TO, VBD-AUX, DT, JJ, NN, ,, IN, PRP, VBD, JJ, IN, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, aux->1, punct->17, neg->2, dobj->5, punct->6, dep->7, parataxis->9], [], [det->4], [], [], [], [nsubj->8, xcomp->10], [dobj->12], [], [det->11, acl->14], [], [dobj->16, mark->13], [], [nmod:poss->15], [], [], [], [compound:prt->21, xcomp->26, punct->27, advcl->30, cc->18, punct->34, nsubj->19], [], [], [], [], [], [mark->22, cop->23, det->24, amod->25], [], [], [], [mark->28, nsubj->29, dobj->31], [nmod:of->33], [], [case->32], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Pen’s content is ink. Coffee’s content is coffee. If person B use thing C to stir thing D, thing C might get full of  thing D’s content and thing D might get full of thing C’s content. {
    Tokens: [pen, 's, content, is, ink, ., coffee, 's, content, is, coffee, ., if, person, b, use, thing, c, to, stir, thing, d, ,, thing, c, might, get, full, of, thing, d, 's, content, and, thing, d, might, get, full, of, thing, c, 's, content, .]
    Lemmatized tokens: [pen, 's, content, be, ink, ., coffee, 's, content, be, coffee, ., if, person, b, use, thing, c, to, stir, thing, d, ,, thing, c, might, get, full, of, thing, d, 's, content, and, thing, d, might, get, full, of, thing, c, 's, content, .]
    POS tags: [NN, POS, NN, VBD-AUX, NN, ., NN, POS, NN, VBD-AUX, NN, ., IN, NN, NN, NN, NN, NN, TO, VB, NN, NN, ,, NN, NN, VBD-AUX, VB, JJ, IN, NN, NN, POS, NN, CC, NN, NN, VBD-AUX, VB, JJ, IN, NN, NN, POS, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[case->1], [], [nmod:poss->0], [], [nsubj->2, cop->3, punct->5], [], [case->7], [], [nmod:poss->6], [], [nsubj->8, cop->9, punct->11], [], [], [], [dep->17, compound->13], [], [], [compound->15, compound->16], [], [mark->18, dobj->21, mark->12, nsubj->14], [], [compound->20], [], [], [compound->23], [], [advcl->19, ccomp->37, punct->22, nsubj->24, aux->25, punct->44], [nmod:of->35, nmod:of->32], [], [], [compound->29, case->31], [], [cc->33, conj:and->35, case->28, nmod:poss->30], [], [], [compound->34], [], [aux->36, dobj->38, nsubj->27], [nmod:of->43], [], [], [compound->40, case->42], [], [case->39, nmod:poss->41], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What got full of coffee {
    Tokens: [what, got, full, of, coffee]
    Lemmatized tokens: [what, get, full, of, coffee]
    POS tags: [WDT, VBD, JJ, IN, NN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2], [nmod:of->4], [], [case->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Steve follows Fred's example in everything. He admires him hugely. {
    Tokens: [steve, follows, fred, 's, example, in, everything, ., he, admires, him, hugely, .]
    Lemmatized tokens: [Steve, follow, Fred, 's, example, in, everything, ., he, admire, he, hugely, .]
    POS tags: [NNP, VBZ, NNP, POS, NN, IN, NN, ., PRP, VBZ, PRP, RB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->4, punct->7], [case->3], [], [nmod:poss->2, nmod:in->6], [], [case->5], [], [], [dobj->10, advmod->11, punct->12, nsubj->8], [], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B admires person C, person B might follow person C. If person B follow person C, person C influences person B. {
    Tokens: [if, person, b, admires, person, c, ,, person, b, might, follow, person, c, ., if, person, b, follow, person, c, ,, person, c, influences, person, b.]
    Lemmatized tokens: [if, person, b, admire, person, c, ,, person, b, might, follow, person, c, ., if, person, b, follow, person, c, ,, person, c, influence, person, B.]
    POS tags: [IN, NN, NN, VBZ, NN, NN, ,, NN, NN, VBD-AUX, VB, NN, NN, ., IN, NN, NN, VBP, NN, NN, ,, NN, NN, VBZ, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5], [], [compound->4], [], [], [compound->7], [], [advcl->3, punct->6, nsubj->8, aux->9, dobj->12, punct->13], [], [compound->11], [], [], [], [compound->15], [nsubj->16, dobj->19, mark->14], [], [compound->18], [], [], [compound->21], [advcl->17, punct->20, nsubj->22, dobj->25], [], [compound->24]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who admires whom {
    Tokens: [who, admires, whom]
    Lemmatized tokens: [who, admire, whom]
    POS tags: [WP, VBZ, WP]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Steve follows Fred's example in everything. He influences him hugely. {
    Tokens: [steve, follows, fred, 's, example, in, everything, ., he, influences, him, hugely, .]
    Lemmatized tokens: [Steve, follow, Fred, 's, example, in, everything, ., he, influence, he, hugely, .]
    POS tags: [NNP, VBZ, NNP, POS, NN, IN, NN, ., PRP, VBZ, PRP, RB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->4, punct->7], [case->3], [], [nmod:poss->2, nmod:in->6], [], [case->5], [], [], [dobj->10, advmod->11, punct->12, nsubj->8], [], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B admires person C, person B might follow person C. If person B follow person C, person C influences person B. {
    Tokens: [if, person, b, admires, person, c, ,, person, b, might, follow, person, c, ., if, person, b, follow, person, c, ,, person, c, influences, person, b.]
    Lemmatized tokens: [if, person, b, admire, person, c, ,, person, b, might, follow, person, c, ., if, person, b, follow, person, c, ,, person, c, influence, person, B.]
    POS tags: [IN, NN, NN, VBZ, NN, NN, ,, NN, NN, VBD-AUX, VB, NN, NN, ., IN, NN, NN, VBP, NN, NN, ,, NN, NN, VBZ, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5], [], [compound->4], [], [], [compound->7], [], [advcl->3, punct->6, nsubj->8, aux->9, dobj->12, punct->13], [], [compound->11], [], [], [], [compound->15], [nsubj->16, dobj->19, mark->14], [], [compound->18], [], [], [compound->21], [advcl->17, punct->20, nsubj->22, dobj->25], [], [compound->24]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who influences whom {
    Tokens: [who, influences, whom]
    Lemmatized tokens: [who, influence, whom]
    POS tags: [WP, VBZ, WP]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The table won't fit through the doorway because it is too wide. {
    Tokens: [the, table, wo, n't, fit, through, the, doorway, because, it, is, too, wide, .]
    Lemmatized tokens: [the, table, will, not, fit, through, the, doorway, because, it, be, too, wide, .]
    POS tags: [DT, NN, MD, RB, VB, IN, DT, NN, IN, PRP, VBD-AUX, RB, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [], [nsubj->1, aux->2, neg->3, nmod:through->7, advcl->12, punct->13], [], [], [case->5, det->6], [], [], [], [], [mark->8, nsubj->9, cop->10, advmod->11], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is too wide and thing C is too narrow, thing B can’t fit through thing C. {
    Tokens: [if, thing, b, is, too, wide, and, thing, c, is, too, narrow, ,, thing, b, ca, n't, fit, through, thing, c.]
    Lemmatized tokens: [if, thing, b, be, too, wide, and, thing, c, be, too, narrow, ,, thing, b, can, not, fit, through, thing, C.]
    POS tags: [IN, NN, NN, VBD-AUX, RB, JJ, CC, NN, NN, VBD-AUX, RB, JJ, ,, NN, NN, MD, RB, VB, IN, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubj->2, cop->3, advmod->4, cc->6, conj:and->11], [], [], [compound->7], [], [], [nsubj->8, cop->9, advmod->10], [], [], [compound->13], [], [], [aux->15, neg->16, nmod:through->20, advcl->5, advcl->11, punct->12, nsubj->14], [], [], [case->18, compound->19]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What is too wide {
    Tokens: [what, is, too, wide]
    Lemmatized tokens: [what, be, too, wide]
    POS tags: [WP, VBD-AUX, RB, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, advmod->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The table won't fit through the doorway because it is too narrow. {
    Tokens: [the, table, wo, n't, fit, through, the, doorway, because, it, is, too, narrow, .]
    Lemmatized tokens: [the, table, will, not, fit, through, the, doorway, because, it, be, too, narrow, .]
    POS tags: [DT, NN, MD, RB, VB, IN, DT, NN, IN, PRP, VBD-AUX, RB, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [], [], [nsubj->1, aux->2, neg->3, nmod:through->7, advcl->12, punct->13], [], [], [case->5, det->6], [], [], [], [], [mark->8, nsubj->9, cop->10, advmod->11], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B is too wide and thing C is too narrow, thing B can’t fit through thing C. {
    Tokens: [if, thing, b, is, too, wide, and, thing, c, is, too, narrow, ,, thing, b, ca, n't, fit, through, thing, c.]
    Lemmatized tokens: [if, thing, b, be, too, wide, and, thing, c, be, too, narrow, ,, thing, b, can, not, fit, through, thing, C.]
    POS tags: [IN, NN, NN, VBD-AUX, RB, JJ, CC, NN, NN, VBD-AUX, RB, JJ, ,, NN, NN, MD, RB, VB, IN, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubj->2, cop->3, advmod->4, cc->6, conj:and->11], [], [], [compound->7], [], [], [nsubj->8, cop->9, advmod->10], [], [], [compound->13], [], [], [aux->15, neg->16, nmod:through->20, advcl->5, advcl->11, punct->12, nsubj->14], [], [], [case->18, compound->19]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What is too narrow {
    Tokens: [what, is, too, narrow]
    Lemmatized tokens: [what, be, too, narrow]
    POS tags: [WP, VBD-AUX, RB, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, advmod->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Grace was happy to trade me her sweater for my jacket. She thinks it looks great on her. {
    Tokens: [grace, was, happy, to, trade, me, her, sweater, for, my, jacket, ., she, thinks, it, looks, great, on, her, .]
    Lemmatized tokens: [Grace, be, happy, to, trade, I, she, sweater, for, my, jacket, ., she, think, it, look, great, on, she, .]
    POS tags: [NNP, VBD-AUX, JJ, TO, VB, PRP, PRP$, NN, IN, PRP$, NN, ., PRP, VBZ, PRP, VBZ, JJ, IN, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1, xcomp->4, punct->11], [], [mark->3, xcomp->7], [], [], [nsubj->5, nmod:poss->6, nmod:for->10], [], [], [case->8, nmod:poss->9], [], [], [ccomp->15, punct->19, nsubj->12], [], [nsubj->14, xcomp->16], [nmod:on->18], [], [case->17], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B trades thing C for thing D, person B likes thing D and person B doesn’t like thing C. If person B thinks thing C looks great, person B likes thing C. If person B thinks thing D looks dowdy, person B doesn’t like thing D. {
    Tokens: [if, person, b, trades, thing, c, for, thing, d, ,, person, b, likes, thing, d, and, person, b, does, n't, like, thing, c, ., if, person, b, thinks, thing, c, looks, great, ,, person, b, likes, thing, c, ., if, person, b, thinks, thing, d, looks, dowdy, ,, person, b, does, n't, like, thing, d.]
    Lemmatized tokens: [if, person, b, trade, thing, c, for, thing, d, ,, person, b, like, thing, d, and, person, b, do, not, like, thing, c, ., if, person, b, think, thing, c, look, great, ,, person, b, like, thing, c, ., if, person, b, think, thing, d, look, dowdy, ,, person, b, do, not, like, thing, D.]
    POS tags: [IN, NN, NN, NNS, NN, NN, IN, NN, NN, ,, NN, NN, VBZ, NN, NN, CC, NN, NN, VBD-AUX, RB, VB, NN, NN, ., IN, NN, NN, VBZ, NN, NN, VBZ, JJ, ,, NN, NN, VBZ, NN, NN, ., IN, NN, NN, VBZ, NN, NN, VBZ, JJ, ,, NN, NN, VBD-AUX, RB, VB, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [compound->1, compound->2, compound->3], [mark->0, nsubj->4, nmod:for->8], [], [], [case->6, compound->7], [], [], [compound->10], [ccomp->20, advcl->5, punct->23, punct->9, nsubj->11], [], [cc->15, conj:and->17, compound->13], [], [], [compound->16], [], [], [nsubj->17, aux->18, neg->19, dobj->22, nsubj->14], [], [compound->21], [], [], [], [compound->25], [nsubj->26, ccomp->30, mark->24], [], [compound->28], [nsubj->29, xcomp->31], [], [], [], [compound->33], [advcl->27, punct->32, nsubj->34, dobj->37, punct->38], [], [compound->36], [], [], [], [compound->40], [ccomp->45, mark->39, nsubj->41], [], [compound->43], [nsubj->44, xcomp->46], [], [], [], [compound->48], [], [], [punct->47, nsubj->49, aux->50, neg->51, dobj->54, advcl->42], [], [compound->53]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What looks great on Grace {
    Tokens: [what, looks, great, on, grace]
    Lemmatized tokens: [what, look, great, on, grace]
    POS tags: [WDT, VBZ, JJ, IN, NN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, xcomp->2], [nmod:on->4], [], [case->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Grace was happy to trade me her sweater for my jacket. She thinks it looks dowdy on her. {
    Tokens: [grace, was, happy, to, trade, me, her, sweater, for, my, jacket, ., she, thinks, it, looks, dowdy, on, her, .]
    Lemmatized tokens: [Grace, be, happy, to, trade, I, she, sweater, for, my, jacket, ., she, think, it, look, dowdy, on, she, .]
    POS tags: [NNP, VBD-AUX, JJ, TO, VB, PRP, PRP$, NN, IN, PRP$, NN, ., PRP, VBZ, PRP, VBZ, JJ, IN, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1, xcomp->4, punct->11], [], [mark->3, xcomp->7], [], [], [nsubj->5, nmod:poss->6, nmod:for->10], [], [], [case->8, nmod:poss->9], [], [], [ccomp->15, punct->19, nsubj->12], [], [nsubj->14, xcomp->16], [nmod:on->18], [], [case->17], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B trades thing C for thing D, person B likes thing D and person B doesn’t like thing C. If person B thinks thing C looks great, person B likes thing C. If person B thinks thing D looks dowdy, person B doesn’t like thing D. {
    Tokens: [if, person, b, trades, thing, c, for, thing, d, ,, person, b, likes, thing, d, and, person, b, does, n't, like, thing, c, ., if, person, b, thinks, thing, c, looks, great, ,, person, b, likes, thing, c, ., if, person, b, thinks, thing, d, looks, dowdy, ,, person, b, does, n't, like, thing, d.]
    Lemmatized tokens: [if, person, b, trade, thing, c, for, thing, d, ,, person, b, like, thing, d, and, person, b, do, not, like, thing, c, ., if, person, b, think, thing, c, look, great, ,, person, b, like, thing, c, ., if, person, b, think, thing, d, look, dowdy, ,, person, b, do, not, like, thing, D.]
    POS tags: [IN, NN, NN, NNS, NN, NN, IN, NN, NN, ,, NN, NN, VBZ, NN, NN, CC, NN, NN, VBD-AUX, RB, VB, NN, NN, ., IN, NN, NN, VBZ, NN, NN, VBZ, JJ, ,, NN, NN, VBZ, NN, NN, ., IN, NN, NN, VBZ, NN, NN, VBZ, JJ, ,, NN, NN, VBD-AUX, RB, VB, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [compound->1, compound->2, compound->3], [mark->0, nsubj->4, nmod:for->8], [], [], [case->6, compound->7], [], [], [compound->10], [ccomp->20, advcl->5, punct->23, punct->9, nsubj->11], [], [cc->15, conj:and->17, compound->13], [], [], [compound->16], [], [], [nsubj->17, aux->18, neg->19, dobj->22, nsubj->14], [], [compound->21], [], [], [], [compound->25], [nsubj->26, ccomp->30, mark->24], [], [compound->28], [nsubj->29, xcomp->31], [], [], [], [compound->33], [advcl->27, punct->32, nsubj->34, dobj->37, punct->38], [], [compound->36], [], [], [], [compound->40], [ccomp->45, mark->39, nsubj->41], [], [compound->43], [nsubj->44, xcomp->46], [], [], [], [compound->48], [], [], [punct->47, nsubj->49, aux->50, neg->51, dobj->54, advcl->42], [], [compound->53]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What looks dowdy on Grace {
    Tokens: [what, looks, dowdy, on, grace]
    Lemmatized tokens: [what, look, dowdy, on, grace]
    POS tags: [WDT, VBZ, JJ, IN, NN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, xcomp->2], [nmod:on->4], [], [case->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Bill thinks that calling attention to himself was rude to Bert. {
    Tokens: [bill, thinks, that, calling, attention, to, himself, was, rude, to, bert, .]
    Lemmatized tokens: [Bill, think, that, call, attention, to, himself, be, rude, to, Bert, .]
    POS tags: [NNP, VBZ, IN, VBG, NN, TO, PRP, VBD-AUX, JJ, TO, NNP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, PERSON, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, ccomp->8, punct->11], [], [dobj->4, nmod:to->6], [], [], [case->5], [], [mark->2, csubj->3, cop->7, nmod:to->10], [], [case->9], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B calls attention to himself, it is rude to somebody and it is rude of person B. {
    Tokens: [if, person, b, calls, attention, to, himself, ,, it, is, rude, to, somebody, and, it, is, rude, of, person, b.]
    Lemmatized tokens: [if, person, b, call, attention, to, himself, ,, it, be, rude, to, somebody, and, it, be, rude, of, person, B.]
    POS tags: [IN, NN, NN, VBZ, NN, TO, PRP, ,, PRP, VBD-AUX, JJ, TO, NN, CC, PRP, VBD-AUX, JJ, IN, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->4, nmod:to->6], [], [], [case->5], [], [], [], [conj:and->16, advcl->3, punct->7, nsubj->8, cop->9, nmod:to->12, cc->13], [], [case->11], [], [], [], [cop->15, nmod:of->19, nsubj->14], [], [], [case->17, compound->18]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who called attention to himself {
    Tokens: [who, called, attention, to, himself]
    Lemmatized tokens: [who, call, attention, to, himself]
    POS tags: [WP, VBD, NN, TO, PRP]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2, nmod:to->4], [], [], [case->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Bill thinks that calling attention to himself was rude of Bert. {
    Tokens: [bill, thinks, that, calling, attention, to, himself, was, rude, of, bert, .]
    Lemmatized tokens: [Bill, think, that, call, attention, to, himself, be, rude, of, Bert, .]
    POS tags: [NNP, VBZ, IN, VBG, NN, TO, PRP, VBD-AUX, JJ, IN, NNP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, PERSON, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, ccomp->8, punct->11], [], [dobj->4, nmod:to->6], [], [], [case->5], [], [mark->2, csubj->3, cop->7, nmod:of->10], [], [case->9], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B calls attention to himself, it is rude to somebody and it is rude of person B. {
    Tokens: [if, person, b, calls, attention, to, himself, ,, it, is, rude, to, somebody, and, it, is, rude, of, person, b.]
    Lemmatized tokens: [if, person, b, call, attention, to, himself, ,, it, be, rude, to, somebody, and, it, be, rude, of, person, B.]
    POS tags: [IN, NN, NN, VBZ, NN, TO, PRP, ,, PRP, VBD-AUX, JJ, TO, NN, CC, PRP, VBD-AUX, JJ, IN, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->4, nmod:to->6], [], [], [case->5], [], [], [], [conj:and->16, advcl->3, punct->7, nsubj->8, cop->9, nmod:to->12, cc->13], [], [case->11], [], [], [], [cop->15, nmod:of->19, nsubj->14], [], [], [case->17, compound->18]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who called attention to himself {
    Tokens: [who, called, attention, to, himself]
    Lemmatized tokens: [who, call, attention, to, himself]
    POS tags: [WP, VBD, NN, TO, PRP]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2, nmod:to->4], [], [], [case->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: John hired Bill to take care of him. {
    Tokens: [john, hired, bill, to, take, care, of, him, .]
    Lemmatized tokens: [John, hire, bill, to, take, care, of, he, .]
    POS tags: [NNP, VBD, NN, TO, VB, NN, IN, PRP, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2, advcl->4, punct->8], [], [], [mark->3, dobj->5], [nmod:of->7], [], [case->6], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B hires person C to take care of him, person C takes care of person B. If person B hires himself out to person C to take care of him, person B takes care of person C. {
    Tokens: [if, person, b, hires, person, c, to, take, care, of, him, ,, person, c, takes, care, of, person, b, ., if, person, b, hires, himself, out, to, person, c, to, take, care, of, him, ,, person, b, takes, care, of, person, c.]
    Lemmatized tokens: [if, person, b, hire, person, c, to, take, care, of, he, ,, person, c, take, care, of, person, b, ., if, person, b, hire, himself, out, to, person, c, to, take, care, of, he, ,, person, b, take, care, of, person, c.]
    POS tags: [IN, NN, NN, VBZ, NN, NN, TO, VB, NN, IN, PRP, ,, NN, NN, VBZ, NN, IN, NN, NN, ., IN, NN, NN, VBZ, PRP, RP, TO, NN, NN, TO, VB, NN, IN, PRP, ,, NN, NN, VBZ, NN, IN, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5, advcl->7], [], [compound->4], [], [mark->6, dobj->8], [nmod:of->10], [], [case->9], [], [], [compound->12], [dobj->15, advcl->3, punct->19, punct->11, nsubj->13], [nmod:of->18], [], [], [case->16, compound->17], [], [], [], [compound->21], [nsubj->22, dobj->24, compound:prt->25, nmod:to->28, advcl->30, mark->20], [], [], [], [], [case->26, compound->27], [], [mark->29, dobj->31], [nmod:of->33], [], [case->32], [], [], [compound->35], [dobj->38, advcl->23, punct->34, nsubj->36], [nmod:of->41], [], [], [case->39, compound->40]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who is taking care of whom {
    Tokens: [who, is, taking, care, of, whom]
    Lemmatized tokens: [who, be, take, care, of, whom]
    POS tags: [WP, VBD-AUX, VBG, NN, IN, WP]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, dobj->3], [nmod:of->5], [], [case->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: John hired himself out to Bill to take care of him. {
    Tokens: [john, hired, himself, out, to, bill, to, take, care, of, him, .]
    Lemmatized tokens: [John, hire, himself, out, to, bill, to, take, care, of, he, .]
    POS tags: [NNP, VBD, PRP, RP, TO, NN, TO, VB, NN, IN, PRP, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2, compound:prt->3, nmod:to->5, advcl->7, punct->11], [], [], [], [case->4], [], [mark->6, dobj->8], [nmod:of->10], [], [case->9], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B hires person C to take care of him, person C takes care of person B. If person B hires himself out to person C to take care of him, person B takes care of person C. {
    Tokens: [if, person, b, hires, person, c, to, take, care, of, him, ,, person, c, takes, care, of, person, b, ., if, person, b, hires, himself, out, to, person, c, to, take, care, of, him, ,, person, b, takes, care, of, person, c.]
    Lemmatized tokens: [if, person, b, hire, person, c, to, take, care, of, he, ,, person, c, take, care, of, person, b, ., if, person, b, hire, himself, out, to, person, c, to, take, care, of, he, ,, person, b, take, care, of, person, c.]
    POS tags: [IN, NN, NN, VBZ, NN, NN, TO, VB, NN, IN, PRP, ,, NN, NN, VBZ, NN, IN, NN, NN, ., IN, NN, NN, VBZ, PRP, RP, TO, NN, NN, TO, VB, NN, IN, PRP, ,, NN, NN, VBZ, NN, IN, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5, advcl->7], [], [compound->4], [], [mark->6, dobj->8], [nmod:of->10], [], [case->9], [], [], [compound->12], [dobj->15, advcl->3, punct->19, punct->11, nsubj->13], [nmod:of->18], [], [], [case->16, compound->17], [], [], [], [compound->21], [nsubj->22, dobj->24, compound:prt->25, nmod:to->28, advcl->30, mark->20], [], [], [], [], [case->26, compound->27], [], [mark->29, dobj->31], [nmod:of->33], [], [case->32], [], [], [compound->35], [dobj->38, advcl->23, punct->34, nsubj->36], [nmod:of->41], [], [], [case->39, compound->40]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who is taking care of whom {
    Tokens: [who, is, taking, care, of, whom]
    Lemmatized tokens: [who, be, take, care, of, whom]
    POS tags: [WP, VBD-AUX, VBG, NN, IN, WP]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, dobj->3], [nmod:of->5], [], [case->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: John promised Bill to leave, so an hour later he left. {
    Tokens: [john, promised, bill, to, leave, ,, so, an, hour, later, he, left, .]
    Lemmatized tokens: [John, promise, bill, to, leave, ,, so, a, hour, later, he, leave, .]
    POS tags: [NNP, VBD, NN, TO, VB, ,, IN, DT, NN, RB, PRP, VBD, .]
    NER tags: [PERSON, O, O, O, O, O, O, DATE, DATE, DATE, O, O, O]
    NER values: [null, null, null, null, null, null, null, OFFSET PT1H, OFFSET PT1H, OFFSET PT1H, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2, advcl->4, punct->5, dep->6, parataxis->11, punct->12], [], [], [mark->3], [], [], [], [det->7], [nmod:npmod->8], [], [advmod->9, nsubj->10], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B promise person C to do thing B, person B will do thing B. If person B order person C to do thing B, person C will do thing B. {
    Tokens: [if, person, b, promise, person, c, to, do, thing, b, ,, person, b, will, do, thing, b, ., if, person, b, order, person, c, to, do, thing, b, ,, person, c, will, do, thing, b.]
    Lemmatized tokens: [if, person, b, promise, person, c, to, do, thing, b, ,, person, b, will, do, thing, b, ., if, person, b, order, person, c, to, do, thing, b, ,, person, c, will, do, thing, B.]
    POS tags: [IN, NN, NN, VBP, NN, NN, TO, VBD-AUX, NN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, NN, NN, ., IN, NN, NN, NN, NN, NN, TO, VBD-AUX, NN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, NNP, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5, xcomp->7], [], [compound->4], [], [mark->6, dobj->9], [], [compound->8], [], [], [compound->11], [], [dobj->16, punct->17, advcl->3, punct->10, nsubj->12, aux->13], [], [compound->15], [], [], [], [dep->23, compound->19], [], [], [compound->21, compound->22], [], [nsubj->20, mark->24, dobj->27, mark->18], [], [compound->26], [], [], [compound->29], [], [advcl->25, punct->28, nsubj->30, aux->31, dobj->34], [], [compound->33]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who left {
    Tokens: [who, left]
    Lemmatized tokens: [who, leave]
    POS tags: [WP, VBD]
    NER tags: [O, O]
    NER values: [null, null]
    Dependency children: [[], [nsubj->0]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: John ordered Bill to leave, so an hour later he left. {
    Tokens: [john, ordered, bill, to, leave, ,, so, an, hour, later, he, left, .]
    Lemmatized tokens: [John, order, bill, to, leave, ,, so, a, hour, later, he, leave, .]
    POS tags: [NNP, VBD, NN, TO, VB, ,, IN, DT, NN, RB, PRP, VBD, .]
    NER tags: [PERSON, O, O, O, O, O, O, DATE, DATE, DATE, O, O, O]
    NER values: [null, null, null, null, null, null, null, OFFSET PT1H, OFFSET PT1H, OFFSET PT1H, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2, xcomp->4, punct->5, dep->6, parataxis->11, punct->12], [], [], [mark->3], [], [], [], [det->7], [nmod:npmod->8], [], [advmod->9, nsubj->10], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B promise person C to do thing B, person B will do thing B. If person B order person C to do thing B, person C will do thing B. {
    Tokens: [if, person, b, promise, person, c, to, do, thing, b, ,, person, b, will, do, thing, b, ., if, person, b, order, person, c, to, do, thing, b, ,, person, c, will, do, thing, b.]
    Lemmatized tokens: [if, person, b, promise, person, c, to, do, thing, b, ,, person, b, will, do, thing, b, ., if, person, b, order, person, c, to, do, thing, b, ,, person, c, will, do, thing, B.]
    POS tags: [IN, NN, NN, VBP, NN, NN, TO, VBD-AUX, NN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, NN, NN, ., IN, NN, NN, NN, NN, NN, TO, VBD-AUX, NN, NN, ,, NN, NN, VBD-AUX, VBD-AUX, NNP, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5, xcomp->7], [], [compound->4], [], [mark->6, dobj->9], [], [compound->8], [], [], [compound->11], [], [dobj->16, punct->17, advcl->3, punct->10, nsubj->12, aux->13], [], [compound->15], [], [], [], [dep->23, compound->19], [], [], [compound->21, compound->22], [], [nsubj->20, mark->24, dobj->27, mark->18], [], [compound->26], [], [], [compound->29], [], [advcl->25, punct->28, nsubj->30, aux->31, dobj->34], [], [compound->33]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who left {
    Tokens: [who, left]
    Lemmatized tokens: [who, leave]
    POS tags: [WP, VBD]
    NER tags: [O, O]
    NER values: [null, null]
    Dependency children: [[], [nsubj->0]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Sam Goodman's biography of the Spartan general Xenophanes conveys a vivid sense of the difficulties he faced in his childhood. {
    Tokens: [sam, goodman, 's, biography, of, the, spartan, general, xenophanes, conveys, a, vivid, sense, of, the, difficulties, he, faced, in, his, childhood, .]
    Lemmatized tokens: [Sam, Goodman, 's, biography, of, the, Spartan, general, Xenophanes, convey, a, vivid, sense, of, the, difficulty, he, face, in, he, childhood, .]
    POS tags: [NNP, NNP, POS, NN, IN, DT, NNP, NNP, NNP, VBZ, DT, JJ, NN, IN, DT, NNS, PRP, VBD, IN, PRP$, NN, .]
    NER tags: [PERSON, PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [compound->0, case->2], [], [nmod:poss->1, nmod:of->8], [], [], [], [], [case->4, det->5, compound->6, compound->7], [nsubj->3, punct->21, dobj->12], [], [], [nmod:of->15, det->10, amod->11], [], [], [acl:relcl->17, case->13, det->14], [], [nsubj->16, nmod:in->20], [], [], [case->18, nmod:poss->19], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who faced difficulties {
    Tokens: [who, faced, difficulties]
    Lemmatized tokens: [who, face, difficulty]
    POS tags: [WP, VBD, NNS]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Sam Goodman's biography of the Spartan general Xenophanes conveys a vivid sense of the difficulties he faced in his research. {
    Tokens: [sam, goodman, 's, biography, of, the, spartan, general, xenophanes, conveys, a, vivid, sense, of, the, difficulties, he, faced, in, his, research, .]
    Lemmatized tokens: [Sam, Goodman, 's, biography, of, the, Spartan, general, Xenophanes, convey, a, vivid, sense, of, the, difficulty, he, face, in, he, research, .]
    POS tags: [NNP, NNP, POS, NN, IN, DT, NNP, NNP, NNP, VBZ, DT, JJ, NN, IN, DT, NNS, PRP, VBD, IN, PRP$, NN, .]
    NER tags: [PERSON, PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [compound->0, case->2], [], [nmod:poss->1, nmod:of->8], [], [], [], [], [case->4, det->5, compound->6, compound->7], [nsubj->3, punct->21, dobj->12], [], [], [nmod:of->15, det->10, amod->11], [], [], [acl:relcl->17, case->13, det->14], [], [nsubj->16, nmod:in->20], [], [], [case->18, nmod:poss->19], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who faced difficulties {
    Tokens: [who, faced, difficulties]
    Lemmatized tokens: [who, face, difficulty]
    POS tags: [WP, VBD, NNS]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Emma's mother had died long ago, and her place had been [taken/managed] by an excellent woman as governess. {
    Tokens: [emma, 's, mother, had, died, long, ago, ,, and, her, place, had, been, -lsb-, taken/managed, -rsb-, by, an, excellent, woman, as, governess, .]
    Lemmatized tokens: [Emma, 's, mother, have, die, long, ago, ,, and, she, place, have, be, -lsb-, taken/managed, -rsb-, by, a, excellent, woman, as, governess, .]
    POS tags: [NNP, POS, NN, VBD-AUX, VBN, RB, RB, ,, CC, PRP$, NN, VBD-AUX, VBD-AUX, -LRB-, VBN, -RRB-, IN, DT, JJ, NN, IN, NN, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[case->1], [], [nmod:poss->0], [], [nsubj->2, aux->3, advmod->6, punct->22, punct->7, cc->8, conj:and->14], [], [advmod->5], [], [], [], [nmod:poss->9], [], [], [], [punct->15, nmod:by->19, nmod:as->21, nsubj->10, aux->11, cop->12, punct->13], [], [], [], [], [case->16, det->17, amod->18], [], [case->20], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B dies, person B’s place might be taken. {
    Tokens: [if, person, b, dies, ,, person, b, 's, place, might, be, taken, .]
    Lemmatized tokens: [if, person, b, die, ,, person, b, 's, place, might, be, take, .]
    POS tags: [IN, NN, NN, VBZ, ,, NN, NN, POS, NN, VBD-AUX, VBD-AUX, VBN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2], [], [], [compound->5, case->7], [], [nmod:poss->6], [], [], [advcl->3, punct->4, nsubjpass->8, aux->9, auxpass->10, punct->12], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whose place had been [taken/managed] {
    Tokens: [whose, place, had, been, -lsb-, taken/managed, -rsb-]
    Lemmatized tokens: [whose, place, have, be, -lsb-, taken/managed, -rsb-]
    POS tags: [WP$, NN, VBD-AUX, VBD-AUX, -LRB-, VBN, -RRB-]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [nmod:poss->0], [], [], [], [nsubjpass->1, aux->2, auxpass->3, advmod->4, punct->6], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Emma's mother had died long ago, and her education had been [taken/managed] by an excellent woman as governess. {
    Tokens: [emma, 's, mother, had, died, long, ago, ,, and, her, education, had, been, -lsb-, taken/managed, -rsb-, by, an, excellent, woman, as, governess, .]
    Lemmatized tokens: [Emma, 's, mother, have, die, long, ago, ,, and, she, education, have, be, -lsb-, taken/managed, -rsb-, by, a, excellent, woman, as, governess, .]
    POS tags: [NNP, POS, NN, VBD-AUX, VBN, RB, RB, ,, CC, PRP$, NN, VBD-AUX, VBD-AUX, -LRB-, VBN, -RRB-, IN, DT, JJ, NN, IN, NN, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[case->1], [], [nmod:poss->0], [], [nsubj->2, aux->3, advmod->6, punct->22, punct->7, cc->8, conj:and->14], [], [advmod->5], [], [], [], [nmod:poss->9], [], [], [], [punct->15, nmod:by->19, nmod:as->21, nsubj->10, aux->11, cop->12, punct->13], [], [], [], [], [case->16, det->17, amod->18], [], [case->20], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B dies, person B’s place might be taken. {
    Tokens: [if, person, b, dies, ,, person, b, 's, place, might, be, taken, .]
    Lemmatized tokens: [if, person, b, die, ,, person, b, 's, place, might, be, take, .]
    POS tags: [IN, NN, NN, VBZ, ,, NN, NN, POS, NN, VBD-AUX, VBD-AUX, VBN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2], [], [], [compound->5, case->7], [], [nmod:poss->6], [], [], [advcl->3, punct->4, nsubjpass->8, aux->9, auxpass->10, punct->12], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whose education had been [taken/managed] {
    Tokens: [whose, education, had, been, -lsb-, taken/managed, -rsb-]
    Lemmatized tokens: [whose, education, have, be, -lsb-, taken/managed, -rsb-]
    POS tags: [WP$, NN, VBD-AUX, VBD-AUX, -LRB-, VBN, -RRB-]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [nmod:poss->0], [], [], [], [nsubjpass->1, aux->2, auxpass->3, advmod->4, punct->6], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Jane knocked on Susan's door but she did not answer. {
    Tokens: [jane, knocked, on, susan, 's, door, but, she, did, not, answer, .]
    Lemmatized tokens: [Jane, knock, on, Susan, 's, door, but, she, do, not, answer, .]
    POS tags: [NNP, VBD, IN, NNP, POS, NN, CC, PRP, VBD-AUX, RB, VB, .]
    NER tags: [PERSON, O, O, PERSON, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:on->5, cc->6, conj:but->10, punct->11], [], [case->4], [], [case->2, nmod:poss->3], [], [], [], [], [nsubj->7, aux->8, neg->9], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B knocks on person C’s door, person B might not get an answer and person C might not answer. {
    Tokens: [if, person, b, knocks, on, person, c, 's, door, ,, person, b, might, not, get, an, answer, and, person, c, might, not, answer, .]
    Lemmatized tokens: [if, person, b, knock, on, person, c, 's, door, ,, person, b, might, not, get, a, answer, and, person, c, might, not, answer, .]
    POS tags: [IN, NN, NN, VBZ, IN, NN, NN, POS, NN, ,, NN, NN, VBD-AUX, RB, VB, DT, NN, CC, NN, NN, VBD-AUX, RB, VB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, nmod:on->8], [], [], [compound->5, case->7], [], [case->4, nmod:poss->6], [], [], [compound->10], [], [], [advcl->3, ccomp->22, punct->23, punct->9, nsubj->11, aux->12, neg->13], [], [cc->17, conj:and->18], [], [], [det->15, compound->16, compound->18], [], [], [nsubj->19, aux->20, neg->21], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who did not answer {
    Tokens: [who, did, not, answer]
    Lemmatized tokens: [who, do, not, answer]
    POS tags: [WP, VBD-AUX, RB, VB]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, aux->1, neg->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Jane knocked on Susan's door but she did not get an answer. {
    Tokens: [jane, knocked, on, susan, 's, door, but, she, did, not, get, an, answer, .]
    Lemmatized tokens: [Jane, knock, on, Susan, 's, door, but, she, do, not, get, a, answer, .]
    POS tags: [NNP, VBD, IN, NNP, POS, NN, CC, PRP, VBD-AUX, RB, VB, DT, NN, .]
    NER tags: [PERSON, O, O, PERSON, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:on->5, cc->6, conj:but->10, punct->13], [], [case->4], [], [case->2, nmod:poss->3], [], [], [], [], [nsubj->7, aux->8, neg->9, dobj->12], [], [det->11], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B knocks on person C’s door, person B might not get an answer and person C might not answer. {
    Tokens: [if, person, b, knocks, on, person, c, 's, door, ,, person, b, might, not, get, an, answer, and, person, c, might, not, answer, .]
    Lemmatized tokens: [if, person, b, knock, on, person, c, 's, door, ,, person, b, might, not, get, a, answer, and, person, c, might, not, answer, .]
    POS tags: [IN, NN, NN, VBZ, IN, NN, NN, POS, NN, ,, NN, NN, VBD-AUX, RB, VB, DT, NN, CC, NN, NN, VBD-AUX, RB, VB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, nmod:on->8], [], [], [compound->5, case->7], [], [case->4, nmod:poss->6], [], [], [compound->10], [], [], [advcl->3, ccomp->22, punct->23, punct->9, nsubj->11, aux->12, neg->13], [], [cc->17, conj:and->18], [], [], [det->15, compound->16, compound->18], [], [], [nsubj->19, aux->20, neg->21], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who did not get an answer {
    Tokens: [who, did, not, get, an, answer]
    Lemmatized tokens: [who, do, not, get, a, answer]
    POS tags: [WP, VBD-AUX, RB, VB, DT, NN]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, aux->1, neg->2, dobj->5], [], [det->4]]
  }



  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Joe paid the detective after he received the final report on the case. {
    Tokens: [joe, paid, the, detective, after, he, received, the, final, report, on, the, case, .]
    Lemmatized tokens: [Joe, pay, the, detective, after, he, receive, the, final, report, on, the, case, .]
    POS tags: [NNP, VBD, DT, NN, IN, PRP, VBD, DT, JJ, NN, IN, DT, NN, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, advcl->6, punct->13], [], [det->2], [], [], [mark->4, nsubj->5, dobj->9, nmod:on->12], [], [], [det->7, amod->8], [], [], [case->10, det->11], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is a detective, person B might delivers report and somebody might receive report from person B. {
    Tokens: [if, person, b, is, a, detective, ,, person, b, might, delivers, report, and, somebody, might, receive, report, from, person, b.]
    Lemmatized tokens: [if, person, b, be, a, detective, ,, person, b, might, deliver, report, and, somebody, might, receive, report, from, person, B.]
    POS tags: [IN, NN, NN, VBD-AUX, DT, NN, ,, NN, NN, VBD-AUX, VBZ, NN, CC, NN, VBD-AUX, VB, NN, IN, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubj->2, cop->3, det->4], [], [], [compound->7], [], [advcl->5, punct->6, nsubj->8, aux->9, dobj->11, dobj->13], [cc->12, conj:and->13], [], [], [], [dobj->16, nmod:from->18, nsubj->19, dep->10, aux->14], [], [], [case->17], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who received the final report {
    Tokens: [who, received, the, final, report]
    Lemmatized tokens: [who, receive, the, final, report]
    POS tags: [WP, VBD, DT, JJ, NN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->4], [], [], [det->2, amod->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Joe paid the detective after he delivered the final report on the case. {
    Tokens: [joe, paid, the, detective, after, he, delivered, the, final, report, on, the, case, .]
    Lemmatized tokens: [Joe, pay, the, detective, after, he, deliver, the, final, report, on, the, case, .]
    POS tags: [NNP, VBD, DT, NN, IN, PRP, VBD, DT, JJ, NN, IN, DT, NN, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, advcl->6, punct->13], [], [det->2], [], [], [mark->4, nsubj->5, dobj->9, nmod:on->12], [], [], [det->7, amod->8], [], [], [case->10, det->11], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is a detective, person B might delivers report and somebody might receive report from person B. {
    Tokens: [if, person, b, is, a, detective, ,, person, b, might, delivers, report, and, somebody, might, receive, report, from, person, b.]
    Lemmatized tokens: [if, person, b, be, a, detective, ,, person, b, might, deliver, report, and, somebody, might, receive, report, from, person, B.]
    POS tags: [IN, NN, NN, VBD-AUX, DT, NN, ,, NN, NN, VBD-AUX, VBZ, NN, CC, NN, VBD-AUX, VB, NN, IN, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubj->2, cop->3, det->4], [], [], [compound->7], [], [advcl->5, punct->6, nsubj->8, aux->9, dobj->11, dobj->13], [cc->12, conj:and->13], [], [], [], [dobj->16, nmod:from->18, nsubj->19, dep->10, aux->14], [], [], [case->17], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who delivered the final report {
    Tokens: [who, delivered, the, final, report]
    Lemmatized tokens: [who, deliver, the, final, report]
    POS tags: [WP, VBD, DT, JJ, NN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->4], [], [], [det->2, amod->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Beth didn't get angry with Sally, who had cut her off, because she stopped and counted to ten. {
    Tokens: [beth, did, n't, get, angry, with, sally, ,, who, had, cut, her, off, ,, because, she, stopped, and, counted, to, ten, .]
    Lemmatized tokens: [Beth, do, not, get, angry, with, Sally, ,, who, have, cut, she, off, ,, because, she, stop, and, count, to, ten, .]
    POS tags: [NNP, VBD-AUX, RB, VB, JJ, IN, NNP, ,, WP, VBD-AUX, VBN, PRP$, RP, ,, IN, PRP, VBD, CC, VBD, TO, CD, .]
    NER tags: [PERSON, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, NUMBER, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 10.0, null]
    Dependency children: [[], [], [], [nsubj->0, advcl->16, aux->1, neg->2, advcl->18, xcomp->4, punct->21], [nmod:with->6], [], [case->5, punct->7, acl:relcl->10, punct->13], [], [], [], [nsubj->8, aux->9, dobj->11, compound:prt->12], [], [], [], [], [], [nsubj->15, cc->17, conj:and->18, nmod:to->20, mark->14], [], [nsubj->15], [], [case->19], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B doesn’t get angry with person C, person C might apologize or person B might calm down {
    Tokens: [if, person, b, does, n't, get, angry, with, person, c, ,, person, c, might, apologize, or, person, b, might, calm, down]
    Lemmatized tokens: [if, person, b, do, not, get, angry, with, person, c, ,, person, c, might, apologize, or, person, b, might, calm, down]
    POS tags: [IN, NN, NN, VBD-AUX, RB, VB, JJ, IN, NN, NN, ,, NN, NN, VBD-AUX, VB, CC, NN, NN, VBD-AUX, VB, RP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubj->2, aux->3, neg->4, xcomp->6, nmod:with->9], [], [], [], [case->7, compound->8], [], [], [compound->11], [], [cc->15, conj:or->19, advcl->5, punct->10, nsubj->12, aux->13], [], [], [compound->16], [], [nsubj->17, aux->18, compound:prt->20], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B counts to ten, person B might calm down. {
    Tokens: [if, person, b, counts, to, ten, ,, person, b, might, calm, down, .]
    Lemmatized tokens: [if, person, b, count, to, ten, ,, person, b, might, calm, down, .]
    POS tags: [IN, NN, NN, VBZ, TO, CD, ,, NN, NN, VBD-AUX, VB, RP, .]
    NER tags: [O, O, O, O, O, NUMBER, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, 10.0, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, nmod:to->5], [], [case->4], [], [], [compound->7], [], [advcl->3, punct->6, nsubj->8, aux->9, compound:prt->11, punct->12], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who counted to ten {
    Tokens: [who, counted, to, ten]
    Lemmatized tokens: [who, count, to, ten]
    POS tags: [WP, VBD, TO, CD]
    NER tags: [O, O, O, NUMBER]
    NER values: [null, null, null, 10.0]
    Dependency children: [[], [nsubj->0, nmod:to->3], [], [case->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Beth didn't get angry with Sally, who had cut her off, because she stopped and apologized. {
    Tokens: [beth, did, n't, get, angry, with, sally, ,, who, had, cut, her, off, ,, because, she, stopped, and, apologized, .]
    Lemmatized tokens: [Beth, do, not, get, angry, with, Sally, ,, who, have, cut, she, off, ,, because, she, stop, and, apologize, .]
    POS tags: [NNP, VBD-AUX, RB, VB, JJ, IN, NNP, ,, WP, VBD-AUX, VBN, PRP$, RP, ,, IN, PRP, VBD, CC, VBD, .]
    NER tags: [PERSON, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, advcl->16, aux->1, neg->2, advcl->18, punct->19, xcomp->4], [nmod:with->6], [], [case->5, punct->7, acl:relcl->10, punct->13], [], [], [], [nsubj->8, aux->9, dobj->11, compound:prt->12], [], [], [], [], [], [nsubj->15, cc->17, conj:and->18, mark->14], [], [nsubj->15], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B doesn’t get angry with person C, person C might apologize or person B might calm down {
    Tokens: [if, person, b, does, n't, get, angry, with, person, c, ,, person, c, might, apologize, or, person, b, might, calm, down]
    Lemmatized tokens: [if, person, b, do, not, get, angry, with, person, c, ,, person, c, might, apologize, or, person, b, might, calm, down]
    POS tags: [IN, NN, NN, VBD-AUX, RB, VB, JJ, IN, NN, NN, ,, NN, NN, VBD-AUX, VB, CC, NN, NN, VBD-AUX, VB, RP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubj->2, aux->3, neg->4, xcomp->6, nmod:with->9], [], [], [], [case->7, compound->8], [], [], [compound->11], [], [cc->15, conj:or->19, advcl->5, punct->10, nsubj->12, aux->13], [], [], [compound->16], [], [nsubj->17, aux->18, compound:prt->20], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B counts to ten, person B might calm down. {
    Tokens: [if, person, b, counts, to, ten, ,, person, b, might, calm, down, .]
    Lemmatized tokens: [if, person, b, count, to, ten, ,, person, b, might, calm, down, .]
    POS tags: [IN, NN, NN, VBZ, TO, CD, ,, NN, NN, VBD-AUX, VB, RP, .]
    NER tags: [O, O, O, O, O, NUMBER, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, 10.0, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, nmod:to->5], [], [case->4], [], [], [compound->7], [], [advcl->3, punct->6, nsubj->8, aux->9, compound:prt->11, punct->12], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who apologized {
    Tokens: [who, apologized]
    Lemmatized tokens: [who, apologize]
    POS tags: [WP, VBD]
    NER tags: [O, O]
    NER values: [null, null]
    Dependency children: [[], [nsubj->0]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Jim signaled the barman and gestured toward his empty glass. {
    Tokens: [jim, signaled, the, barman, and, gestured, toward, his, empty, glass, .]
    Lemmatized tokens: [Jim, signal, the, barman, and, gesture, toward, he, empty, glass, .]
    POS tags: [NNP, VBD, DT, NN, CC, VBD, IN, PRP$, JJ, NN, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, cc->4, conj:and->5, punct->10], [], [det->2], [], [nsubj->0, nmod:toward->9], [], [], [], [case->6, nmod:poss->7, amod->8], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B signals waiters, person B might be a customer {
    Tokens: [if, person, b, signals, waiters, ,, person, b, might, be, a, customer]
    Lemmatized tokens: [if, person, b, signal, waiter, ,, person, b, might, be, a, customer]
    POS tags: [IN, NN, NN, NNS, NNS, ,, NN, NN, VBD-AUX, VBD-AUX, DT, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [case->0, compound->1, compound->2, compound->3], [], [], [compound->6], [], [], [], [nmod:if->4, punct->5, nsubj->7, aux->8, cop->9, det->10]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Barman is a waiter {
    Tokens: [barman, is, a, waiter]
    Lemmatized tokens: [barman, be, a, waiter]
    POS tags: [NN, VBD-AUX, DT, NN]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, det->2]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is a customer, person B might has an empty glass {
    Tokens: [if, person, b, is, a, customer, ,, person, b, might, has, an, empty, glass]
    Lemmatized tokens: [if, person, b, be, a, customer, ,, person, b, might, have, a, empty, glass]
    POS tags: [IN, NN, NN, VBD-AUX, DT, NN, ,, NN, NN, VBD-AUX, VBD-AUX, DT, JJ, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubj->2, cop->3, det->4], [], [], [compound->7], [], [advcl->5, punct->6, nsubj->8, aux->9, dobj->13], [], [], [det->11, amod->12]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is a waiter, person B might has a bathroom key. {
    Tokens: [if, person, b, is, a, waiter, ,, person, b, might, has, a, bathroom, key, .]
    Lemmatized tokens: [if, person, b, be, a, waiter, ,, person, b, might, have, a, bathroom, key, .]
    POS tags: [IN, NN, NN, VBD-AUX, DT, NN, ,, NN, NN, VBD-AUX, VBD-AUX, DT, NN, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubj->2, cop->3, det->4], [], [], [compound->7], [], [advcl->5, punct->6, nsubj->8, aux->9, dobj->13, punct->14], [], [], [det->11, compound->12], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whose empty glass {
    Tokens: [whose, empty, glass]
    Lemmatized tokens: [whose, empty, glass]
    POS tags: [WP$, JJ, NN]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [nmod:poss->0], [dep->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Jim signaled the barman and gestured toward his bathroom key. {
    Tokens: [jim, signaled, the, barman, and, gestured, toward, his, bathroom, key, .]
    Lemmatized tokens: [Jim, signal, the, barman, and, gesture, toward, he, bathroom, key, .]
    POS tags: [NNP, VBD, DT, NN, CC, VBD, IN, PRP$, NN, NN, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, cc->4, conj:and->5, punct->10], [], [det->2], [], [nsubj->0, nmod:toward->9], [], [], [], [case->6, nmod:poss->7, compound->8], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B signals waiters, person B might be a customer {
    Tokens: [if, person, b, signals, waiters, ,, person, b, might, be, a, customer]
    Lemmatized tokens: [if, person, b, signal, waiter, ,, person, b, might, be, a, customer]
    POS tags: [IN, NN, NN, NNS, NNS, ,, NN, NN, VBD-AUX, VBD-AUX, DT, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [case->0, compound->1, compound->2, compound->3], [], [], [compound->6], [], [], [], [nmod:if->4, punct->5, nsubj->7, aux->8, cop->9, det->10]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Barman is a waiter {
    Tokens: [barman, is, a, waiter]
    Lemmatized tokens: [barman, be, a, waiter]
    POS tags: [NN, VBD-AUX, DT, NN]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, det->2]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is a customer, person B might has an empty glass {
    Tokens: [if, person, b, is, a, customer, ,, person, b, might, has, an, empty, glass]
    Lemmatized tokens: [if, person, b, be, a, customer, ,, person, b, might, have, a, empty, glass]
    POS tags: [IN, NN, NN, VBD-AUX, DT, NN, ,, NN, NN, VBD-AUX, VBD-AUX, DT, JJ, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubj->2, cop->3, det->4], [], [], [compound->7], [], [advcl->5, punct->6, nsubj->8, aux->9, dobj->13], [], [], [det->11, amod->12]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is a waiter, person B might has a bathroom key. {
    Tokens: [if, person, b, is, a, waiter, ,, person, b, might, has, a, bathroom, key, .]
    Lemmatized tokens: [if, person, b, be, a, waiter, ,, person, b, might, have, a, bathroom, key, .]
    POS tags: [IN, NN, NN, VBD-AUX, DT, NN, ,, NN, NN, VBD-AUX, VBD-AUX, DT, NN, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubj->2, cop->3, det->4], [], [], [compound->7], [], [advcl->5, punct->6, nsubj->8, aux->9, dobj->13, punct->14], [], [], [det->11, compound->12], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whose bathroom key {
    Tokens: [whose, bathroom, key]
    Lemmatized tokens: [whose, bathroom, key]
    POS tags: [WP$, NN, NN]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [nmod:poss->0], [dep->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Dan took the rear seat while Bill claimed the front because his "Dibs!" was quicker. {
    Tokens: [dan, took, the, rear, seat, while, bill, claimed, the, front, because, his, ``, dibs, !, '', was, quicker, .]
    Lemmatized tokens: [Dan, take, the, rear, seat, while, bill, claim, the, front, because, he, ``, dib, !, '', be, quicker, .]
    POS tags: [NNP, VBD, DT, JJ, NN, IN, NN, VBD, DT, NN, IN, PRP$, ``, NNS, ., '', VBD-AUX, JJR, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [punct->15, nsubj->0, dobj->4, advcl->7, punct->14], [], [], [det->2, amod->3], [], [], [mark->5, nsubj->6, dobj->9, nmod:because->11], [], [det->8], [], [case->10, punct->12, dep->13], [], [], [], [], [], [punct->18, cop->16], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B’s “Dibs!” is quicker, person B takes the front seat {
    Tokens: [if, person, b, 's, ``, dibs, !, '', is, quicker, ,, person, b, takes, the, front, seat]
    Lemmatized tokens: [if, person, b, 's, ``, dib, !, '', be, quicker, ,, person, b, take, the, front, seat]
    POS tags: [IN, NN, NN, POS, ``, NNS, ., '', VBD-AUX, JJR, ,, NN, NN, VBZ, DT, JJ, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [mark->0, dep->5, punct->6, punct->7], [case->3], [], [], [nmod:poss->2, punct->4], [], [], [], [cop->8], [], [], [compound->11], [punct->10, nsubj->12, dobj->16, ccomp->9], [], [], [det->14, amod->15]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B’s “Dibs!” is slow, person B take the rear seat {
    Tokens: [if, person, b, 's, ``, dibs, !, '', is, slow, ,, person, b, take, the, rear, seat]
    Lemmatized tokens: [if, person, b, 's, ``, dib, !, '', be, slow, ,, person, b, take, the, rear, seat]
    POS tags: [IN, NN, NN, POS, ``, NNS, ., '', VBD-AUX, JJ, ,, NN, NN, VBP, DT, JJ, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [mark->0, dep->5, punct->6, punct->7], [case->3], [], [], [nmod:poss->2, punct->4], [], [], [], [cop->8], [], [], [compound->11], [punct->10, nsubj->12, dobj->16, ccomp->9], [], [], [det->14, amod->15]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B claims the front seat, person B takes the front seat. {
    Tokens: [if, person, b, claims, the, front, seat, ,, person, b, takes, the, front, seat, .]
    Lemmatized tokens: [if, person, b, claim, the, front, seat, ,, person, b, take, the, front, seat, .]
    POS tags: [IN, NN, NN, VBZ, DT, JJ, NN, ,, NN, NN, VBZ, DT, JJ, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->6], [], [], [det->4, amod->5], [], [], [compound->8], [advcl->3, punct->7, nsubj->9, dobj->13, punct->14], [], [], [det->11, amod->12], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whose "Dibs" was quicker {
    Tokens: [whose, ``, dibs, '', was, quicker]
    Lemmatized tokens: [whose, ``, dib, '', be, quicker]
    POS tags: [WP$, ``, NNS, '', VBD-AUX, JJR]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [], [nmod:poss->0, punct->1, punct->3], [], [], [nsubj->2, cop->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Dan took the rear seat while Bill claimed the front because his "Dibs!" was slow. {
    Tokens: [dan, took, the, rear, seat, while, bill, claimed, the, front, because, his, ``, dibs, !, '', was, slow, .]
    Lemmatized tokens: [Dan, take, the, rear, seat, while, bill, claim, the, front, because, he, ``, dib, !, '', be, slow, .]
    POS tags: [NNP, VBD, DT, JJ, NN, IN, NN, VBD, DT, NN, IN, PRP$, ``, NNS, ., '', VBD-AUX, JJ, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [punct->15, nsubj->0, dobj->4, advcl->7, punct->14], [], [], [det->2, amod->3], [], [], [mark->5, nsubj->6, dobj->9, nmod:because->11], [], [det->8], [], [case->10, punct->12, dep->13], [], [], [], [], [], [punct->18, cop->16], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B’s “Dibs!” is quicker, person B takes the front seat {
    Tokens: [if, person, b, 's, ``, dibs, !, '', is, quicker, ,, person, b, takes, the, front, seat]
    Lemmatized tokens: [if, person, b, 's, ``, dib, !, '', be, quicker, ,, person, b, take, the, front, seat]
    POS tags: [IN, NN, NN, POS, ``, NNS, ., '', VBD-AUX, JJR, ,, NN, NN, VBZ, DT, JJ, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [mark->0, dep->5, punct->6, punct->7], [case->3], [], [], [nmod:poss->2, punct->4], [], [], [], [cop->8], [], [], [compound->11], [punct->10, nsubj->12, dobj->16, ccomp->9], [], [], [det->14, amod->15]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B’s “Dibs!” is slow, person B take the rear seat {
    Tokens: [if, person, b, 's, ``, dibs, !, '', is, slow, ,, person, b, take, the, rear, seat]
    Lemmatized tokens: [if, person, b, 's, ``, dib, !, '', be, slow, ,, person, b, take, the, rear, seat]
    POS tags: [IN, NN, NN, POS, ``, NNS, ., '', VBD-AUX, JJ, ,, NN, NN, VBP, DT, JJ, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [mark->0, dep->5, punct->6, punct->7], [case->3], [], [], [nmod:poss->2, punct->4], [], [], [], [cop->8], [], [], [compound->11], [punct->10, nsubj->12, dobj->16, ccomp->9], [], [], [det->14, amod->15]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B claims the front seat, person B takes the front seat. {
    Tokens: [if, person, b, claims, the, front, seat, ,, person, b, takes, the, front, seat, .]
    Lemmatized tokens: [if, person, b, claim, the, front, seat, ,, person, b, take, the, front, seat, .]
    POS tags: [IN, NN, NN, VBZ, DT, JJ, NN, ,, NN, NN, VBZ, DT, JJ, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->6], [], [], [det->4, amod->5], [], [], [compound->8], [advcl->3, punct->7, nsubj->9, dobj->13, punct->14], [], [], [det->11, amod->12], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whose "Dibs" was slow {
    Tokens: [whose, ``, dibs, '', was, slow]
    Lemmatized tokens: [whose, ``, dib, '', be, slow]
    POS tags: [WP$, ``, NNS, '', VBD-AUX, JJ]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [], [nmod:poss->0, punct->1, punct->3], [], [], [nsubj->2, cop->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Tom said "Check" to Ralph as he took his bishop. {
    Tokens: [tom, said, ``, check, '', to, ralph, as, he, took, his, bishop, .]
    Lemmatized tokens: [Tom, say, ``, check, '', to, Ralph, as, he, take, he, bishop, .]
    POS tags: [NNP, VBD, ``, VB, '', TO, NNP, IN, PRP, VBD, PRP$, NN, .]
    NER tags: [PERSON, O, O, O, O, O, PERSON, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, advcl->9, punct->12], [], [punct->2, punct->4, nmod:to->6], [], [], [case->5], [], [], [mark->7, nsubj->8, dobj->11], [], [nmod:poss->10], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If  person B has a bishop, person B might say “Check” to somebody {
    Tokens: [if, person, b, has, a, bishop, ,, person, b, might, say, ``, check, '', to, somebody]
    Lemmatized tokens: [if, person, b, have, a, bishop, ,, person, b, might, say, ``, check, '', to, somebody]
    POS tags: [IN, NN, NN, VBD-AUX, DT, NN, ,, NN, NN, VBD-AUX, VB, ``, VB, '', TO, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5], [], [det->4], [], [], [compound->7], [], [advcl->3, punct->6, nsubj->8, aux->9, dobj->12], [], [nmod:to->15, punct->11, punct->13], [], [], [case->14]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B has a bishop, person B might moves the bishop or somebody might take the bishop. {
    Tokens: [if, person, b, has, a, bishop, ,, person, b, might, moves, the, bishop, or, somebody, might, take, the, bishop, .]
    Lemmatized tokens: [if, person, b, have, a, bishop, ,, person, b, might, move, the, bishop, or, somebody, might, take, the, bishop, .]
    POS tags: [IN, NN, NN, VBD-AUX, DT, NN, ,, NN, NN, VBD-AUX, VBZ, DT, NN, CC, NN, VBD-AUX, VB, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5], [], [det->4], [], [], [compound->7], [], [ccomp->16, advcl->3, punct->19, punct->6, nsubj->8, aux->9], [], [det->11, cc->13, conj:or->14], [], [], [], [aux->15, dobj->18, nsubj->12, nsubj->14], [], [det->17], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whose bishop did Tom take {
    Tokens: [whose, bishop, did, tom, take]
    Lemmatized tokens: [whose, bishop, do, Tom, take]
    POS tags: [WP$, NN, VBD-AUX, NNP, VB]
    NER tags: [O, O, O, PERSON, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nmod:poss->0], [], [], [dobj->1, aux->2, nsubj->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Tom said "Check" to Ralph as he moved his bishop. {
    Tokens: [tom, said, ``, check, '', to, ralph, as, he, moved, his, bishop, .]
    Lemmatized tokens: [Tom, say, ``, check, '', to, Ralph, as, he, move, he, bishop, .]
    POS tags: [NNP, VBD, ``, VB, '', TO, NNP, IN, PRP, VBD, PRP$, NN, .]
    NER tags: [PERSON, O, O, O, O, O, PERSON, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, advcl->9, punct->12], [], [punct->2, punct->4, nmod:to->6], [], [], [case->5], [], [], [mark->7, nsubj->8, dobj->11], [], [nmod:poss->10], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If  person B has a bishop, person B might say “Check” to somebody {
    Tokens: [if, person, b, has, a, bishop, ,, person, b, might, say, ``, check, '', to, somebody]
    Lemmatized tokens: [if, person, b, have, a, bishop, ,, person, b, might, say, ``, check, '', to, somebody]
    POS tags: [IN, NN, NN, VBD-AUX, DT, NN, ,, NN, NN, VBD-AUX, VB, ``, VB, '', TO, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5], [], [det->4], [], [], [compound->7], [], [advcl->3, punct->6, nsubj->8, aux->9, dobj->12], [], [nmod:to->15, punct->11, punct->13], [], [], [case->14]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B has a bishop, person B might moves the bishop or somebody might take the bishop. {
    Tokens: [if, person, b, has, a, bishop, ,, person, b, might, moves, the, bishop, or, somebody, might, take, the, bishop, .]
    Lemmatized tokens: [if, person, b, have, a, bishop, ,, person, b, might, move, the, bishop, or, somebody, might, take, the, bishop, .]
    POS tags: [IN, NN, NN, VBD-AUX, DT, NN, ,, NN, NN, VBD-AUX, VBZ, DT, NN, CC, NN, VBD-AUX, VB, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5], [], [det->4], [], [], [compound->7], [], [ccomp->16, advcl->3, punct->19, punct->6, nsubj->8, aux->9], [], [det->11, cc->13, conj:or->14], [], [], [], [aux->15, dobj->18, nsubj->12, nsubj->14], [], [det->17], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whose bishop did Tom move {
    Tokens: [whose, bishop, did, tom, move]
    Lemmatized tokens: [whose, bishop, do, Tom, move]
    POS tags: [WP$, NN, VBD-AUX, NNP, VB]
    NER tags: [O, O, O, PERSON, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nmod:poss->0], [], [], [dobj->1, aux->2, nsubj->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: As Andrea in the crop duster passed over Susan, she could see the landing strip. {
    Tokens: [as, andrea, in, the, crop, duster, passed, over, susan, ,, she, could, see, the, landing, strip, .]
    Lemmatized tokens: [as, Andrea, in, the, crop, duster, pass, over, Susan, ,, she, could, see, the, landing, strip, .]
    POS tags: [IN, NNP, IN, DT, NN, NN, VBD, RP, NNP, ,, PRP, VBD-AUX, VB, DT, NN, NN, .]
    NER tags: [O, PERSON, O, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nmod:in->5], [], [], [], [case->2, det->3, compound->4], [mark->0, nsubj->1, compound:prt->7, dobj->8], [], [], [], [], [], [dobj->15, punct->16, advcl->6, punct->9, nsubj->10, aux->11], [], [], [det->13, compound->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is in the airplane, person B could see the landing strip {
    Tokens: [if, person, b, is, in, the, airplane, ,, person, b, could, see, the, landing, strip]
    Lemmatized tokens: [if, person, b, be, in, the, airplane, ,, person, b, could, see, the, landing, strip]
    POS tags: [IN, NN, NN, VBD-AUX, IN, DT, NN, ,, NN, NN, VBD-AUX, VB, DT, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [], [mark->0, nsubj->2, cop->3, case->4, det->5], [], [], [compound->8], [], [advcl:in->6, punct->7, nsubj->9, aux->10, dobj->14], [], [], [det->12, compound->13]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If a airplane is passed over person B , person B could see the landing gear {
    Tokens: [if, a, airplane, is, passed, over, person, b, ,, person, b, could, see, the, landing, gear]
    Lemmatized tokens: [if, a, airplane, be, pass, over, person, b, ,, person, b, could, see, the, landing, gear]
    POS tags: [IN, DT, NN, VBD-AUX, VBN, RP, NN, NN, ,, NN, NN, VBD-AUX, VB, DT, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [det->1], [], [mark->0, nsubjpass->2, auxpass->3, compound:prt->5, dobj->7], [], [], [compound->6], [], [], [compound->9], [], [dobj->15, advcl->4, punct->8, nsubj->10, aux->11], [], [], [det->13, compound->14]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Crop duster is an airplane. {
    Tokens: [crop, duster, is, an, airplane, .]
    Lemmatized tokens: [crop, duster, be, a, airplane, .]
    POS tags: [NN, NN, VBD-AUX, DT, NN, .]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [compound->0], [], [], [nsubj->1, cop->2, det->3, punct->5], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who could see the landing strip {
    Tokens: [who, could, see, the, landing, strip]
    Lemmatized tokens: [who, could, see, the, landing, strip]
    POS tags: [WP, VBD-AUX, VB, DT, NN, NN]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, dobj->5], [], [], [det->3, compound->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: As Andrea in the crop duster passed over Susan, she could see the landing gear. {
    Tokens: [as, andrea, in, the, crop, duster, passed, over, susan, ,, she, could, see, the, landing, gear, .]
    Lemmatized tokens: [as, Andrea, in, the, crop, duster, pass, over, Susan, ,, she, could, see, the, landing, gear, .]
    POS tags: [IN, NNP, IN, DT, NN, NN, VBD, RP, NNP, ,, PRP, VBD-AUX, VB, DT, NN, NN, .]
    NER tags: [O, PERSON, O, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nmod:in->5], [], [], [], [case->2, det->3, compound->4], [mark->0, nsubj->1, compound:prt->7, dobj->8], [], [], [], [], [], [dobj->15, punct->16, advcl->6, punct->9, nsubj->10, aux->11], [], [], [det->13, compound->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is in the airplane, person B could see the landing strip {
    Tokens: [if, person, b, is, in, the, airplane, ,, person, b, could, see, the, landing, strip]
    Lemmatized tokens: [if, person, b, be, in, the, airplane, ,, person, b, could, see, the, landing, strip]
    POS tags: [IN, NN, NN, VBD-AUX, IN, DT, NN, ,, NN, NN, VBD-AUX, VB, DT, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [], [mark->0, nsubj->2, cop->3, case->4, det->5], [], [], [compound->8], [], [advcl:in->6, punct->7, nsubj->9, aux->10, dobj->14], [], [], [det->12, compound->13]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If a airplane is passed over person B , person B could see the landing gear {
    Tokens: [if, a, airplane, is, passed, over, person, b, ,, person, b, could, see, the, landing, gear]
    Lemmatized tokens: [if, a, airplane, be, pass, over, person, b, ,, person, b, could, see, the, landing, gear]
    POS tags: [IN, DT, NN, VBD-AUX, VBN, RP, NN, NN, ,, NN, NN, VBD-AUX, VB, DT, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [det->1], [], [mark->0, nsubjpass->2, auxpass->3, compound:prt->5, dobj->7], [], [], [compound->6], [], [], [compound->9], [], [dobj->15, advcl->4, punct->8, nsubj->10, aux->11], [], [], [det->13, compound->14]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Crop duster is an airplane. {
    Tokens: [crop, duster, is, an, airplane, .]
    Lemmatized tokens: [crop, duster, be, a, airplane, .]
    POS tags: [NN, NN, VBD-AUX, DT, NN, .]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [compound->0], [], [], [nsubj->1, cop->2, det->3, punct->5], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who could see the landing gear {
    Tokens: [who, could, see, the, landing, gear]
    Lemmatized tokens: [who, could, see, the, landing, gear]
    POS tags: [WP, VBD-AUX, VB, DT, NN, NN]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1, dobj->5], [], [], [det->3, compound->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Tom gave Ralph a lift to school so he wouldn't have to walk. {
    Tokens: [tom, gave, ralph, a, lift, to, school, so, he, would, n't, have, to, walk, .]
    Lemmatized tokens: [Tom, give, Ralph, a, lift, to, school, so, he, would, not, have, to, walk, .]
    POS tags: [NNP, VBD, NNP, DT, NN, TO, NN, IN, PRP, VBD-AUX, RB, VBD-AUX, TO, VB, .]
    NER tags: [PERSON, O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, iobj->2, dobj->4, punct->14], [], [], [det->3, nmod:to->6, acl:relcl->11], [], [case->5], [], [], [], [], [mark->7, nsubj->8, aux->9, neg->10, xcomp->13], [], [mark->12], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B gives person C a lift to someplace, person B is a driver and person C might not have to walk {
    Tokens: [if, person, b, gives, person, c, a, lift, to, someplace, ,, person, b, is, a, driver, and, person, c, might, not, have, to, walk]
    Lemmatized tokens: [if, person, b, give, person, c, a, lift, to, someplace, ,, person, b, be, a, driver, and, person, c, might, not, have, to, walk]
    POS tags: [IN, NN, NN, VBZ, NN, NN, DT, NN, TO, NN, ,, NN, NN, VBD-AUX, DT, NN, CC, NN, NN, VBD-AUX, RB, VBD-AUX, TO, VB]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, iobj->5, dobj->7], [], [compound->4], [], [det->6, nmod:to->9], [], [case->8], [], [], [compound->11], [], [], [cc->16, conj:and->17], [], [], [compound->15, compound->17, advcl->3, acl:relcl->21, punct->10, nsubj->12, cop->13, det->14], [], [], [aux->19, neg->20, xcomp->23], [], [mark->22]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is a driver, person B might not drive alone. {
    Tokens: [if, person, b, is, a, driver, ,, person, b, might, not, drive, alone, .]
    Lemmatized tokens: [if, person, b, be, a, driver, ,, person, b, might, not, drive, alone, .]
    POS tags: [IN, NN, NN, VBD-AUX, DT, NN, ,, NN, NN, VBD-AUX, RB, VB, RB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubj->2, cop->3, det->4], [], [], [compound->7], [], [], [advcl->5, punct->6, nsubj->8, aux->9, neg->10, advmod->12, punct->13], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who wouldn't have to walk {
    Tokens: [who, would, n't, have, to, walk]
    Lemmatized tokens: [who, would, not, have, to, walk]
    POS tags: [WP, VBD-AUX, RB, VBD-AUX, TO, VB]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, aux->1, neg->2, xcomp->5], [], [mark->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Tom gave Ralph a lift to school so he wouldn't have to drive alone. {
    Tokens: [tom, gave, ralph, a, lift, to, school, so, he, would, n't, have, to, drive, alone, .]
    Lemmatized tokens: [Tom, give, Ralph, a, lift, to, school, so, he, would, not, have, to, drive, alone, .]
    POS tags: [NNP, VBD, NNP, DT, NN, TO, NN, IN, PRP, VBD-AUX, RB, VBD-AUX, TO, VB, RB, .]
    NER tags: [PERSON, O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [punct->15, nsubj->0, iobj->2, dobj->4], [], [], [det->3, nmod:to->6, acl:relcl->11], [], [case->5], [], [], [], [], [mark->7, nsubj->8, aux->9, neg->10, xcomp->13], [], [mark->12, advmod->14], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B gives person C a lift to someplace, person B is a driver and person C might not have to walk {
    Tokens: [if, person, b, gives, person, c, a, lift, to, someplace, ,, person, b, is, a, driver, and, person, c, might, not, have, to, walk]
    Lemmatized tokens: [if, person, b, give, person, c, a, lift, to, someplace, ,, person, b, be, a, driver, and, person, c, might, not, have, to, walk]
    POS tags: [IN, NN, NN, VBZ, NN, NN, DT, NN, TO, NN, ,, NN, NN, VBD-AUX, DT, NN, CC, NN, NN, VBD-AUX, RB, VBD-AUX, TO, VB]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, iobj->5, dobj->7], [], [compound->4], [], [det->6, nmod:to->9], [], [case->8], [], [], [compound->11], [], [], [cc->16, conj:and->17], [], [], [compound->15, compound->17, advcl->3, acl:relcl->21, punct->10, nsubj->12, cop->13, det->14], [], [], [aux->19, neg->20, xcomp->23], [], [mark->22]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is a driver, person B might not drive alone. {
    Tokens: [if, person, b, is, a, driver, ,, person, b, might, not, drive, alone, .]
    Lemmatized tokens: [if, person, b, be, a, driver, ,, person, b, might, not, drive, alone, .]
    POS tags: [IN, NN, NN, VBD-AUX, DT, NN, ,, NN, NN, VBD-AUX, RB, VB, RB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubj->2, cop->3, det->4], [], [], [compound->7], [], [], [advcl->5, punct->6, nsubj->8, aux->9, neg->10, advmod->12, punct->13], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who wouldn't have to drive alone {
    Tokens: [who, would, n't, have, to, drive, alone]
    Lemmatized tokens: [who, would, not, have, to, drive, alone]
    POS tags: [WP, VBD-AUX, RB, VBD-AUX, TO, VB, RB]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, aux->1, neg->2, xcomp->5], [], [mark->4, advmod->6], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Bill passed the half-empty plate to John because he was full. {
    Tokens: [bill, passed, the, half, empty, plate, to, john, because, he, was, full, .]
    Lemmatized tokens: [bill, pass, the, half, empty, plate, to, John, because, he, be, full, .]
    POS tags: [NN, VBD, DT, NN, JJ, NN, TO, NNP, IN, PRP, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, PERSON, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->5, nmod:to->7, advcl->11, punct->12], [], [], [], [det->2, compound->3, amod->4], [], [case->6], [], [], [], [mark->8, nsubj->9, cop->10], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B pass a non-empty plate to person C, person B is full and person C is hungry {
    Tokens: [if, person, b, pass, a, non, empty, plate, to, person, c, ,, person, b, is, full, and, person, c, is, hungry]
    Lemmatized tokens: [if, person, b, pass, a, non, empty, plate, to, person, c, ,, person, b, be, full, and, person, c, be, hungry]
    POS tags: [IN, NN, NN, VBP, DT, JJ, JJ, NN, TO, NN, NN, ,, NN, NN, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, JJ]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->7, nmod:to->10], [], [], [], [det->4, amod->5, amod->6], [], [], [case->8, compound->9], [], [], [compound->12], [], [cc->16, conj:and->17], [], [], [amod->15, amod->17, advcl->3, acl:relcl->20, punct->11, nsubj->13, cop->14], [], [cop->19]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Half-empty plate is a non-empty plate. {
    Tokens: [half, empty, plate, is, a, non, empty, plate, .]
    Lemmatized tokens: [half, empty, plate, be, a, non, empty, plate, .]
    POS tags: [DT, JJ, NN, VBD-AUX, DT, JJ, JJ, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nummod->0, amod->1], [], [], [], [], [nsubj->2, cop->3, det->4, amod->5, amod->6, punct->8], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was full {
    Tokens: [who, was, full]
    Lemmatized tokens: [who, be, full]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Bill passed the half-empty plate to John because he was hungry. {
    Tokens: [bill, passed, the, half, empty, plate, to, john, because, he, was, hungry, .]
    Lemmatized tokens: [bill, pass, the, half, empty, plate, to, John, because, he, be, hungry, .]
    POS tags: [NN, VBD, DT, NN, JJ, NN, TO, NNP, IN, PRP, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, PERSON, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->5, nmod:to->7, advcl->11, punct->12], [], [], [], [det->2, compound->3, amod->4], [], [case->6], [], [], [], [mark->8, nsubj->9, cop->10], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B pass a non-empty plate to person C, person B is full and person C is hungry {
    Tokens: [if, person, b, pass, a, non, empty, plate, to, person, c, ,, person, b, is, full, and, person, c, is, hungry]
    Lemmatized tokens: [if, person, b, pass, a, non, empty, plate, to, person, c, ,, person, b, be, full, and, person, c, be, hungry]
    POS tags: [IN, NN, NN, VBP, DT, JJ, JJ, NN, TO, NN, NN, ,, NN, NN, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, JJ]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->7, nmod:to->10], [], [], [], [det->4, amod->5, amod->6], [], [], [case->8, compound->9], [], [], [compound->12], [], [cc->16, conj:and->17], [], [], [amod->15, amod->17, advcl->3, acl:relcl->20, punct->11, nsubj->13, cop->14], [], [cop->19]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Half-empty plate is a non-empty plate. {
    Tokens: [half, empty, plate, is, a, non, empty, plate, .]
    Lemmatized tokens: [half, empty, plate, be, a, non, empty, plate, .]
    POS tags: [DT, JJ, NN, VBD-AUX, DT, JJ, JJ, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nummod->0, amod->1], [], [], [], [], [nsubj->2, cop->3, det->4, amod->5, amod->6, punct->8], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was hungry {
    Tokens: [who, was, hungry]
    Lemmatized tokens: [who, be, hungry]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Bill passed the gameboy to John because his turn was over. {
    Tokens: [bill, passed, the, gameboy, to, john, because, his, turn, was, over, .]
    Lemmatized tokens: [bill, pass, the, gameboy, to, John, because, he, turn, be, over, .]
    POS tags: [NN, VBD, DT, NN, TO, NNP, IN, PRP$, NN, VBD-AUX, RB, .]
    NER tags: [O, O, O, O, O, PERSON, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, nmod:to->5, advcl->9, punct->11], [], [det->2], [], [case->4], [], [], [nmod:poss->7], [mark->6, nsubj->8, advmod->10], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B passes gameboy to person C, person B’s turn is over and person C’s turn is next. {
    Tokens: [if, person, b, passes, gameboy, to, person, c, ,, person, b, 's, turn, is, over, and, person, c, 's, turn, is, next, .]
    Lemmatized tokens: [if, person, b, pass, gameboy, to, person, c, ,, person, b, 's, turn, be, over, and, person, c, 's, turn, be, next, .]
    POS tags: [IN, NN, NN, VBZ, NN, TO, NN, NN, ,, NN, NN, POS, NN, VBD-AUX, IN, CC, NN, NN, POS, NN, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->4, nmod:to->7], [], [], [], [case->5, compound->6], [], [], [compound->9, case->11], [], [nmod:poss->10], [], [cc->15, advcl->3, conj:and->21, punct->22, punct->8, nsubj->12, cop->13], [], [], [compound->16, case->18], [], [nmod:poss->17], [], [nsubj->19, cop->20], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whose turn was over {
    Tokens: [whose, turn, was, over]
    Lemmatized tokens: [whose, turn, be, over]
    POS tags: [WP$, NN, VBD-AUX, IN]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [nmod:poss->0], [], [nsubj->1, cop->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Bill passed the gameboy to John because his turn was next. {
    Tokens: [bill, passed, the, gameboy, to, john, because, his, turn, was, next, .]
    Lemmatized tokens: [bill, pass, the, gameboy, to, John, because, he, turn, be, next, .]
    POS tags: [NN, VBD, DT, NN, TO, NNP, IN, PRP$, NN, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, PERSON, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, nmod:to->5, advcl->10, punct->11], [], [det->2], [], [case->4], [], [], [nmod:poss->7], [], [mark->6, nsubj->8, cop->9], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B passes gameboy to person C, person B’s turn is over and person C’s turn is next. {
    Tokens: [if, person, b, passes, gameboy, to, person, c, ,, person, b, 's, turn, is, over, and, person, c, 's, turn, is, next, .]
    Lemmatized tokens: [if, person, b, pass, gameboy, to, person, c, ,, person, b, 's, turn, be, over, and, person, c, 's, turn, be, next, .]
    POS tags: [IN, NN, NN, VBZ, NN, TO, NN, NN, ,, NN, NN, POS, NN, VBD-AUX, IN, CC, NN, NN, POS, NN, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->4, nmod:to->7], [], [], [], [case->5, compound->6], [], [], [compound->9, case->11], [], [nmod:poss->10], [], [cc->15, advcl->3, conj:and->21, punct->22, punct->8, nsubj->12, cop->13], [], [], [compound->16, case->18], [], [nmod:poss->17], [], [nsubj->19, cop->20], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whose turn was next {
    Tokens: [whose, turn, was, next]
    Lemmatized tokens: [whose, turn, be, next]
    POS tags: [WP$, NN, VBD-AUX, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [nmod:poss->0], [], [nsubj->1, cop->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The man lifted the boy onto his bunk bed. {
    Tokens: [the, man, lifted, the, boy, onto, his, bunk, bed, .]
    Lemmatized tokens: [the, man, lift, the, boy, onto, he, bunk, bed, .]
    POS tags: [DT, NN, VBD, DT, NN, IN, PRP$, NN, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [nsubj->1, dobj->4, nmod:onto->8, punct->9], [], [det->3], [], [], [], [case->5, nmod:poss->6, compound->7], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B lift person C onto bed, the bed belongs to person C {
    Tokens: [if, person, b, lift, person, c, onto, bed, ,, the, bed, belongs, to, person, c]
    Lemmatized tokens: [if, person, b, lift, person, c, onto, bed, ,, the, bed, belong, to, person, c]
    POS tags: [IN, NN, NN, NN, NN, NN, IN, NN, ,, DT, NN, VBZ, TO, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [], [compound->1, compound->2, compound->3, compound->4, nmod:onto->7], [], [case->6, punct->8, appos->10], [], [], [det->9], [mark->0, nsubj->5, nmod:to->14], [], [], [case->12, compound->13]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B lift person C onto shoulders, shoulders belong to person B. {
    Tokens: [if, person, b, lift, person, c, onto, shoulders, ,, shoulders, belong, to, person, b.]
    Lemmatized tokens: [if, person, b, lift, person, c, onto, shoulder, ,, shoulder, belong, to, person, B.]
    POS tags: [IN, NN, NN, NN, NN, NN, IN, NNS, ,, NNS, VBP, TO, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [], [compound->1, compound->2, compound->3, compound->4, nmod:onto->7], [], [case->6, punct->8, appos->9], [], [], [mark->0, nsubj->5, nmod:to->13], [], [], [case->11, compound->12]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whose bunk bed {
    Tokens: [whose, bunk, bed]
    Lemmatized tokens: [whose, bunk, bed]
    POS tags: [WP$, NN, NN]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [nmod:poss->0], [dep->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The man lifted the boy onto his shoulders. {
    Tokens: [the, man, lifted, the, boy, onto, his, shoulders, .]
    Lemmatized tokens: [the, man, lift, the, boy, onto, he, shoulder, .]
    POS tags: [DT, NN, VBD, DT, NN, IN, PRP$, NNS, .]
    NER tags: [O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [nsubj->1, dobj->4, nmod:onto->7, punct->8], [], [det->3], [], [], [case->5, nmod:poss->6], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B lift person C onto bed, the bed belongs to person C {
    Tokens: [if, person, b, lift, person, c, onto, bed, ,, the, bed, belongs, to, person, c]
    Lemmatized tokens: [if, person, b, lift, person, c, onto, bed, ,, the, bed, belong, to, person, c]
    POS tags: [IN, NN, NN, NN, NN, NN, IN, NN, ,, DT, NN, VBZ, TO, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [], [compound->1, compound->2, compound->3, compound->4, nmod:onto->7], [], [case->6, punct->8, appos->10], [], [], [det->9], [mark->0, nsubj->5, nmod:to->14], [], [], [case->12, compound->13]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B lift person C onto shoulders, shoulders belong to person B. {
    Tokens: [if, person, b, lift, person, c, onto, shoulders, ,, shoulders, belong, to, person, b.]
    Lemmatized tokens: [if, person, b, lift, person, c, onto, shoulder, ,, shoulder, belong, to, person, B.]
    POS tags: [IN, NN, NN, NN, NN, NN, IN, NNS, ,, NNS, VBP, TO, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [], [compound->1, compound->2, compound->3, compound->4, nmod:onto->7], [], [case->6, punct->8, appos->9], [], [], [mark->0, nsubj->5, nmod:to->13], [], [], [case->11, compound->12]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whose shoulders {
    Tokens: [whose, shoulders]
    Lemmatized tokens: [whose, shoulder]
    POS tags: [WP$, NNS]
    NER tags: [O, O]
    NER values: [null, null]
    Dependency children: [[], [nmod:poss->0]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Patting her back, the woman smiled at the girl. {
    Tokens: [patting, her, back, ,, the, woman, smiled, at, the, girl, .]
    Lemmatized tokens: [pat, she, back, ,, the, woman, smile, at, the, girl, .]
    POS tags: [VBG, PRP$, NN, ,, DT, NN, VBD, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[dobj->2], [], [nmod:poss->1], [], [], [det->4], [advcl->0, punct->3, nsubj->5, nmod:at->9, punct->10], [], [], [case->7, det->8], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B pats person C’s back, person B might smile at person C {
    Tokens: [if, person, b, pats, person, c, 's, back, ,, person, b, might, smile, at, person, c]
    Lemmatized tokens: [if, person, b, pat, person, c, 's, back, ,, person, b, might, smile, at, person, c]
    POS tags: [IN, NN, NN, NNS, NN, NN, POS, NN, ,, NN, NN, VBD-AUX, VB, IN, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [compound->1, compound->2, dep->7, punct->8, appos->10], [], [compound->4, case->6], [], [nmod:poss->5], [], [], [compound->9], [], [nmod:at->15, mark->0, nsubj->3, aux->11], [], [], [case->13, compound->14]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B stretches person B’s back, person B might smile at others. {
    Tokens: [if, person, b, stretches, person, b, 's, back, ,, person, b, might, smile, at, others, .]
    Lemmatized tokens: [if, person, b, stretch, person, b, 's, back, ,, person, b, might, smile, at, other, .]
    POS tags: [IN, NN, NN, VBZ, NN, NN, POS, NN, ,, NN, NN, VBD-AUX, VB, IN, NNS, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->7], [], [compound->4, case->6], [], [nmod:poss->5], [], [], [compound->9], [], [punct->15, advcl->3, punct->8, nsubj->10, aux->11, nmod:at->14], [], [case->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whose back did the woman pat {
    Tokens: [whose, back, did, the, woman, pat]
    Lemmatized tokens: [whose, back, do, the, woman, pat]
    POS tags: [WP$, NN, VBD-AUX, DT, NN, NN]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [nmod:poss->0], [nsubj->1, dobj->5], [], [], [det->3, compound->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Stretching her back, the woman smiled at the girl. {
    Tokens: [stretching, her, back, ,, the, woman, smiled, at, the, girl, .]
    Lemmatized tokens: [stretch, she, back, ,, the, woman, smile, at, the, girl, .]
    POS tags: [VBG, PRP$, NN, ,, DT, NN, VBD, IN, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[dobj->2], [], [nmod:poss->1], [], [], [det->4], [advcl->0, punct->3, nsubj->5, nmod:at->9, punct->10], [], [], [case->7, det->8], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B pats person C’s back, person B might smile at person C {
    Tokens: [if, person, b, pats, person, c, 's, back, ,, person, b, might, smile, at, person, c]
    Lemmatized tokens: [if, person, b, pat, person, c, 's, back, ,, person, b, might, smile, at, person, c]
    POS tags: [IN, NN, NN, NNS, NN, NN, POS, NN, ,, NN, NN, VBD-AUX, VB, IN, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [compound->1, compound->2, dep->7, punct->8, appos->10], [], [compound->4, case->6], [], [nmod:poss->5], [], [], [compound->9], [], [nmod:at->15, mark->0, nsubj->3, aux->11], [], [], [case->13, compound->14]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B stretches person B’s back, person B might smile at others. {
    Tokens: [if, person, b, stretches, person, b, 's, back, ,, person, b, might, smile, at, others, .]
    Lemmatized tokens: [if, person, b, stretch, person, b, 's, back, ,, person, b, might, smile, at, other, .]
    POS tags: [IN, NN, NN, VBZ, NN, NN, POS, NN, ,, NN, NN, VBD-AUX, VB, IN, NNS, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->7], [], [compound->4, case->6], [], [nmod:poss->5], [], [], [compound->9], [], [punct->15, advcl->3, punct->8, nsubj->10, aux->11, nmod:at->14], [], [case->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whose back did the woman stretch {
    Tokens: [whose, back, did, the, woman, stretch]
    Lemmatized tokens: [whose, back, do, the, woman, stretch]
    POS tags: [WP$, NN, VBD-AUX, DT, NN, NN]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [nmod:poss->0], [nsubj->1, dobj->5], [], [], [det->3, compound->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Billy cried because Toby wouldn't share his toy. {
    Tokens: [billy, cried, because, toby, would, n't, share, his, toy, .]
    Lemmatized tokens: [Billy, cry, because, Toby, would, not, share, he, toy, .]
    POS tags: [NNP, VBD, IN, NNP, VBD-AUX, RB, VB, PRP$, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, advcl->6, punct->9], [], [], [], [], [mark->2, nsubj->3, aux->4, neg->5, dobj->8], [], [nmod:poss->7], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B does not shares his thing C, person B owns thing C {
    Tokens: [if, person, b, does, not, shares, his, thing, c, ,, person, b, owns, thing, c]
    Lemmatized tokens: [if, person, b, do, not, share, he, thing, c, ,, person, b, own, thing, c]
    POS tags: [IN, NN, NN, VBD-AUX, RB, NNS, PRP$, NN, NN, ,, NN, NN, VBZ, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, xcomp->8], [], [neg->4], [], [], [nsubj->5, nmod:poss->6, compound->7], [], [], [compound->10], [advcl->3, punct->9, nsubj->11, dobj->14], [], [compound->13]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B does not accept thing C, person B does not own thing C. {
    Tokens: [if, person, b, does, not, accept, thing, c, ,, person, b, does, not, own, thing, c.]
    Lemmatized tokens: [if, person, b, do, not, accept, thing, c, ,, person, b, do, not, own, thing, C.]
    POS tags: [IN, NN, NN, VBD-AUX, RB, VB, NN, NN, ,, NN, NN, VBD-AUX, RB, JJ, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubj->2, aux->3, neg->4, dobj->7], [], [compound->6], [], [], [compound->9], [xcomp->15, advcl->5, punct->8, nsubj->10], [], [], [neg->12, amod->13], [nsubj->14]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who owned the toy {
    Tokens: [who, owned, the, toy]
    Lemmatized tokens: [who, own, the, toy]
    POS tags: [WP, VBD, DT, NN]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3], [], [det->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Billy cried because Toby wouldn't accept his toy. {
    Tokens: [billy, cried, because, toby, would, n't, accept, his, toy, .]
    Lemmatized tokens: [Billy, cry, because, Toby, would, not, accept, he, toy, .]
    POS tags: [NNP, VBD, IN, NNP, VBD-AUX, RB, VB, PRP$, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, advcl->6, punct->9], [], [], [], [], [mark->2, nsubj->3, aux->4, neg->5, dobj->8], [], [nmod:poss->7], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B does not shares his thing C, person B owns thing C {
    Tokens: [if, person, b, does, not, shares, his, thing, c, ,, person, b, owns, thing, c]
    Lemmatized tokens: [if, person, b, do, not, share, he, thing, c, ,, person, b, own, thing, c]
    POS tags: [IN, NN, NN, VBD-AUX, RB, NNS, PRP$, NN, NN, ,, NN, NN, VBZ, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, xcomp->8], [], [neg->4], [], [], [nsubj->5, nmod:poss->6, compound->7], [], [], [compound->10], [advcl->3, punct->9, nsubj->11, dobj->14], [], [compound->13]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B does not accept thing C, person B does not own thing C. {
    Tokens: [if, person, b, does, not, accept, thing, c, ,, person, b, does, not, own, thing, c.]
    Lemmatized tokens: [if, person, b, do, not, accept, thing, c, ,, person, b, do, not, own, thing, C.]
    POS tags: [IN, NN, NN, VBD-AUX, RB, VB, NN, NN, ,, NN, NN, VBD-AUX, RB, JJ, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubj->2, aux->3, neg->4, dobj->7], [], [compound->6], [], [], [compound->9], [xcomp->15, advcl->5, punct->8, nsubj->10], [], [], [neg->12, amod->13], [nsubj->14]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who owned the toy {
    Tokens: [who, owned, the, toy]
    Lemmatized tokens: [who, own, the, toy]
    POS tags: [WP, VBD, DT, NN]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3], [], [det->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Lily spoke to Donna, breaking her concentration. {
    Tokens: [lily, spoke, to, donna, ,, breaking, her, concentration, .]
    Lemmatized tokens: [Lily, speak, to, Donna, ,, break, she, concentration, .]
    POS tags: [NNP, VBD, TO, NNP, ,, VBG, PRP$, NN, .]
    NER tags: [O, O, O, PERSON, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:to->3, punct->4, xcomp->5, punct->8], [], [case->2], [], [dobj->7], [], [nmod:poss->6], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B speaks to person C, person B’s silence is broken and person C’s concentration is broken. {
    Tokens: [if, person, b, speaks, to, person, c, ,, person, b, 's, silence, is, broken, and, person, c, 's, concentration, is, broken, .]
    Lemmatized tokens: [if, person, b, speak, to, person, c, ,, person, b, 's, silence, be, break, and, person, c, 's, concentration, be, break, .]
    POS tags: [IN, NN, NN, VBZ, TO, NN, NN, ,, NN, NN, POS, NN, VBD-AUX, VBN, CC, NN, NN, POS, NN, VBD-AUX, VBN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, nmod:to->6], [], [], [case->4, compound->5], [], [], [compound->8, case->10], [], [nmod:poss->9], [], [advcl->3, conj:and->20, punct->21, punct->7, nsubjpass->11, auxpass->12, cc->14], [], [], [compound->15, case->17], [], [nmod:poss->16], [], [nsubjpass->18, auxpass->19], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whose concentration {
    Tokens: [whose, concentration]
    Lemmatized tokens: [whose, concentration]
    POS tags: [WP$, NN]
    NER tags: [O, O]
    NER values: [null, null]
    Dependency children: [[], [nmod:poss->0]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Lily spoke to Donna, breaking her silence. {
    Tokens: [lily, spoke, to, donna, ,, breaking, her, silence, .]
    Lemmatized tokens: [Lily, speak, to, Donna, ,, break, she, silence, .]
    POS tags: [NNP, VBD, TO, NNP, ,, VBG, PRP$, NN, .]
    NER tags: [O, O, O, PERSON, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:to->3, punct->4, xcomp->5, punct->8], [], [case->2], [], [dobj->7], [], [nmod:poss->6], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B speaks to person C, person B’s silence is broken and person C’s concentration is broken. {
    Tokens: [if, person, b, speaks, to, person, c, ,, person, b, 's, silence, is, broken, and, person, c, 's, concentration, is, broken, .]
    Lemmatized tokens: [if, person, b, speak, to, person, c, ,, person, b, 's, silence, be, break, and, person, c, 's, concentration, be, break, .]
    POS tags: [IN, NN, NN, VBZ, TO, NN, NN, ,, NN, NN, POS, NN, VBD-AUX, VBN, CC, NN, NN, POS, NN, VBD-AUX, VBN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, nmod:to->6], [], [], [case->4, compound->5], [], [], [compound->8, case->10], [], [nmod:poss->9], [], [advcl->3, conj:and->20, punct->21, punct->7, nsubjpass->11, auxpass->12, cc->14], [], [], [compound->15, case->17], [], [nmod:poss->16], [], [nsubjpass->18, auxpass->19], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whose silence {
    Tokens: [whose, silence]
    Lemmatized tokens: [whose, silence]
    POS tags: [WP$, NN]
    NER tags: [O, O]
    NER values: [null, null]
    Dependency children: [[], [nmod:poss->0]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: When Tommy dropped his ice cream, Timmy giggled, so father gave him a stern look. {
    Tokens: [when, tommy, dropped, his, ice, cream, ,, timmy, giggled, ,, so, father, gave, him, a, stern, look, .]
    Lemmatized tokens: [when, Tommy, drop, he, ice, cream, ,, Timmy, giggle, ,, so, father, give, he, a, stern, look, .]
    POS tags: [WRB, NNP, VBD, PRP$, NN, NN, ,, NNP, VBD, ,, RB, NN, VBD, PRP, DT, JJ, NN, .]
    NER tags: [O, PERSON, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [advmod->0, nsubj->1, dobj->5], [], [], [nmod:poss->3, compound->4], [], [], [punct->17, advcl->2, punct->6, nsubj->7, punct->9, advmod->10, parataxis->12], [], [], [], [dobj->16, nsubj->11, iobj->13], [], [], [], [amod->15, det->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B drop sth, person B is unfortunate {
    Tokens: [if, person, b, drop, sth, ,, person, b, is, unfortunate]
    Lemmatized tokens: [if, person, b, drop, sth, ,, person, b, be, unfortunate]
    POS tags: [IN, NN, NN, NN, NN, ,, NN, NN, VBD-AUX, JJ]
    NER tags: [O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [case->0, compound->1, compound->2, compound->3], [], [], [compound->6], [], [nmod:if->4, punct->5, nsubj->7, cop->8]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is unfortunate and person C smiles, somebody might give person B a sympathetic look and person C is annoying {
    Tokens: [if, person, b, is, unfortunate, and, person, c, smiles, ,, somebody, might, give, person, b, a, sympathetic, look, and, person, c, is, annoying]
    Lemmatized tokens: [if, person, b, be, unfortunate, and, person, c, smile, ,, somebody, might, give, person, b, a, sympathetic, look, and, person, c, be, annoy]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, CC, NN, NN, VBZ, ,, NN, VBD-AUX, VB, NN, NN, DT, JJ, NN, CC, NN, NN, VBD-AUX, VBG]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3, cc->5, conj:and->8], [], [], [compound->6], [nsubj->7], [], [], [], [dobj->17, advcl->4, dobj->20, advcl->8, punct->9, nsubj->10, aux->11, iobj->14], [], [compound->13], [], [], [det->15, amod->16, cc->18, conj:and->20, acl:relcl->22], [], [], [compound->19], [], [aux->21]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is annoying, somebody might give person B a stem look {
    Tokens: [if, person, b, is, annoying, ,, somebody, might, give, person, b, a, stem, look]
    Lemmatized tokens: [if, person, b, be, annoying, ,, somebody, might, give, person, b, a, stem, look]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, ,, NN, VBD-AUX, VB, NN, NN, DT, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3], [], [], [], [advcl->4, punct->5, nsubj->6, aux->7, iobj->10, dobj->13], [], [compound->9], [], [], [det->11, compound->12]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B giggles, person B smiles. {
    Tokens: [if, person, b, giggles, ,, person, b, smiles, .]
    Lemmatized tokens: [if, person, b, giggle, ,, person, b, smile, .]
    POS tags: [IN, NN, NN, NNS, ,, NN, NN, VBZ, .]
    NER tags: [O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [case->0, compound->1, compound->2], [], [], [compound->5], [nmod:if->3, punct->4, nsubj->6, punct->8], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who got the look from father {
    Tokens: [who, got, the, look, from, father]
    Lemmatized tokens: [who, get, the, look, from, father]
    POS tags: [WP, VBD, DT, NN, IN, NN]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, nmod:from->5], [], [det->2], [], [case->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: When Tommy dropped his ice cream, Timmy giggled, so father gave him a sympathetic look. {
    Tokens: [when, tommy, dropped, his, ice, cream, ,, timmy, giggled, ,, so, father, gave, him, a, sympathetic, look, .]
    Lemmatized tokens: [when, Tommy, drop, he, ice, cream, ,, Timmy, giggle, ,, so, father, give, he, a, sympathetic, look, .]
    POS tags: [WRB, NNP, VBD, PRP$, NN, NN, ,, NNP, VBD, ,, RB, NN, VBD, PRP, DT, JJ, NN, .]
    NER tags: [O, PERSON, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [advmod->0, nsubj->1, dobj->5], [], [], [nmod:poss->3, compound->4], [], [], [punct->17, advcl->2, punct->6, nsubj->7, punct->9, advmod->10, parataxis->12], [], [], [], [dobj->16, nsubj->11, iobj->13], [], [], [], [amod->15, det->14], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B drop sth, person B is unfortunate {
    Tokens: [if, person, b, drop, sth, ,, person, b, is, unfortunate]
    Lemmatized tokens: [if, person, b, drop, sth, ,, person, b, be, unfortunate]
    POS tags: [IN, NN, NN, NN, NN, ,, NN, NN, VBD-AUX, JJ]
    NER tags: [O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [], [case->0, compound->1, compound->2, compound->3], [], [], [compound->6], [], [nmod:if->4, punct->5, nsubj->7, cop->8]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is unfortunate and person C smiles, somebody might give person B a sympathetic look and person C is annoying {
    Tokens: [if, person, b, is, unfortunate, and, person, c, smiles, ,, somebody, might, give, person, b, a, sympathetic, look, and, person, c, is, annoying]
    Lemmatized tokens: [if, person, b, be, unfortunate, and, person, c, smile, ,, somebody, might, give, person, b, a, sympathetic, look, and, person, c, be, annoy]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, CC, NN, NN, VBZ, ,, NN, VBD-AUX, VB, NN, NN, DT, JJ, NN, CC, NN, NN, VBD-AUX, VBG]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3, cc->5, conj:and->8], [], [], [compound->6], [nsubj->7], [], [], [], [dobj->17, advcl->4, dobj->20, advcl->8, punct->9, nsubj->10, aux->11, iobj->14], [], [compound->13], [], [], [det->15, amod->16, cc->18, conj:and->20, acl:relcl->22], [], [], [compound->19], [], [aux->21]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is annoying, somebody might give person B a stem look {
    Tokens: [if, person, b, is, annoying, ,, somebody, might, give, person, b, a, stem, look]
    Lemmatized tokens: [if, person, b, be, annoying, ,, somebody, might, give, person, b, a, stem, look]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, ,, NN, VBD-AUX, VB, NN, NN, DT, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3], [], [], [], [advcl->4, punct->5, nsubj->6, aux->7, iobj->10, dobj->13], [], [compound->9], [], [], [det->11, compound->12]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B giggles, person B smiles. {
    Tokens: [if, person, b, giggles, ,, person, b, smiles, .]
    Lemmatized tokens: [if, person, b, giggle, ,, person, b, smile, .]
    POS tags: [IN, NN, NN, NNS, ,, NN, NN, VBZ, .]
    NER tags: [O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [case->0, compound->1, compound->2], [], [], [compound->5], [nmod:if->3, punct->4, nsubj->6, punct->8], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who got the look from father {
    Tokens: [who, got, the, look, from, father]
    Lemmatized tokens: [who, get, the, look, from, father]
    POS tags: [WP, VBD, DT, NN, IN, NN]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, nmod:from->5], [], [det->2], [], [case->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: As Ollie carried Tommy up the long winding steps, his legs dangled. {
    Tokens: [as, ollie, carried, tommy, up, the, long, winding, steps, ,, his, legs, dangled, .]
    Lemmatized tokens: [as, Ollie, carry, Tommy, up, the, long, wind, step, ,, he, leg, dangle, .]
    POS tags: [IN, NNP, VBD, NNP, IN, DT, JJ, VBG, NNS, ,, PRP$, NNS, VBN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [case->0], [nmod:as->1, dobj->3, nmod:up->6, nsubj->8, punct->13], [], [], [], [case->4, det->5, acl->7], [], [punct->9, appos->11], [], [], [nmod:poss->10, acl->12], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B’s legs are floating, person B’s legs are dangled {
    Tokens: [if, person, b, 's, legs, are, floating, ,, person, b, 's, legs, are, dangled]
    Lemmatized tokens: [if, person, b, 's, leg, be, float, ,, person, b, 's, leg, be, dangle]
    POS tags: [IN, NN, NN, POS, NNS, VBD-AUX, VBG, ,, NN, NN, POS, NNS, VBD-AUX, VBN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1, case->3], [], [nmod:poss->2], [], [mark->0, nsubj->4, aux->5, punct->7, parataxis->13], [], [], [compound->8, case->10], [], [nmod:poss->9], [], [nsubjpass->11, auxpass->12]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B’s legs are weight-bearing, person B’s legs are ached {
    Tokens: [if, person, b, 's, legs, are, weight, bearing, ,, person, b, 's, legs, are, ached]
    Lemmatized tokens: [if, person, b, 's, leg, be, weight, bearing, ,, person, b, 's, leg, be, ache]
    POS tags: [IN, NN, NN, POS, NNS, VBD-AUX, NN, NN, ,, NN, NN, POS, NNS, VBD-AUX, VBN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1, case->3], [], [nmod:poss->2], [], [], [mark->0, nsubj->4, cop->5, compound->6, punct->8, appos->9], [], [acl:relcl->14], [case->11], [], [nmod:poss->10], [], [nsubjpass->12, auxpass->13]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B carries person C up, person C’s legs are floating and person B’s legs are weight-bearing, {
    Tokens: [if, person, b, carries, person, c, up, ,, person, c, 's, legs, are, floating, and, person, b, 's, legs, are, weight, bearing, ,]
    Lemmatized tokens: [if, person, b, carry, person, c, up, ,, person, c, 's, leg, be, float, and, person, b, 's, leg, be, weight, bearing, ,]
    POS tags: [IN, NN, NN, VBZ, NN, NN, RB, ,, NN, NN, POS, NNS, VBD-AUX, VBG, CC, NN, NN, POS, NNS, VBD-AUX, NN, NN, ,]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5, conj:and->21, advmod->6, punct->7, conj:and->13, cc->14], [], [compound->4], [], [], [], [compound->8, case->10], [], [nmod:poss->9], [], [nsubj->11, aux->12], [], [], [compound->15, case->17], [], [nmod:poss->16], [], [], [nsubj->18, cop->19, compound->20, punct->22], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whose legs dangled {
    Tokens: [whose, legs, dangled]
    Lemmatized tokens: [whose, leg, dangle]
    POS tags: [WP$, NNS, VBD]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [nmod:poss->0], [nsubj->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: As Ollie carried Tommy up the long winding steps, his legs ached. {
    Tokens: [as, ollie, carried, tommy, up, the, long, winding, steps, ,, his, legs, ached, .]
    Lemmatized tokens: [as, Ollie, carry, Tommy, up, the, long, wind, step, ,, he, leg, ache, .]
    POS tags: [IN, NNP, VBD, NNP, IN, DT, JJ, VBG, NNS, ,, PRP$, NNS, VBD, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [mark->0, nsubj->1, dobj->3, nmod:up->6, xcomp->7], [], [], [], [case->4, det->5], [dobj->8], [], [], [], [nmod:poss->10], [advcl->2, punct->9, nsubj->11, punct->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B’s legs are floating, person B’s legs are dangled {
    Tokens: [if, person, b, 's, legs, are, floating, ,, person, b, 's, legs, are, dangled]
    Lemmatized tokens: [if, person, b, 's, leg, be, float, ,, person, b, 's, leg, be, dangle]
    POS tags: [IN, NN, NN, POS, NNS, VBD-AUX, VBG, ,, NN, NN, POS, NNS, VBD-AUX, VBN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1, case->3], [], [nmod:poss->2], [], [mark->0, nsubj->4, aux->5, punct->7, parataxis->13], [], [], [compound->8, case->10], [], [nmod:poss->9], [], [nsubjpass->11, auxpass->12]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B’s legs are weight-bearing, person B’s legs are ached {
    Tokens: [if, person, b, 's, legs, are, weight, bearing, ,, person, b, 's, legs, are, ached]
    Lemmatized tokens: [if, person, b, 's, leg, be, weight, bearing, ,, person, b, 's, leg, be, ache]
    POS tags: [IN, NN, NN, POS, NNS, VBD-AUX, NN, NN, ,, NN, NN, POS, NNS, VBD-AUX, VBN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1, case->3], [], [nmod:poss->2], [], [], [mark->0, nsubj->4, cop->5, compound->6, punct->8, appos->9], [], [acl:relcl->14], [case->11], [], [nmod:poss->10], [], [nsubjpass->12, auxpass->13]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B carries person C up, person C’s legs are floating and person B’s legs are weight-bearing, {
    Tokens: [if, person, b, carries, person, c, up, ,, person, c, 's, legs, are, floating, and, person, b, 's, legs, are, weight, bearing, ,]
    Lemmatized tokens: [if, person, b, carry, person, c, up, ,, person, c, 's, leg, be, float, and, person, b, 's, leg, be, weight, bearing, ,]
    POS tags: [IN, NN, NN, VBZ, NN, NN, RB, ,, NN, NN, POS, NNS, VBD-AUX, VBG, CC, NN, NN, POS, NNS, VBD-AUX, NN, NN, ,]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5, conj:and->21, advmod->6, punct->7, conj:and->13, cc->14], [], [compound->4], [], [], [], [compound->8, case->10], [], [nmod:poss->9], [], [nsubj->11, aux->12], [], [], [compound->15, case->17], [], [nmod:poss->16], [], [], [nsubj->18, cop->19, compound->20, punct->22], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whose legs ached {
    Tokens: [whose, legs, ached]
    Lemmatized tokens: [whose, leg, ache]
    POS tags: [WP$, NNS, VBD]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [nmod:poss->0], [nsubj->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The father carried the sleeping boy in his arms. {
    Tokens: [the, father, carried, the, sleeping, boy, in, his, arms, .]
    Lemmatized tokens: [the, father, carry, the, sleep, boy, in, he, arm, .]
    POS tags: [DT, NN, VBD, DT, VBG, NN, IN, PRP$, NNS, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [nsubj->1, dobj->5, punct->9], [], [], [det->3, amod->4, nmod:in->8], [], [], [case->6, nmod:poss->7], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is sleep, person C might carry person B in person C’s arms {
    Tokens: [if, person, b, is, sleep, ,, person, c, might, carry, person, b, in, person, c, 's, arms]
    Lemmatized tokens: [if, person, b, be, sleep, ,, person, c, might, carry, person, b, in, person, c, 's, arm]
    POS tags: [IN, NN, NN, VBD-AUX, NN, ,, NN, NN, VBD-AUX, VB, NN, NN, IN, NN, NN, POS, NNS]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3], [], [], [compound->6], [], [nmod:in->16, advcl->4, punct->5, nsubj->7, aux->8, dobj->11], [], [compound->10], [], [], [case->15, compound->13], [], [case->12, nmod:poss->14]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is a kid, person B might has a bassinet {
    Tokens: [if, person, b, is, a, kid, ,, person, b, might, has, a, bassinet]
    Lemmatized tokens: [if, person, b, be, a, kid, ,, person, b, might, have, a, bassinet]
    POS tags: [IN, NN, NN, VBD-AUX, DT, NN, ,, NN, NN, VBD-AUX, VBD-AUX, DT, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubj->2, cop->3, det->4], [], [], [compound->7], [], [advcl->5, punct->6, nsubj->8, aux->9, dobj->12], [], [det->11]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is a boy, person B is a kid. {
    Tokens: [if, person, b, is, a, boy, ,, person, b, is, a, kid, .]
    Lemmatized tokens: [if, person, b, be, a, boy, ,, person, b, be, a, kid, .]
    POS tags: [IN, NN, NN, VBD-AUX, DT, NN, ,, NN, NN, VBD-AUX, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubj->2, cop->3, det->4], [], [], [compound->7], [], [], [advcl->5, punct->6, nsubj->8, cop->9, det->10, punct->12], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whose arms {
    Tokens: [whose, arms]
    Lemmatized tokens: [whose, arm]
    POS tags: [WP$, NNS]
    NER tags: [O, O]
    NER values: [null, null]
    Dependency children: [[], [nmod:poss->0]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The father carried the sleeping boy in his bassinet. {
    Tokens: [the, father, carried, the, sleeping, boy, in, his, bassinet, .]
    Lemmatized tokens: [the, father, carry, the, sleep, boy, in, he, bassinet, .]
    POS tags: [DT, NN, VBD, DT, VBG, NN, IN, PRP$, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [nsubj->1, dobj->5, punct->9], [], [], [det->3, amod->4, nmod:in->8], [], [], [case->6, nmod:poss->7], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is sleep, person C might carry person B in person C’s arms {
    Tokens: [if, person, b, is, sleep, ,, person, c, might, carry, person, b, in, person, c, 's, arms]
    Lemmatized tokens: [if, person, b, be, sleep, ,, person, c, might, carry, person, b, in, person, c, 's, arm]
    POS tags: [IN, NN, NN, VBD-AUX, NN, ,, NN, NN, VBD-AUX, VB, NN, NN, IN, NN, NN, POS, NNS]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3], [], [], [compound->6], [], [nmod:in->16, advcl->4, punct->5, nsubj->7, aux->8, dobj->11], [], [compound->10], [], [], [case->15, compound->13], [], [case->12, nmod:poss->14]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is a kid, person B might has a bassinet {
    Tokens: [if, person, b, is, a, kid, ,, person, b, might, has, a, bassinet]
    Lemmatized tokens: [if, person, b, be, a, kid, ,, person, b, might, have, a, bassinet]
    POS tags: [IN, NN, NN, VBD-AUX, DT, NN, ,, NN, NN, VBD-AUX, VBD-AUX, DT, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubj->2, cop->3, det->4], [], [], [compound->7], [], [advcl->5, punct->6, nsubj->8, aux->9, dobj->12], [], [det->11]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is a boy, person B is a kid. {
    Tokens: [if, person, b, is, a, boy, ,, person, b, is, a, kid, .]
    Lemmatized tokens: [if, person, b, be, a, boy, ,, person, b, be, a, kid, .]
    POS tags: [IN, NN, NN, VBD-AUX, DT, NN, ,, NN, NN, VBD-AUX, DT, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [mark->0, nsubj->2, cop->3, det->4], [], [], [compound->7], [], [], [advcl->5, punct->6, nsubj->8, cop->9, det->10, punct->12], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whose bassinet {
    Tokens: [whose, bassinet]
    Lemmatized tokens: [whose, bassinet]
    POS tags: [WP$, NN]
    NER tags: [O, O]
    NER values: [null, null]
    Dependency children: [[], [nmod:poss->0]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The woman held the girl against her chest. {
    Tokens: [the, woman, held, the, girl, against, her, chest, .]
    Lemmatized tokens: [the, woman, hold, the, girl, against, she, chest, .]
    POS tags: [DT, NN, VBD, DT, NN, IN, PRP$, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [nsubj->1, dobj->4, nmod:against->7, punct->8], [], [det->3], [], [], [case->5, nmod:poss->6], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B holds person C, person C might reject {
    Tokens: [if, person, b, holds, person, c, ,, person, c, might, reject]
    Lemmatized tokens: [if, person, b, hold, person, c, ,, person, c, might, reject]
    POS tags: [IN, NN, NN, VBZ, NN, NN, ,, NN, NN, VBD-AUX, VB]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5], [], [compound->4], [], [], [compound->7], [], [advcl->3, punct->6, nsubj->8, aux->9]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person C is against his will, person C is rejecting {
    Tokens: [if, person, c, is, against, his, will, ,, person, c, is, rejecting]
    Lemmatized tokens: [if, person, c, be, against, he, will, ,, person, c, be, reject]
    POS tags: [IN, NN, NN, VBD-AUX, IN, PRP$, VBD-AUX, ,, NN, NN, VBD-AUX, VBG]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [], [mark->0, nsubj->2, cop->3, mark->4, nsubj->5], [], [], [compound->8], [], [advcl->6, punct->7, nsubj->9, aux->10]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B holds person C against her chest, chest belongs to person B. {
    Tokens: [if, person, b, holds, person, c, against, her, chest, ,, chest, belongs, to, person, b.]
    Lemmatized tokens: [if, person, b, hold, person, c, against, she, chest, ,, chest, belong, to, person, B.]
    POS tags: [IN, NN, NN, VBZ, NN, NN, IN, PRP$, NN, ,, NN, VBZ, TO, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5], [], [compound->4, nmod:against->8], [], [], [case->6, nmod:poss->7], [], [], [advcl->3, punct->9, nsubj->10, nmod:to->14], [], [], [case->12, compound->13]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whose chest {
    Tokens: [whose, chest]
    Lemmatized tokens: [whose, chest]
    POS tags: [WP$, NN]
    NER tags: [O, O]
    NER values: [null, null]
    Dependency children: [[], [nmod:poss->0]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: The woman held the girl against her will. {
    Tokens: [the, woman, held, the, girl, against, her, will, .]
    Lemmatized tokens: [the, woman, hold, the, girl, against, she, will, .]
    POS tags: [DT, NN, VBD, DT, NN, IN, PRP$, VBD-AUX, .]
    NER tags: [O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [nsubj->1, dobj->4, nmod:against->7, punct->8], [], [det->3], [], [], [case->5, nmod:poss->6], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B holds person C, person C might reject {
    Tokens: [if, person, b, holds, person, c, ,, person, c, might, reject]
    Lemmatized tokens: [if, person, b, hold, person, c, ,, person, c, might, reject]
    POS tags: [IN, NN, NN, VBZ, NN, NN, ,, NN, NN, VBD-AUX, VB]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5], [], [compound->4], [], [], [compound->7], [], [advcl->3, punct->6, nsubj->8, aux->9]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person C is against his will, person C is rejecting {
    Tokens: [if, person, c, is, against, his, will, ,, person, c, is, rejecting]
    Lemmatized tokens: [if, person, c, be, against, he, will, ,, person, c, be, reject]
    POS tags: [IN, NN, NN, VBD-AUX, IN, PRP$, VBD-AUX, ,, NN, NN, VBD-AUX, VBG]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [], [], [mark->0, nsubj->2, cop->3, mark->4, nsubj->5], [], [], [compound->8], [], [advcl->6, punct->7, nsubj->9, aux->10]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B holds person C against her chest, chest belongs to person B. {
    Tokens: [if, person, b, holds, person, c, against, her, chest, ,, chest, belongs, to, person, b.]
    Lemmatized tokens: [if, person, b, hold, person, c, against, she, chest, ,, chest, belong, to, person, B.]
    POS tags: [IN, NN, NN, VBZ, NN, NN, IN, PRP$, NN, ,, NN, VBZ, TO, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5], [], [compound->4, nmod:against->8], [], [], [case->6, nmod:poss->7], [], [], [advcl->3, punct->9, nsubj->10, nmod:to->14], [], [], [case->12, compound->13]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whose will {
    Tokens: [whose, will]
    Lemmatized tokens: [whose, will]
    POS tags: [WP$, VBD-AUX]
    NER tags: [O, O]
    NER values: [null, null]
    Dependency children: [[], [nsubj->0]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Pam's parents came home and found her having sex with her boyfriend, Paul. They were embarrassed about it. {
    Tokens: [pam, 's, parents, came, home, and, found, her, having, sex, with, her, boyfriend, ,, paul, ., they, were, embarrassed, about, it, .]
    Lemmatized tokens: [pam, 's, parent, come, home, and, find, she, have, sex, with, she, boyfriend, ,, Paul, ., they, be, embarrassed, about, it, .]
    POS tags: [NNS, POS, NNS, VBD, NN, CC, VBD, PRP$, VBG, NN, IN, PRP$, NN, ,, NNP, ., PRP, VBD-AUX, JJ, IN, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, PERSON, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[case->1], [], [nmod:poss->0], [punct->15, nsubj->2, dobj->4, cc->5, conj:and->6], [], [], [nsubj->2, dobj->7, xcomp->8], [], [dobj->9, nmod:with->12], [], [], [], [case->10, nmod:poss->11, punct->13, appos->14], [], [], [], [], [], [nmod:about->20, punct->21, nsubj->16, cop->17], [], [case->19], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B found person C doing sth embarrassing, person B might be furious and person C might be embarrassed {
    Tokens: [if, person, b, found, person, c, doing, sth, embarrassing, ,, person, b, might, be, furious, and, person, c, might, be, embarrassed]
    Lemmatized tokens: [if, person, b, find, person, c, do, sth, embarrassing, ,, person, b, might, be, furious, and, person, c, might, be, embarrassed]
    POS tags: [IN, NN, NN, VBN, NN, NN, VBG, NN, JJ, ,, NN, NN, VBD-AUX, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, VBD-AUX, JJ]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5], [], [compound->4, acl->6], [dobj->7], [amod->8], [], [], [], [compound->10], [], [], [cc->15, advcl->3, conj:and->20, punct->9, nsubj->11, aux->12, cop->13], [], [], [compound->16], [], [], [nsubj->17, aux->18, cop->19]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is having sex, person B is doing sth embarrassing. {
    Tokens: [if, person, b, is, having, sex, ,, person, b, is, doing, sth, embarrassing, .]
    Lemmatized tokens: [if, person, b, be, have, sex, ,, person, b, be, do, sth, embarrassing, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBG, NN, ,, NN, NN, VBD-AUX, VBG, NN, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, aux->3, dobj->5], [], [], [], [compound->7], [], [advcl->4, punct->6, nsubj->8, aux->9, dobj->11, punct->13], [amod->12], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who were embarrassed {
    Tokens: [who, were, embarrassed]
    Lemmatized tokens: [who, be, embarrassed]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Pam's parents came home and found her having sex with her boyfriend, Paul. They were furious about it. {
    Tokens: [pam, 's, parents, came, home, and, found, her, having, sex, with, her, boyfriend, ,, paul, ., they, were, furious, about, it, .]
    Lemmatized tokens: [pam, 's, parent, come, home, and, find, she, have, sex, with, she, boyfriend, ,, Paul, ., they, be, furious, about, it, .]
    POS tags: [NNS, POS, NNS, VBD, NN, CC, VBD, PRP$, VBG, NN, IN, PRP$, NN, ,, NNP, ., PRP, VBD-AUX, JJ, IN, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, PERSON, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[case->1], [], [nmod:poss->0], [punct->15, nsubj->2, dobj->4, cc->5, conj:and->6], [], [], [nsubj->2, dobj->7, xcomp->8], [], [dobj->9, nmod:with->12], [], [], [], [case->10, nmod:poss->11, punct->13, appos->14], [], [], [], [], [], [nmod:about->20, punct->21, nsubj->16, cop->17], [], [case->19], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B found person C doing sth embarrassing, person B might be furious and person C might be embarrassed {
    Tokens: [if, person, b, found, person, c, doing, sth, embarrassing, ,, person, b, might, be, furious, and, person, c, might, be, embarrassed]
    Lemmatized tokens: [if, person, b, find, person, c, do, sth, embarrassing, ,, person, b, might, be, furious, and, person, c, might, be, embarrassed]
    POS tags: [IN, NN, NN, VBN, NN, NN, VBG, NN, JJ, ,, NN, NN, VBD-AUX, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, VBD-AUX, JJ]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5], [], [compound->4, acl->6], [dobj->7], [amod->8], [], [], [], [compound->10], [], [], [cc->15, advcl->3, conj:and->20, punct->9, nsubj->11, aux->12, cop->13], [], [], [compound->16], [], [], [nsubj->17, aux->18, cop->19]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is having sex, person B is doing sth embarrassing. {
    Tokens: [if, person, b, is, having, sex, ,, person, b, is, doing, sth, embarrassing, .]
    Lemmatized tokens: [if, person, b, be, have, sex, ,, person, b, be, do, sth, embarrassing, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBG, NN, ,, NN, NN, VBD-AUX, VBG, NN, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, aux->3, dobj->5], [], [], [], [compound->7], [], [advcl->4, punct->6, nsubj->8, aux->9, dobj->11, punct->13], [amod->12], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who were furious {
    Tokens: [who, were, furious]
    Lemmatized tokens: [who, be, furious]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Dr. Adams informed Kate that she had cancer and presented several options for future treatment. {
    Tokens: [dr., adams, informed, kate, that, she, had, cancer, and, presented, several, options, for, future, treatment, .]
    Lemmatized tokens: [Dr., Adams, inform, Kate, that, she, have, cancer, and, present, several, option, for, future, treatment, .]
    POS tags: [NNP, NNP, VBD, NNP, IN, PRP, VBD-AUX, NN, CC, VBD, JJ, NNS, IN, JJ, NN, .]
    NER tags: [O, PERSON, O, PERSON, O, O, O, O, O, O, O, O, O, DATE, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, FUTURE_REF, null, null]
    Dependency children: [[], [compound->0], [punct->15, nsubj->1, dobj->3, ccomp->6, ccomp->9], [], [], [], [mark->4, nsubj->5, dobj->7, cc->8, conj:and->9], [], [], [nsubj->5, dobj->11, nmod:for->14], [], [amod->10], [], [], [case->12, amod->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B inform person C sth and person B is a doctor, person C might have illness or person B might have retired. {
    Tokens: [if, person, b, inform, person, c, sth, and, person, b, is, a, doctor, ,, person, c, might, have, illness, or, person, b, might, have, retired, .]
    Lemmatized tokens: [if, person, b, inform, person, c, sth, and, person, b, be, a, doctor, ,, person, c, might, have, illness, or, person, b, might, have, retire, .]
    POS tags: [IN, NN, NN, VBP, NN, NN, NN, CC, NN, NN, VBD-AUX, DT, NN, ,, NN, NN, VBD-AUX, VBD-AUX, NN, CC, NN, NN, VBD-AUX, VBD-AUX, VBN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, ccomp->12], [], [], [compound->4, compound->5, cc->7, conj:and->9], [], [], [compound->8], [], [], [nsubj->6, nsubj->9, cop->10, det->11], [], [], [compound->14], [], [nsubj->15, aux->16, advcl->3, dobj->21, punct->25, punct->13], [cc->19, conj:or->20], [], [], [compound->18, compound->20, acl:relcl->24], [], [], [aux->22, aux->23], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who had cancer {
    Tokens: [who, had, cancer]
    Lemmatized tokens: [who, have, cancer]
    POS tags: [WP, VBD-AUX, NN]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Dr. Adams informed Kate that she had retired and presented several options for future treatment. If person B inform person C sth and person B is a doctor, person C might have illness or person B might have retired. {
    Tokens: [dr., adams, informed, kate, that, she, had, retired, and, presented, several, options, for, future, treatment, ., if, person, b, inform, person, c, sth, and, person, b, is, a, doctor, ,, person, c, might, have, illness, or, person, b, might, have, retired, .]
    Lemmatized tokens: [Dr., Adams, inform, Kate, that, she, have, retire, and, present, several, option, for, future, treatment, ., if, person, b, inform, person, c, sth, and, person, b, be, a, doctor, ,, person, c, might, have, illness, or, person, b, might, have, retire, .]
    POS tags: [NNP, NNP, VBD, NNP, IN, PRP, VBD-AUX, VBN, CC, VBN, JJ, NNS, IN, JJ, NN, ., IN, NN, NN, VBP, NN, NN, NN, CC, NN, NN, VBD-AUX, DT, NN, ,, NN, NN, VBD-AUX, VBD-AUX, NN, CC, NN, NN, VBD-AUX, VBD-AUX, VBN, .]
    NER tags: [O, PERSON, O, PERSON, O, O, O, O, O, O, O, O, O, DATE, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, FUTURE_REF, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [compound->0], [punct->15, nsubj->1, dobj->3, ccomp->7, ccomp->9], [], [], [], [], [mark->4, nsubj->5, aux->6, cc->8, conj:and->9, dobj->11], [], [nsubj->5], [], [amod->10, nmod:for->14], [], [], [case->12, amod->13], [], [], [], [compound->17], [nsubj->18, ccomp->28, mark->16], [], [], [compound->20, compound->21, cc->23, conj:and->25], [], [], [compound->24], [], [], [nsubj->22, nsubj->25, cop->26, det->27], [], [], [compound->30], [], [advcl->19, dobj->37, punct->41, punct->29, nsubj->31, aux->32], [cc->35, conj:or->36], [], [], [compound->34, compound->36, acl:relcl->40], [], [], [aux->38, aux->39], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who had retired {
    Tokens: [who, had, retired]
    Lemmatized tokens: [who, have, retire]
    POS tags: [WP, VBD-AUX, VBN]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, aux->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Dan had to stop Bill from toying with the injured bird. He is very compassionate. {
    Tokens: [dan, had, to, stop, bill, from, toying, with, the, injured, bird, ., he, is, very, compassionate, .]
    Lemmatized tokens: [Dan, have, to, stop, bill, from, toy, with, the, injured, bird, ., he, be, very, compassionate, .]
    POS tags: [NNP, VBD-AUX, TO, VB, NN, IN, VBG, IN, DT, JJ, NN, ., PRP, VBD-AUX, RB, JJ, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, xcomp->3, punct->11], [], [mark->2, dobj->4, advcl->6], [], [], [mark->5, nmod:with->10], [], [], [], [case->7, det->8, amod->9], [], [], [], [], [advmod->14, punct->16, nsubj->12, cop->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B stop person C doing sth crucial, person B is compassionate and person C is cruel. Toying with the injured bird is sth crucial. {
    Tokens: [if, person, b, stop, person, c, doing, sth, crucial, ,, person, b, is, compassionate, and, person, c, is, cruel, ., toying, with, the, injured, bird, is, sth, crucial, .]
    Lemmatized tokens: [if, person, b, stop, person, c, do, sth, crucial, ,, person, b, be, compassionate, and, person, c, be, cruel, ., toy, with, the, injured, bird, be, sth, crucial, .]
    POS tags: [IN, NN, NN, VB, NN, NN, VBG, NN, JJ, ,, NN, NN, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, JJ, ., VBG, IN, DT, JJ, NN, VBD-AUX, NN, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5, xcomp->6], [], [compound->4], [xcomp->8], [], [nsubj->7], [], [], [compound->10], [], [conj:and->18, advcl->3, punct->19, punct->9, nsubj->11, cop->12, cc->14], [], [], [compound->15], [], [nsubj->16, cop->17], [], [nmod:with->24], [], [], [], [det->22, amod->23, case->21], [], [cop->25, amod->27, punct->28, csubj->20], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who is compassionate {
    Tokens: [who, is, compassionate]
    Lemmatized tokens: [who, be, compassionate]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Dan had to stop Bill from toying with the injured bird. He is very cruel. {
    Tokens: [dan, had, to, stop, bill, from, toying, with, the, injured, bird, ., he, is, very, cruel, .]
    Lemmatized tokens: [Dan, have, to, stop, bill, from, toy, with, the, injured, bird, ., he, be, very, cruel, .]
    POS tags: [NNP, VBD-AUX, TO, VB, NN, IN, VBG, IN, DT, JJ, NN, ., PRP, VBD-AUX, RB, JJ, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, xcomp->3, punct->11], [], [mark->2, dobj->4, advcl->6], [], [], [mark->5, nmod:with->10], [], [], [], [case->7, det->8, amod->9], [], [], [], [], [advmod->14, punct->16, nsubj->12, cop->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B stop person C doing sth crucial, person B is compassionate and person C is cruel. Toying with the injured bird is sth crucial. {
    Tokens: [if, person, b, stop, person, c, doing, sth, crucial, ,, person, b, is, compassionate, and, person, c, is, cruel, ., toying, with, the, injured, bird, is, sth, crucial, .]
    Lemmatized tokens: [if, person, b, stop, person, c, do, sth, crucial, ,, person, b, be, compassionate, and, person, c, be, cruel, ., toy, with, the, injured, bird, be, sth, crucial, .]
    POS tags: [IN, NN, NN, VB, NN, NN, VBG, NN, JJ, ,, NN, NN, VBD-AUX, JJ, CC, NN, NN, VBD-AUX, JJ, ., VBG, IN, DT, JJ, NN, VBD-AUX, NN, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5, xcomp->6], [], [compound->4], [xcomp->8], [], [nsubj->7], [], [], [compound->10], [], [conj:and->18, advcl->3, punct->19, punct->9, nsubj->11, cop->12, cc->14], [], [], [compound->15], [], [nsubj->16, cop->17], [], [nmod:with->24], [], [], [], [det->22, amod->23, case->21], [], [cop->25, amod->27, punct->28, csubj->20], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who is cruel {
    Tokens: [who, is, cruel]
    Lemmatized tokens: [who, be, cruel]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: George got free tickets to the play, but he gave them to Eric because he was [particularly/not particularly] eager to see it. {
    Tokens: [george, got, free, tickets, to, the, play, ,, but, he, gave, them, to, eric, because, he, was, -lsb-, particularly/not, particularly, -rsb-, eager, to, see, it, .]
    Lemmatized tokens: [George, get, free, ticket, to, the, play, ,, but, he, give, they, to, Eric, because, he, be, -lsb-, particularly/not, particularly, -rsb-, eager, to, see, it, .]
    POS tags: [NNP, VBD, JJ, NNS, TO, DT, NN, ,, CC, PRP, VBD, PRP, TO, NNP, IN, PRP, VBD-AUX, -LRB-, NN, RB, -RRB-, JJ, TO, VB, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, nmod:to->6, punct->7, cc->8, punct->25, conj:but->10], [], [amod->2], [], [], [case->4, det->5], [], [], [], [advcl->18, nsubj->9, dobj->11, nmod:to->13], [], [], [case->12], [], [], [], [], [nsubj->15, cop->16, punct->17, amod->21, mark->14], [], [], [advmod->19, punct->20, xcomp->23], [], [mark->22, dobj->24], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B gives the tickets to person C, person B is not particularly eager to see sth and person C is particularly eager to see sth. {
    Tokens: [if, person, b, gives, the, tickets, to, person, c, ,, person, b, is, not, particularly, eager, to, see, sth, and, person, c, is, particularly, eager, to, see, sth, .]
    Lemmatized tokens: [if, person, b, give, the, ticket, to, person, c, ,, person, b, be, not, particularly, eager, to, see, sth, and, person, c, be, particularly, eager, to, see, sth, .]
    POS tags: [IN, NN, NN, VBZ, DT, NNS, TO, NN, NN, ,, NN, NN, VBD-AUX, RB, RB, JJ, TO, VB, NN, CC, NN, NN, VBD-AUX, RB, JJ, TO, VB, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5, nmod:to->8], [], [det->4], [], [], [case->6, compound->7], [], [], [compound->10], [], [], [], [xcomp->17, advcl->3, punct->9, nsubj->11, cop->12, punct->28, neg->13, advmod->14], [], [mark->16, dobj->21], [cc->19, conj:and->20], [], [], [compound->18, compound->20, acl:relcl->24], [], [], [cop->22, advmod->23, xcomp->26], [], [mark->25, dobj->27], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was  eager to see the play {
    Tokens: [who, was, eager, to, see, the, play]
    Lemmatized tokens: [who, be, eager, to, see, the, play]
    POS tags: [WP, VBD-AUX, JJ, TO, VB, DT, NN]
    NER tags: [O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1, xcomp->4], [], [mark->3, dobj->6], [], [det->5]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: George got free tickets to the play, but he gave them to Eric even though he was [particularly/not particularly] eager to see it. {
    Tokens: [george, got, free, tickets, to, the, play, ,, but, he, gave, them, to, eric, even, though, he, was, -lsb-, particularly/not, particularly, -rsb-, eager, to, see, it, .]
    Lemmatized tokens: [George, get, free, ticket, to, the, play, ,, but, he, give, they, to, Eric, even, though, he, be, -lsb-, particularly/not, particularly, -rsb-, eager, to, see, it, .]
    POS tags: [NNP, VBD, JJ, NNS, TO, DT, NN, ,, CC, PRP, VBD, PRP, TO, NNP, RB, IN, PRP, VBD-AUX, -LRB-, NN, RB, -RRB-, JJ, TO, VB, PRP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, nmod:to->6, punct->7, cc->8, conj:but->10, punct->26], [], [amod->2], [], [], [case->4, det->5], [], [], [], [advcl->19, nsubj->9, dobj->11, nmod:to->13], [], [], [case->12], [], [], [], [], [], [mark->15, nsubj->16, cop->17, punct->18, amod->22, advmod->14], [], [], [advmod->20, punct->21, xcomp->24], [], [mark->23, dobj->25], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B gives the tickets to person C, person B is not particularly eager to see sth and person C is particularly eager to see sth. {
    Tokens: [if, person, b, gives, the, tickets, to, person, c, ,, person, b, is, not, particularly, eager, to, see, sth, and, person, c, is, particularly, eager, to, see, sth, .]
    Lemmatized tokens: [if, person, b, give, the, ticket, to, person, c, ,, person, b, be, not, particularly, eager, to, see, sth, and, person, c, be, particularly, eager, to, see, sth, .]
    POS tags: [IN, NN, NN, VBZ, DT, NNS, TO, NN, NN, ,, NN, NN, VBD-AUX, RB, RB, JJ, TO, VB, NN, CC, NN, NN, VBD-AUX, RB, JJ, TO, VB, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5, nmod:to->8], [], [det->4], [], [], [case->6, compound->7], [], [], [compound->10], [], [], [], [xcomp->17, advcl->3, punct->9, nsubj->11, cop->12, punct->28, neg->13, advmod->14], [], [mark->16, dobj->21], [cc->19, conj:and->20], [], [], [compound->18, compound->20, acl:relcl->24], [], [], [cop->22, advmod->23, xcomp->26], [], [mark->25, dobj->27], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who  was not eager to see the play {
    Tokens: [who, was, not, eager, to, see, the, play]
    Lemmatized tokens: [who, be, not, eager, to, see, the, play]
    POS tags: [WP, VBD-AUX, RB, JJ, TO, VB, DT, NN]
    NER tags: [O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, neg->2, xcomp->5], [], [mark->4, dobj->7], [], [det->6]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Jane gave Joan candy because she was hungry. {
    Tokens: [jane, gave, joan, candy, because, she, was, hungry, .]
    Lemmatized tokens: [Jane, give, Joan, candy, because, she, be, hungry, .]
    POS tags: [NNP, VBD, NNP, NN, IN, PRP, VBD-AUX, JJ, .]
    NER tags: [PERSON, O, PERSON, PERSON, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, advcl->7, punct->8], [], [compound->2], [], [], [], [mark->4, nsubj->5, cop->6], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B gives person C food, person B is not hungry and person C is hungry. Candy is food. {
    Tokens: [if, person, b, gives, person, c, food, ,, person, b, is, not, hungry, and, person, c, is, hungry, ., candy, is, food, .]
    Lemmatized tokens: [if, person, b, give, person, c, food, ,, person, b, be, not, hungry, and, person, c, be, hungry, ., candy, be, food, .]
    POS tags: [IN, NN, NN, VBZ, NN, NN, NN, ,, NN, NN, VBD-AUX, RB, JJ, CC, NN, NN, VBD-AUX, JJ, ., NN, VBD-AUX, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, iobj->5, dobj->6], [], [compound->4], [], [], [], [compound->8], [], [], [conj:and->17, punct->18, advcl->3, punct->7, nsubj->9, cop->10, neg->11, cc->13], [], [], [compound->14], [], [nsubj->15, cop->16], [], [], [], [punct->22, nsubj->19, cop->20], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was hungry {
    Tokens: [who, was, hungry]
    Lemmatized tokens: [who, be, hungry]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Jane gave Joan candy because she wasn't hungry. {
    Tokens: [jane, gave, joan, candy, because, she, was, n't, hungry, .]
    Lemmatized tokens: [Jane, give, Joan, candy, because, she, be, not, hungry, .]
    POS tags: [NNP, VBD, NNP, NN, IN, PRP, VBD-AUX, RB, JJ, .]
    NER tags: [PERSON, O, PERSON, PERSON, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, advcl->8, punct->9], [], [compound->2], [], [], [], [], [mark->4, nsubj->5, cop->6, neg->7], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B gives person C food, person B is not hungry and person C is hungry. Candy is food. {
    Tokens: [if, person, b, gives, person, c, food, ,, person, b, is, not, hungry, and, person, c, is, hungry, ., candy, is, food, .]
    Lemmatized tokens: [if, person, b, give, person, c, food, ,, person, b, be, not, hungry, and, person, c, be, hungry, ., candy, be, food, .]
    POS tags: [IN, NN, NN, VBZ, NN, NN, NN, ,, NN, NN, VBD-AUX, RB, JJ, CC, NN, NN, VBD-AUX, JJ, ., NN, VBD-AUX, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, iobj->5, dobj->6], [], [compound->4], [], [], [], [compound->8], [], [], [conj:and->17, punct->18, advcl->3, punct->7, nsubj->9, cop->10, neg->11, cc->13], [], [], [compound->14], [], [nsubj->15, cop->16], [], [], [], [punct->22, nsubj->19, cop->20], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who wasn't hungry {
    Tokens: [who, was, n't, hungry]
    Lemmatized tokens: [who, be, not, hungry]
    POS tags: [WP, VBD-AUX, RB, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, neg->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I tried to paint a picture of an orchard, with lemons in the lemon trees, but they came out looking more like light bulbs . {
    Tokens: [i, tried, to, paint, a, picture, of, an, orchard, ,, with, lemons, in, the, lemon, trees, ,, but, they, came, out, looking, more, like, light, bulbs, .]
    Lemmatized tokens: [I, try, to, paint, a, picture, of, a, orchard, ,, with, lemon, in, the, lemon, tree, ,, but, they, come, out, look, more, like, light, bulb, .]
    POS tags: [PRP, VBD, TO, VB, DT, NN, IN, DT, NN, ,, IN, NNS, IN, DT, NNP, NNS, ,, CC, PRP, VBD, RP, VBG, RBR, IN, JJ, NNS, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, punct->16, cc->17, xcomp->3, conj:but->19, punct->26], [], [mark->2, dobj->5, punct->9, nmod:with->11], [], [det->4, nmod:of->8], [], [], [case->6, det->7], [], [], [nmod:in->15, case->10], [], [], [], [case->12, det->13, compound->14], [], [], [], [nsubj->18, compound:prt->20, xcomp->21], [], [advmod->22, nmod:like->25], [], [], [], [case->23, amod->24], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B looks like thing C, thing B have the same shape with thing C. Light bulb’s shape is round. Lemon’s shape is round. Lemon tree’s shape is cylindrical. Telephone pole’s shape is cylindrical. {
    Tokens: [if, thing, b, looks, like, thing, c, ,, thing, b, have, the, same, shape, with, thing, c., light, bulb, 's, shape, is, round, ., lemon, 's, shape, is, round, ., lemon, tree, 's, shape, is, cylindrical, ., telephone, pole, 's, shape, is, cylindrical, .]
    Lemmatized tokens: [if, thing, b, look, like, thing, c, ,, thing, b, have, the, same, shape, with, thing, c., light, bulb, 's, shape, be, round, ., Lemon, 's, shape, be, round, ., Lemon, tree, 's, shape, be, cylindrical, ., telephone, pole, 's, shape, be, cylindrical, .]
    POS tags: [IN, NN, NN, VBZ, IN, NN, NN, ,, NN, NN, VBD-AUX, DT, JJ, NN, IN, NN, JJ, NN, NN, POS, NN, VBD-AUX, NN, ., NNP, POS, NN, VBD-AUX, NN, ., NNP, NN, POS, NN, VBD-AUX, JJ, ., NN, NNP, POS, NN, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, nmod:like->6], [], [], [case->4, compound->5], [], [], [compound->8], [advcl->3, punct->7, punct->23, nsubj->9, dobj->13], [], [], [nmod:with->17, det->11, amod->12], [], [], [], [compound->15, amod->16, acl:relcl->22, case->14], [case->19], [], [nmod:poss->18], [], [nsubj->20, cop->21], [], [case->25], [], [nmod:poss->24], [], [nsubj->26, cop->27, punct->29], [], [], [compound->30, case->32], [], [nmod:poss->31], [], [punct->36, nsubj->33, cop->34], [], [], [compound->37, case->39], [], [nmod:poss->38], [], [nsubj->40, cop->41, punct->43], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What looked like light bulbs {
    Tokens: [what, looked, like, light, bulbs]
    Lemmatized tokens: [what, look, like, light, bulb]
    POS tags: [WDT, VBD, IN, JJ, NNS]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:like->4], [], [], [case->2, amod->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I tried to paint a picture of an orchard, with lemons in the lemon trees, but they came out looking more like  telephone poles. {
    Tokens: [i, tried, to, paint, a, picture, of, an, orchard, ,, with, lemons, in, the, lemon, trees, ,, but, they, came, out, looking, more, like, telephone, poles, .]
    Lemmatized tokens: [I, try, to, paint, a, picture, of, a, orchard, ,, with, lemon, in, the, lemon, tree, ,, but, they, come, out, look, more, like, telephone, pole, .]
    POS tags: [PRP, VBD, TO, VB, DT, NN, IN, DT, NN, ,, IN, NNS, IN, DT, NNP, NNS, ,, CC, PRP, VBD, RP, VBG, JJR, IN, NN, NNS, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, punct->16, cc->17, xcomp->3, conj:but->19, punct->26], [], [mark->2, dobj->5, punct->9, nmod:with->11], [], [det->4, nmod:of->8], [], [], [case->6, det->7], [], [], [nmod:in->15, case->10], [], [], [], [case->12, det->13, compound->14], [], [], [], [nsubj->18, compound:prt->20, xcomp->21], [], [dobj->22, nmod:like->25], [], [], [], [case->23, compound->24], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If thing B looks like thing C, thing B have the same shape with thing C. Light bulb’s shape is round. Lemon’s shape is round. Lemon tree’s shape is cylindrical. Telephone pole’s shape is cylindrical. {
    Tokens: [if, thing, b, looks, like, thing, c, ,, thing, b, have, the, same, shape, with, thing, c., light, bulb, 's, shape, is, round, ., lemon, 's, shape, is, round, ., lemon, tree, 's, shape, is, cylindrical, ., telephone, pole, 's, shape, is, cylindrical, .]
    Lemmatized tokens: [if, thing, b, look, like, thing, c, ,, thing, b, have, the, same, shape, with, thing, c., light, bulb, 's, shape, be, round, ., Lemon, 's, shape, be, round, ., Lemon, tree, 's, shape, be, cylindrical, ., telephone, pole, 's, shape, be, cylindrical, .]
    POS tags: [IN, NN, NN, VBZ, IN, NN, NN, ,, NN, NN, VBD-AUX, DT, JJ, NN, IN, NN, JJ, NN, NN, POS, NN, VBD-AUX, NN, ., NNP, POS, NN, VBD-AUX, NN, ., NNP, NN, POS, NN, VBD-AUX, JJ, ., NN, NNP, POS, NN, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, nmod:like->6], [], [], [case->4, compound->5], [], [], [compound->8], [advcl->3, punct->7, punct->23, nsubj->9, dobj->13], [], [], [nmod:with->17, det->11, amod->12], [], [], [], [compound->15, amod->16, acl:relcl->22, case->14], [case->19], [], [nmod:poss->18], [], [nsubj->20, cop->21], [], [case->25], [], [nmod:poss->24], [], [nsubj->26, cop->27, punct->29], [], [], [compound->30, case->32], [], [nmod:poss->31], [], [punct->36, nsubj->33, cop->34], [], [], [compound->37, case->39], [], [nmod:poss->38], [], [nsubj->40, cop->41, punct->43], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What looked like  telephone poles {
    Tokens: [what, looked, like, telephone, poles]
    Lemmatized tokens: [what, look, like, telephone, poles]
    POS tags: [WDT, VBD, IN, NN, NNPS]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:like->4], [], [], [case->2, compound->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: James asked Robert for a favor but he refused. {
    Tokens: [james, asked, robert, for, a, favor, but, he, refused, .]
    Lemmatized tokens: [James, ask, Robert, for, a, favor, but, he, refuse, .]
    POS tags: [NNP, VBD, NNP, IN, DT, NN, CC, PRP, VBD, .]
    NER tags: [PERSON, O, PERSON, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2, cc->6, conj:but->8, punct->9], [nmod:for->5], [], [], [case->3, det->4], [], [], [nsubj->7], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B ask person C for a favor, person B may be refused or person C may refuse. {
    Tokens: [if, person, b, ask, person, c, for, a, favor, ,, person, b, may, be, refused, or, person, c, may, refuse, .]
    Lemmatized tokens: [if, person, b, ask, person, c, for, a, favor, ,, person, b, may, be, refuse, or, person, c, may, refuse, .]
    POS tags: [IN, NN, NN, VB, NN, NN, IN, DT, NN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, CC, NN, NN, VBD-AUX, VB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5, nmod:for->8], [], [compound->4], [], [], [case->6, det->7], [], [], [compound->10], [], [], [cc->15, advcl->3, conj:or->19, punct->20, punct->9, nsubjpass->11, aux->12, auxpass->13], [], [], [compound->16], [], [nsubj->17, aux->18], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who refused {
    Tokens: [who, refused]
    Lemmatized tokens: [who, refuse]
    POS tags: [WP, VBD]
    NER tags: [O, O]
    NER values: [null, null]
    Dependency children: [[], [nsubj->0]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: James asked Robert for a favor but he was refused. {
    Tokens: [james, asked, robert, for, a, favor, but, he, was, refused, .]
    Lemmatized tokens: [James, ask, Robert, for, a, favor, but, he, be, refuse, .]
    POS tags: [NNP, VBD, NNP, IN, DT, NN, CC, PRP, VBD-AUX, VBN, .]
    NER tags: [PERSON, O, PERSON, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2, cc->6, conj:but->9, punct->10], [nmod:for->5], [], [], [case->3, det->4], [], [], [], [nsubjpass->7, auxpass->8], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B ask person C for a favor, person B may be refused or person C may refuse. {
    Tokens: [if, person, b, ask, person, c, for, a, favor, ,, person, b, may, be, refused, or, person, c, may, refuse, .]
    Lemmatized tokens: [if, person, b, ask, person, c, for, a, favor, ,, person, b, may, be, refuse, or, person, c, may, refuse, .]
    POS tags: [IN, NN, NN, VB, NN, NN, IN, DT, NN, ,, NN, NN, VBD-AUX, VBD-AUX, VBN, CC, NN, NN, VBD-AUX, VB, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->5, nmod:for->8], [], [compound->4], [], [], [case->6, det->7], [], [], [compound->10], [], [], [cc->15, advcl->3, conj:or->19, punct->20, punct->9, nsubjpass->11, aux->12, auxpass->13], [], [], [compound->16], [], [nsubj->17, aux->18], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was refused {
    Tokens: [who, was, refused]
    Lemmatized tokens: [who, be, refuse]
    POS tags: [WP, VBD-AUX, VBN]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubjpass->0, auxpass->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Kirilov ceded the presidency to Shatov because he was more popular. {
    Tokens: [kirilov, ceded, the, presidency, to, shatov, because, he, was, more, popular, .]
    Lemmatized tokens: [Kirilov, cede, the, presidency, to, Shatov, because, he, be, more, popular, .]
    POS tags: [NNP, VBD, DT, NN, TO, NNP, IN, PRP, VBD-AUX, RBR, JJ, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, nmod:to->5, advcl->10, punct->11], [], [det->2], [], [case->4], [], [], [], [], [mark->6, nsubj->7, cop->8, advmod->9], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B cedes sth to person C, person B lose sth and person C get sth. If person B is less popular, person B lose sth. If person C is more popular, person C get sth. {
    Tokens: [if, person, b, cedes, sth, to, person, c, ,, person, b, lose, sth, and, person, c, get, sth, ., if, person, b, is, less, popular, ,, person, b, lose, sth, ., if, person, c, is, more, popular, ,, person, c, get, sth, .]
    Lemmatized tokens: [if, person, b, cede, sth, to, person, c, ,, person, b, lose, sth, and, person, c, get, sth, ., if, person, b, be, less, popular, ,, person, b, lose, sth, ., if, person, c, be, more, popular, ,, person, c, get, sth, .]
    POS tags: [IN, NN, NN, VBZ, NN, TO, NN, NN, ,, NN, NN, VBP, NN, CC, NN, NN, VB, NN, ., IN, NN, NN, VBD-AUX, RBR, JJ, ,, NN, NN, VBP, NN, ., IN, NN, NN, VBD-AUX, RBR, JJ, ,, NN, NN, VB, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->4, nmod:to->7], [], [], [], [case->5, compound->6], [], [], [compound->9], [ccomp->16, punct->18, advcl->3, punct->8, nsubj->10], [cc->13, conj:and->14], [], [], [compound->12, compound->14], [nsubj->15, dobj->17], [], [], [], [], [compound->20], [], [], [nsubj->21, cop->22, advmod->23, mark->19], [], [], [compound->26], [advcl->24, punct->25, nsubj->27, dobj->29, punct->30], [], [], [], [], [compound->32], [], [], [mark->31, nsubj->33, cop->34, advmod->35], [], [], [compound->38], [advcl->36, punct->37, nsubj->39, dobj->41, punct->42], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was more popular {
    Tokens: [who, was, more, popular]
    Lemmatized tokens: [who, be, more, popular]
    POS tags: [WP, VBD-AUX, RBR, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, advmod->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Kirilov ceded the presidency to Shatov because he was less popular. {
    Tokens: [kirilov, ceded, the, presidency, to, shatov, because, he, was, less, popular, .]
    Lemmatized tokens: [Kirilov, cede, the, presidency, to, Shatov, because, he, be, less, popular, .]
    POS tags: [NNP, VBD, DT, NN, TO, NNP, IN, PRP, VBD-AUX, RBR, JJ, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, nmod:to->5, advcl->10, punct->11], [], [det->2], [], [case->4], [], [], [], [], [mark->6, nsubj->7, cop->8, advmod->9], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B cedes sth to person C, person B lose sth and person C get sth. If person B is less popular, person B lose sth. If person C is more popular, person C get sth. {
    Tokens: [if, person, b, cedes, sth, to, person, c, ,, person, b, lose, sth, and, person, c, get, sth, ., if, person, b, is, less, popular, ,, person, b, lose, sth, ., if, person, c, is, more, popular, ,, person, c, get, sth, .]
    Lemmatized tokens: [if, person, b, cede, sth, to, person, c, ,, person, b, lose, sth, and, person, c, get, sth, ., if, person, b, be, less, popular, ,, person, b, lose, sth, ., if, person, c, be, more, popular, ,, person, c, get, sth, .]
    POS tags: [IN, NN, NN, VBZ, NN, TO, NN, NN, ,, NN, NN, VBP, NN, CC, NN, NN, VB, NN, ., IN, NN, NN, VBD-AUX, RBR, JJ, ,, NN, NN, VBP, NN, ., IN, NN, NN, VBD-AUX, RBR, JJ, ,, NN, NN, VB, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->4, nmod:to->7], [], [], [], [case->5, compound->6], [], [], [compound->9], [ccomp->16, punct->18, advcl->3, punct->8, nsubj->10], [cc->13, conj:and->14], [], [], [compound->12, compound->14], [nsubj->15, dobj->17], [], [], [], [], [compound->20], [], [], [nsubj->21, cop->22, advmod->23, mark->19], [], [], [compound->26], [advcl->24, punct->25, nsubj->27, dobj->29, punct->30], [], [], [], [], [compound->32], [], [], [mark->31, nsubj->33, cop->34, advmod->35], [], [], [compound->38], [advcl->36, punct->37, nsubj->39, dobj->41, punct->42], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was less popular {
    Tokens: [who, was, less, popular]
    Lemmatized tokens: [who, be, less, popular]
    POS tags: [WP, VBD-AUX, JJR, JJ]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, cop->1, nmod:npmod->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Emma did not pass the ball to Janie although she was open. {
    Tokens: [emma, did, not, pass, the, ball, to, janie, although, she, was, open, .]
    Lemmatized tokens: [Emma, do, not, pass, the, ball, to, Janie, although, she, be, open, .]
    POS tags: [NNP, VBD-AUX, RB, VB, DT, NN, TO, NNP, IN, PRP, VBD-AUX, JJ, .]
    NER tags: [PERSON, O, O, O, O, O, O, PERSON, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, aux->1, neg->2, dobj->5, nmod:to->7, advcl->11, punct->12], [], [det->4], [], [case->6], [], [], [], [mark->8, nsubj->9, cop->10], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is open, somebody migth pass the ball to person B.If person B sees that person C is open, person B might pass the ball to person C. {
    Tokens: [if, person, b, is, open, ,, somebody, migth, pass, the, ball, to, person, b.if, person, b, sees, that, person, c, is, open, ,, person, b, might, pass, the, ball, to, person, c.]
    Lemmatized tokens: [if, person, b, be, open, ,, somebody, migth, pass, the, ball, to, person, b.if, person, b, see, that, person, c, be, open, ,, person, b, might, pass, the, ball, to, person, c.]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, ,, NN, NN, VBP, DT, NN, TO, NN, JJ, NN, NN, VBZ, IN, NN, NN, VBD-AUX, JJ, ,, NN, NN, VBD-AUX, VB, DT, NN, TO, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3], [], [], [compound->6], [xcomp->16, advcl->4, punct->5, nsubj->7], [], [nmod:to->15, det->9], [], [], [], [], [case->11, compound->12, amod->13, compound->14], [ccomp->21, punct->22, nsubj->10, parataxis->26], [], [], [compound->18], [], [mark->17, nsubj->19, cop->20], [], [], [compound->23], [], [nmod:to->31, nsubj->24, aux->25, dobj->28], [], [det->27], [], [], [case->29, compound->30]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was open {
    Tokens: [who, was, open]
    Lemmatized tokens: [who, be, open]
    POS tags: [WP, VBD-AUX, JJ]
    NER tags: [O, O, O]
    NER values: [null, null, null]
    Dependency children: [[], [], [nsubj->0, cop->1]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Emma did not pass the ball to Janie although she saw that she was open. {
    Tokens: [emma, did, not, pass, the, ball, to, janie, although, she, saw, that, she, was, open, .]
    Lemmatized tokens: [Emma, do, not, pass, the, ball, to, Janie, although, she, see, that, she, be, open, .]
    POS tags: [NNP, VBD-AUX, RB, VB, DT, NN, TO, NNP, IN, PRP, VBD, IN, PRP, VBD-AUX, JJ, .]
    NER tags: [PERSON, O, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [], [punct->15, nsubj->0, aux->1, neg->2, dobj->5, nmod:to->7, advcl->10], [], [det->4], [], [case->6], [], [], [mark->8, nsubj->9, ccomp->14], [], [], [], [mark->11, nsubj->12, cop->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is open, somebody migth pass the ball to person B.If person B sees that person C is open, person B might pass the ball to person C. {
    Tokens: [if, person, b, is, open, ,, somebody, migth, pass, the, ball, to, person, b.if, person, b, sees, that, person, c, is, open, ,, person, b, might, pass, the, ball, to, person, c.]
    Lemmatized tokens: [if, person, b, be, open, ,, somebody, migth, pass, the, ball, to, person, b.if, person, b, see, that, person, c, be, open, ,, person, b, might, pass, the, ball, to, person, c.]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, ,, NN, NN, VBP, DT, NN, TO, NN, JJ, NN, NN, VBZ, IN, NN, NN, VBD-AUX, JJ, ,, NN, NN, VBD-AUX, VB, DT, NN, TO, NN, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubj->2, cop->3], [], [], [compound->6], [xcomp->16, advcl->4, punct->5, nsubj->7], [], [nmod:to->15, det->9], [], [], [], [], [case->11, compound->12, amod->13, compound->14], [ccomp->21, punct->22, nsubj->10, parataxis->26], [], [], [compound->18], [], [mark->17, nsubj->19, cop->20], [], [], [compound->23], [], [nmod:to->31, nsubj->24, aux->25, dobj->28], [], [det->27], [], [], [case->29, compound->30]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who saw that the other player was open {
    Tokens: [who, saw, that, the, other, player, was, open]
    Lemmatized tokens: [who, see, that, the, other, player, be, open]
    POS tags: [WP, VBD, IN, DT, JJ, NN, VBD-AUX, JJ]
    NER tags: [O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, ccomp->7], [], [], [], [det->3, amod->4], [], [mark->2, nsubj->5, cop->6]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Joe saw his brother skiing on TV last night but the fool didn't recognize him. {
    Tokens: [joe, saw, his, brother, skiing, on, tv, last, night, but, the, fool, did, n't, recognize, him, .]
    Lemmatized tokens: [Joe, see, he, brother, skiing, on, tv, last, night, but, the, fool, do, not, recognize, he, .]
    POS tags: [NNP, VBD, PRP$, NN, NN, IN, NN, JJ, NN, CC, DT, NN, VBD-AUX, RB, VB, PRP, .]
    NER tags: [PERSON, O, O, O, O, O, O, DATE, DATE, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, TNI OFFSET P-1D, TNI OFFSET P-1D, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, punct->16, dobj->4, nmod:on->6, nmod:tmod->8, cc->9, conj:but->14], [], [], [nmod:poss->2, compound->3], [], [case->5], [], [amod->7], [], [], [det->10], [], [], [dobj->15, nsubj->11, aux->12, neg->13], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B sees person C and person B might not recognize person C, person B is a fool. If person B do sth in low temperature and person B doesn’t have a coat on, person B is a fool. Skiing on TV is doing sth in low temperature. {
    Tokens: [if, person, b, sees, person, c, and, person, b, might, not, recognize, person, c, ,, person, b, is, a, fool, ., if, person, b, do, sth, in, low, temperature, and, person, b, does, n't, have, a, coat, on, ,, person, b, is, a, fool, ., skiing, on, tv, is, doing, sth, in, low, temperature, .]
    Lemmatized tokens: [if, person, b, see, person, c, and, person, b, might, not, recognize, person, c, ,, person, b, be, a, fool, ., if, person, b, do, sth, in, low, temperature, and, person, b, do, not, have, a, coat, on, ,, person, b, be, a, fool, ., skiing, on, tv, be, do, sth, in, low, temperature, .]
    POS tags: [IN, NN, NN, VBZ, NN, NN, CC, NN, NN, VBD-AUX, RB, VB, NN, NN, ,, NN, NN, VBD-AUX, DT, NN, ., IN, NN, NN, VBD-AUX, NN, IN, JJ, NN, CC, NN, NN, VBD-AUX, RB, VBD-AUX, DT, NN, IN, ,, NN, NN, VBD-AUX, DT, NN, ., NN, IN, NN, VBD-AUX, VBG, NN, IN, JJ, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, ccomp->11], [], [compound->4, cc->6, conj:and->8], [], [], [compound->7], [], [], [nsubj->5, nsubj->8, aux->9, neg->10, dobj->13], [], [compound->12], [], [], [compound->15], [], [], [nsubj->16, cop->17, det->18, advcl->3, punct->20, punct->14], [], [], [], [compound->22], [nsubj->23, ccomp->34, mark->21], [nmod:in->28, nmod:in->31], [], [], [case->26, amod->27, cc->29, conj:and->31], [], [], [compound->30], [], [], [nsubj->25, aux->32, neg->33, dobj->36, nmod->37], [], [det->35], [], [], [], [compound->39], [], [], [advcl->24, nsubj->40, cop->41, det->42, punct->44, punct->38], [], [nmod:on->47], [], [case->46], [], [dobj->50, punct->54, nsubj->45, aux->48], [nmod:in->53], [], [], [case->51, amod->52], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who is the fool {
    Tokens: [who, is, the, fool]
    Lemmatized tokens: [who, be, the, fool]
    POS tags: [WP, VBD-AUX, DT, NN]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[cop->1, nsubj->3], [], [], [det->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Joe saw his brother skiing on TV last night but the fool didn't have a coat on. {
    Tokens: [joe, saw, his, brother, skiing, on, tv, last, night, but, the, fool, did, n't, have, a, coat, on, .]
    Lemmatized tokens: [Joe, see, he, brother, skiing, on, tv, last, night, but, the, fool, do, not, have, a, coat, on, .]
    POS tags: [NNP, VBD, PRP$, NN, NN, IN, NN, JJ, NN, CC, DT, NN, VBD-AUX, RB, VBD-AUX, DT, NN, IN, .]
    NER tags: [PERSON, O, O, O, O, O, O, DATE, DATE, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, TNI OFFSET P-1D, TNI OFFSET P-1D, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, punct->18, dobj->4, nmod:on->6, nmod:tmod->8, cc->9, conj:but->14], [], [], [nmod:poss->2, compound->3], [], [case->5], [], [amod->7], [], [], [det->10], [], [], [dobj->16, nmod->17, nsubj->11, aux->12, neg->13], [], [det->15], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B sees person C and person B might not recognize person C, person B is a fool. If person B do sth in low temperature and person B doesn’t have a coat on, person B is a fool. Skiing on TV is doing sth in low temperature. {
    Tokens: [if, person, b, sees, person, c, and, person, b, might, not, recognize, person, c, ,, person, b, is, a, fool, ., if, person, b, do, sth, in, low, temperature, and, person, b, does, n't, have, a, coat, on, ,, person, b, is, a, fool, ., skiing, on, tv, is, doing, sth, in, low, temperature, .]
    Lemmatized tokens: [if, person, b, see, person, c, and, person, b, might, not, recognize, person, c, ,, person, b, be, a, fool, ., if, person, b, do, sth, in, low, temperature, and, person, b, do, not, have, a, coat, on, ,, person, b, be, a, fool, ., skiing, on, tv, be, do, sth, in, low, temperature, .]
    POS tags: [IN, NN, NN, VBZ, NN, NN, CC, NN, NN, VBD-AUX, RB, VB, NN, NN, ,, NN, NN, VBD-AUX, DT, NN, ., IN, NN, NN, VBD-AUX, NN, IN, JJ, NN, CC, NN, NN, VBD-AUX, RB, VBD-AUX, DT, NN, IN, ,, NN, NN, VBD-AUX, DT, NN, ., NN, IN, NN, VBD-AUX, VBG, NN, IN, JJ, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, ccomp->11], [], [compound->4, cc->6, conj:and->8], [], [], [compound->7], [], [], [nsubj->5, nsubj->8, aux->9, neg->10, dobj->13], [], [compound->12], [], [], [compound->15], [], [], [nsubj->16, cop->17, det->18, advcl->3, punct->20, punct->14], [], [], [], [compound->22], [nsubj->23, ccomp->34, mark->21], [nmod:in->28, nmod:in->31], [], [], [case->26, amod->27, cc->29, conj:and->31], [], [], [compound->30], [], [], [nsubj->25, aux->32, neg->33, dobj->36, nmod->37], [], [det->35], [], [], [], [compound->39], [], [], [advcl->24, nsubj->40, cop->41, det->42, punct->44, punct->38], [], [nmod:on->47], [], [case->46], [], [dobj->50, punct->54, nsubj->45, aux->48], [nmod:in->53], [], [], [case->51, amod->52], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who is the fool {
    Tokens: [who, is, the, fool]
    Lemmatized tokens: [who, be, the, fool]
    POS tags: [WP, VBD-AUX, DT, NN]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[cop->1, nsubj->3], [], [], [det->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I put the heavy book on the table and it broke. {
    Tokens: [i, put, the, heavy, book, on, the, table, and, it, broke, .]
    Lemmatized tokens: [I, put, the, heavy, book, on, the, table, and, it, break, .]
    POS tags: [PRP, VBD, DT, JJ, NN, IN, DT, NN, CC, PRP, VBD, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->4, nmod:on->7, cc->8, conj:and->10, punct->11], [], [], [det->2, amod->3], [], [], [case->5, det->6], [], [], [nsubj->9], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If somebody puts thing B on thing C and thing B is heavy, thing C might break.  If somebody puts thing B on thing C and thing B is fragile, thing B might break.Butterfly wing is fragile. Heavy book is heavy. {
    Tokens: [if, somebody, puts, thing, b, on, thing, c, and, thing, b, is, heavy, ,, thing, c, might, break, ., if, somebody, puts, thing, b, on, thing, c, and, thing, b, is, fragile, ,, thing, b, might, break.butterfly, wing, is, fragile, ., heavy, book, is, heavy, .]
    Lemmatized tokens: [if, somebody, put, thing, b, on, thing, c, and, thing, b, be, heavy, ,, thing, c, might, break, ., if, somebody, put, thing, b, on, thing, c, and, thing, b, be, fragile, ,, thing, b, might, break.butterfly, wing, be, fragile, ., heavy, book, be, heavy, .]
    POS tags: [IN, NN, VBZ, NN, NN, IN, NN, NN, CC, NN, NN, VBD-AUX, JJ, ,, NN, NN, VBD-AUX, VB, ., IN, NN, VBZ, NN, NN, IN, NN, NN, CC, NN, NN, VBD-AUX, JJ, ,, NN, NN, VBD-AUX, RB, NN, VBD-AUX, JJ, ., JJ, NN, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [mark->0, nsubj->1, dobj->4, cc->8, conj:and->12], [], [compound->3, nmod:on->7], [], [], [case->5, compound->6], [], [], [compound->9], [], [nsubj->10, cop->11], [], [], [compound->14], [], [nsubj->15, aux->16, advcl->2, punct->18, advcl->12, punct->13], [], [], [], [dobj->23, cc->27, conj:and->31, mark->19, nsubj->20], [], [compound->22, nmod:on->26], [], [], [case->24, compound->25], [], [], [compound->28], [], [nsubj->29, cop->30], [], [], [compound->33], [advcl->21, advcl->31, punct->32, nsubj->34, advmod->36], [], [], [], [nsubj->37, cop->38, punct->40, dep->35], [], [], [amod->41], [], [nsubj->42, cop->43, punct->45], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What broke {
    Tokens: [what, broke]
    Lemmatized tokens: [what, break]
    POS tags: [WDT, VBD]
    NER tags: [O, O]
    NER values: [null, null]
    Dependency children: [[], [nsubj->0]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: I put the butterfly wing on the table and it broke. {
    Tokens: [i, put, the, butterfly, wing, on, the, table, and, it, broke, .]
    Lemmatized tokens: [I, put, the, butterfly, wing, on, the, table, and, it, break, .]
    POS tags: [PRP, VBD, DT, NN, NN, IN, DT, NN, CC, PRP, VBD, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->4, nmod:on->7, cc->8, conj:and->10, punct->11], [], [], [det->2, compound->3], [], [], [case->5, det->6], [], [], [nsubj->9], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If somebody puts thing B on thing C and thing B is heavy, thing C might break.  If somebody puts thing B on thing C and thing B is fragile, thing B might break.Butterfly wing is fragile. Heavy book is heavy. {
    Tokens: [if, somebody, puts, thing, b, on, thing, c, and, thing, b, is, heavy, ,, thing, c, might, break, ., if, somebody, puts, thing, b, on, thing, c, and, thing, b, is, fragile, ,, thing, b, might, break.butterfly, wing, is, fragile, ., heavy, book, is, heavy, .]
    Lemmatized tokens: [if, somebody, put, thing, b, on, thing, c, and, thing, b, be, heavy, ,, thing, c, might, break, ., if, somebody, put, thing, b, on, thing, c, and, thing, b, be, fragile, ,, thing, b, might, break.butterfly, wing, be, fragile, ., heavy, book, be, heavy, .]
    POS tags: [IN, NN, VBZ, NN, NN, IN, NN, NN, CC, NN, NN, VBD-AUX, JJ, ,, NN, NN, VBD-AUX, VB, ., IN, NN, VBZ, NN, NN, IN, NN, NN, CC, NN, NN, VBD-AUX, JJ, ,, NN, NN, VBD-AUX, RB, NN, VBD-AUX, JJ, ., JJ, NN, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [mark->0, nsubj->1, dobj->4, cc->8, conj:and->12], [], [compound->3, nmod:on->7], [], [], [case->5, compound->6], [], [], [compound->9], [], [nsubj->10, cop->11], [], [], [compound->14], [], [nsubj->15, aux->16, advcl->2, punct->18, advcl->12, punct->13], [], [], [], [dobj->23, cc->27, conj:and->31, mark->19, nsubj->20], [], [compound->22, nmod:on->26], [], [], [case->24, compound->25], [], [], [compound->28], [], [nsubj->29, cop->30], [], [], [compound->33], [advcl->21, advcl->31, punct->32, nsubj->34, advmod->36], [], [], [], [nsubj->37, cop->38, punct->40, dep->35], [], [], [amod->41], [], [nsubj->42, cop->43, punct->45], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: What broke {
    Tokens: [what, broke]
    Lemmatized tokens: [what, break]
    POS tags: [WDT, VBD]
    NER tags: [O, O]
    NER values: [null, null]
    Dependency children: [[], [nsubj->0]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Madonna fired her trainer because she slept with her boyfriend. {
    Tokens: [madonna, fired, her, trainer, because, she, slept, with, her, boyfriend, .]
    Lemmatized tokens: [Madonna, fire, she, trainer, because, she, sleep, with, she, boyfriend, .]
    POS tags: [NNP, VBD, PRP$, NN, IN, PRP, VBD, IN, PRP$, NN, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, advcl->6, punct->10], [], [nmod:poss->2], [], [], [mark->4, nsubj->5, nmod:with->9], [], [], [case->7, nmod:poss->8], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who couldn't stand whose boyfriend {
    Tokens: [who, could, n't, stand, whose, boyfriend]
    Lemmatized tokens: [who, could, not, stand, whose, boyfriend]
    POS tags: [WP, VBD-AUX, RB, VB, WP$, NN]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, aux->1, neg->2, dobj->5], [], [nmod:poss->4]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who slept with whose boyfriend {
    Tokens: [who, slept, with, whose, boyfriend]
    Lemmatized tokens: [who, sleep, with, whose, boyfriend]
    POS tags: [WP, VBD, IN, WP$, NN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2], [acl:relcl->4], [], [nmod:poss->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Madonna fired her trainer because she couldn't stand her boyfriend. {
    Tokens: [madonna, fired, her, trainer, because, she, could, n't, stand, her, boyfriend, .]
    Lemmatized tokens: [Madonna, fire, she, trainer, because, she, could, not, stand, she, boyfriend, .]
    POS tags: [NNP, VBD, PRP$, NN, IN, PRP, VBD-AUX, RB, VB, PRP$, NN, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->3, advcl->8, punct->11], [], [nmod:poss->2], [], [], [], [], [mark->4, nsubj->5, aux->6, neg->7, dobj->10], [], [nmod:poss->9], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who couldn't stand whose boyfriend {
    Tokens: [who, could, n't, stand, whose, boyfriend]
    Lemmatized tokens: [who, could, not, stand, whose, boyfriend]
    POS tags: [WP, VBD-AUX, RB, VB, WP$, NN]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [], [], [nsubj->0, aux->1, neg->2, dobj->5], [], [nmod:poss->4]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who slept with whose boyfriend {
    Tokens: [who, slept, with, whose, boyfriend]
    Lemmatized tokens: [who, sleep, with, whose, boyfriend]
    POS tags: [WP, VBD, IN, WP$, NN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [nsubj->0, dobj->2], [acl:relcl->4], [], [nmod:poss->3]]
  }



  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Carol believed that Rebecca suspected  that she had stolen the watch. {
    Tokens: [carol, believed, that, rebecca, suspected, that, she, had, stolen, the, watch, .]
    Lemmatized tokens: [Carol, believe, that, Rebecca, suspect, that, she, have, steal, the, watch, .]
    POS tags: [NNP, VBD, IN, NNP, VBD, IN, PRP, VBD-AUX, VBN, DT, NN, .]
    NER tags: [O, O, O, PERSON, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, ccomp->4, punct->11], [], [], [mark->2, nsubj->3, ccomp->8], [], [], [], [mark->5, nsubj->6, aux->7, dobj->10], [], [det->9], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B suspect somebody do sth, somebody might be suspected of doing sth. If person B regrets somebody do sth, person B might doing sth. {
    Tokens: [if, person, b, suspect, somebody, do, sth, ,, somebody, might, be, suspected, of, doing, sth, ., if, person, b, regrets, somebody, do, sth, ,, person, b, might, doing, sth, .]
    Lemmatized tokens: [if, person, b, suspect, somebody, do, sth, ,, somebody, might, be, suspect, of, do, sth, ., if, person, b, regret, somebody, do, sth, ,, person, b, might, do, sth, .]
    POS tags: [IN, NN, NN, JJ, NN, VBD-AUX, NN, ,, NN, VBD-AUX, VBD-AUX, VBN, IN, VBG, NN, ., IN, NN, NN, VBZ, NN, VBD-AUX, NN, ,, NN, NN, VBD-AUX, VBG, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1, dep->4], [], [amod->3], [mark->0, nsubj->2, dobj->6], [], [], [], [], [], [punct->15, advcl->5, punct->7, nsubjpass->8, aux->9, auxpass->10, advcl->13], [], [mark->12, dobj->14], [], [], [], [], [compound->17], [nsubj->18, ccomp->21, mark->16], [], [nsubj->20, dobj->22], [], [], [], [compound->24], [advcl->19, punct->23, nsubj->25, xcomp->27, punct->29], [dobj->28], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who is suspected of stealing the watch / Who stole the watch {
    Tokens: [who, is, suspected, of, stealing, the, watch, /, who, stole, the, watch]
    Lemmatized tokens: [who, be, suspect, of, steal, the, watch, /, who, steal, the, watch]
    POS tags: [WP, VBD-AUX, VBN, IN, VBG, DT, NN, :, WP, VBD, DT, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubjpass->0, auxpass->1, advcl->4], [], [mark->3, dobj->6], [], [det->5, dep->9], [], [], [punct->7, nsubj->8, dobj->11], [], [det->10]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Carol believed that Rebecca  regretted that she had stolen the watch. {
    Tokens: [carol, believed, that, rebecca, regretted, that, she, had, stolen, the, watch, .]
    Lemmatized tokens: [Carol, believe, that, Rebecca, regret, that, she, have, steal, the, watch, .]
    POS tags: [NNP, VBD, IN, NNP, VBD, IN, PRP, VBD-AUX, VBN, DT, NN, .]
    NER tags: [O, O, O, PERSON, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, ccomp->4, punct->11], [], [], [mark->2, nsubj->3, ccomp->8], [], [], [], [mark->5, nsubj->6, aux->7, dobj->10], [], [det->9], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B suspect somebody do sth, somebody might be suspected of doing sth. If person B regrets somebody do sth, person B might doing sth. {
    Tokens: [if, person, b, suspect, somebody, do, sth, ,, somebody, might, be, suspected, of, doing, sth, ., if, person, b, regrets, somebody, do, sth, ,, person, b, might, doing, sth, .]
    Lemmatized tokens: [if, person, b, suspect, somebody, do, sth, ,, somebody, might, be, suspect, of, do, sth, ., if, person, b, regret, somebody, do, sth, ,, person, b, might, do, sth, .]
    POS tags: [IN, NN, NN, JJ, NN, VBD-AUX, NN, ,, NN, VBD-AUX, VBD-AUX, VBN, IN, VBG, NN, ., IN, NN, NN, VBZ, NN, VBD-AUX, NN, ,, NN, NN, VBD-AUX, VBG, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1, dep->4], [], [amod->3], [mark->0, nsubj->2, dobj->6], [], [], [], [], [], [punct->15, advcl->5, punct->7, nsubjpass->8, aux->9, auxpass->10, advcl->13], [], [mark->12, dobj->14], [], [], [], [], [compound->17], [nsubj->18, ccomp->21, mark->16], [], [nsubj->20, dobj->22], [], [], [], [compound->24], [advcl->19, punct->23, nsubj->25, xcomp->27, punct->29], [dobj->28], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who is suspected of stealing the watch / Who stole the watch {
    Tokens: [who, is, suspected, of, stealing, the, watch, /, who, stole, the, watch]
    Lemmatized tokens: [who, be, suspect, of, steal, the, watch, /, who, steal, the, watch]
    POS tags: [WP, VBD-AUX, VBN, IN, VBG, DT, NN, :, WP, VBD, DT, NN]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [nsubjpass->0, auxpass->1, advcl->4], [], [mark->3, dobj->6], [], [det->5, dep->9], [], [], [punct->7, nsubj->8, dobj->11], [], [det->10]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: This book introduced Shakespeare to Ovid; it was a major influence on his writing. {
    Tokens: [this, book, introduced, shakespeare, to, ovid, ;, it, was, a, major, influence, on, his, writing, .]
    Lemmatized tokens: [this, book, introduce, Shakespeare, to, Ovid, ;, it, be, a, major, influence, on, he, writing, .]
    POS tags: [DT, NN, VBD, NNP, TO, NNP, :, PRP, VBD-AUX, DT, JJ, NN, IN, PRP$, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [punct->15, nsubj->1, dobj->3, nmod:to->5, punct->6, parataxis->11], [], [], [case->4], [], [], [], [], [], [nsubj->7, cop->8, det->9, amod->10, nmod:on->14], [], [], [case->12, nmod:poss->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is born before person C, person C’s writing might be influenced. Ovid is born before Shakespeare. Shakespeare is born before Goethe. {
    Tokens: [if, person, b, is, born, before, person, c, ,, person, c, 's, writing, might, be, influenced, ., ovid, is, born, before, shakespeare, ., shakespeare, is, born, before, goethe, .]
    Lemmatized tokens: [if, person, b, be, bear, before, person, c, ,, person, c, 's, writing, might, be, influence, ., Ovid, be, bear, before, Shakespeare, ., Shakespeare, be, bear, before, Goethe, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBN, IN, NN, NN, ,, NN, NN, POS, NN, VBD-AUX, VBD-AUX, VBN, ., NNP, VBD-AUX, VBN, IN, NNP, ., NNP, VBD-AUX, VBN, IN, NNP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, LOCATION, O, O, O, O, O, PERSON, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubjpass->2, auxpass->3, nmod:before->7], [], [], [case->5, compound->6], [], [], [compound->9, case->11], [], [nmod:poss->10], [], [], [punct->16, advcl->4, punct->8, nsubjpass->12, aux->13, auxpass->14], [], [], [], [nmod:before->21, punct->22, nsubjpass->17, auxpass->18], [], [case->20], [], [], [], [punct->28, nsubjpass->23, auxpass->24, nmod:before->27], [], [case->26], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whose writing was influenced {
    Tokens: [whose, writing, was, influenced]
    Lemmatized tokens: [whose, writing, be, influence]
    POS tags: [WP$, NN, VBD-AUX, VBN]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [nmod:poss->0], [], [nsubjpass->1, auxpass->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: This book introduced Shakespeare to Goethe; it was a major influence on his writing. {
    Tokens: [this, book, introduced, shakespeare, to, goethe, ;, it, was, a, major, influence, on, his, writing, .]
    Lemmatized tokens: [this, book, introduce, Shakespeare, to, Goethe, ;, it, be, a, major, influence, on, he, writing, .]
    POS tags: [DT, NN, VBD, NNP, TO, NNP, :, PRP, VBD-AUX, DT, JJ, NN, IN, PRP$, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [punct->15, nsubj->1, dobj->3, nmod:to->5, punct->6, parataxis->11], [], [], [case->4], [], [], [], [], [], [nsubj->7, cop->8, det->9, amod->10, nmod:on->14], [], [], [case->12, nmod:poss->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B is born before person C, person C’s writing might be influenced. Ovid is born before Shakespeare. Shakespeare is born before Goethe. {
    Tokens: [if, person, b, is, born, before, person, c, ,, person, c, 's, writing, might, be, influenced, ., ovid, is, born, before, shakespeare, ., shakespeare, is, born, before, goethe, .]
    Lemmatized tokens: [if, person, b, be, bear, before, person, c, ,, person, c, 's, writing, might, be, influence, ., Ovid, be, bear, before, Shakespeare, ., Shakespeare, be, bear, before, Goethe, .]
    POS tags: [IN, NN, NN, VBD-AUX, VBN, IN, NN, NN, ,, NN, NN, POS, NN, VBD-AUX, VBD-AUX, VBN, ., NNP, VBD-AUX, VBN, IN, NNP, ., NNP, VBD-AUX, VBN, IN, NNP, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, LOCATION, O, O, O, O, O, PERSON, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [], [mark->0, nsubjpass->2, auxpass->3, nmod:before->7], [], [], [case->5, compound->6], [], [], [compound->9, case->11], [], [nmod:poss->10], [], [], [punct->16, advcl->4, punct->8, nsubjpass->12, aux->13, auxpass->14], [], [], [], [nmod:before->21, punct->22, nsubjpass->17, auxpass->18], [], [case->20], [], [], [], [punct->28, nsubjpass->23, auxpass->24, nmod:before->27], [], [case->26], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Whose writing was influenced {
    Tokens: [whose, writing, was, influenced]
    Lemmatized tokens: [whose, writing, be, influence]
    POS tags: [WP$, NN, VBD-AUX, VBN]
    NER tags: [O, O, O, O]
    NER values: [null, null, null, null]
    Dependency children: [[], [nmod:poss->0], [], [nsubjpass->1, auxpass->2]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: This book introduced Shakespeare to Ovid; it was a fine selection of his writing. {
    Tokens: [this, book, introduced, shakespeare, to, ovid, ;, it, was, a, fine, selection, of, his, writing, .]
    Lemmatized tokens: [this, book, introduce, Shakespeare, to, Ovid, ;, it, be, a, fine, selection, of, he, writing, .]
    POS tags: [DT, NN, VBD, NNP, TO, NNP, :, PRP, VBD-AUX, DT, JJ, NN, IN, PRP$, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [punct->15, nsubj->1, dobj->3, nmod:to->5, punct->6, parataxis->11], [], [], [case->4], [], [], [], [], [], [nsubj->7, cop->8, det->9, amod->10, nmod:of->14], [], [], [case->12, nmod:poss->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Fine selection of whose writing {
    Tokens: [fine, selection, of, whose, writing]
    Lemmatized tokens: [fine, selection, of, whose, write]
    POS tags: [JJ, NN, IN, WP$, VBG]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [amod->0, nmod:of->3], [], [case->2, amod->4], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: This book introduced Shakespeare to Goethe; it was a fine selection of his writing. {
    Tokens: [this, book, introduced, shakespeare, to, goethe, ;, it, was, a, fine, selection, of, his, writing, .]
    Lemmatized tokens: [this, book, introduce, Shakespeare, to, Goethe, ;, it, be, a, fine, selection, of, he, writing, .]
    POS tags: [DT, NN, VBD, NNP, TO, NNP, :, PRP, VBD-AUX, DT, JJ, NN, IN, PRP$, NN, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [det->0], [punct->15, nsubj->1, dobj->3, nmod:to->5, punct->6, parataxis->11], [], [], [case->4], [], [], [], [], [], [nsubj->7, cop->8, det->9, amod->10, nmod:of->14], [], [], [case->12, nmod:poss->13], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Fine selection of whose writing {
    Tokens: [fine, selection, of, whose, writing]
    Lemmatized tokens: [fine, selection, of, whose, write]
    POS tags: [JJ, NN, IN, WP$, VBG]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [amod->0, nmod:of->3], [], [case->2, amod->4], []]
  }



  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Alice looked for her friend Jade in the crowd. Since she always has good luck, Alice spotted her quickly. {
    Tokens: [alice, looked, for, her, friend, jade, in, the, crowd, ., since, she, always, has, good, luck, ,, alice, spotted, her, quickly, .]
    Lemmatized tokens: [Alice, look, for, she, friend, Jade, in, the, crowd, ., since, she, always, have, good, luck, ,, Alice, spot, she, quickly, .]
    POS tags: [NNP, VBD, IN, PRP$, NN, NNP, IN, DT, NN, ., IN, PRP, RB, VBD-AUX, JJ, NN, ,, NNP, VBD, PRP$, RB, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:for->5, punct->9], [], [], [], [case->2, nmod:poss->3, compound->4, nmod:in->8], [], [], [case->6, det->7], [], [], [], [], [advmod->12, dobj->15, mark->10, nsubj->11], [], [amod->14], [], [], [advcl->13, punct->16, nsubj->17, dobj->19, advmod->20, punct->21], [], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If  person B has good luck or person C is obvious, person B spots person C quickly {
    Tokens: [if, person, b, has, good, luck, or, person, c, is, obvious, ,, person, b, spots, person, c, quickly]
    Lemmatized tokens: [if, person, b, have, good, luck, or, person, c, be, obvious, ,, person, b, spot, person, c, quickly]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, NN, CC, NN, NN, VBD-AUX, JJ, ,, NN, NN, NNS, NN, NN, RB]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, advmod->17, nsubj->2, dobj->5, dobj->8], [], [amod->4, cc->6, conj:or->8, acl:relcl->10, punct->11, appos->14], [], [], [compound->7], [], [cop->9], [], [], [], [dep->16, compound->12, compound->13], [], [compound->15], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B wears a red turban,  person B is obvious. {
    Tokens: [if, person, b, wears, a, red, turban, ,, person, b, is, obvious, .]
    Lemmatized tokens: [if, person, b, wear, a, red, turban, ,, person, b, be, obvious, .]
    POS tags: [IN, NN, NN, VBZ, DT, JJ, NN, ,, NN, NN, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->6], [], [], [det->4, amod->5], [], [], [compound->8], [], [advcl->3, punct->7, nsubj->9, cop->10, punct->12], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who always has good luck {
    Tokens: [who, always, has, good, luck]
    Lemmatized tokens: [who, always, have, good, luck]
    POS tags: [WP, RB, VBD-AUX, JJ, NN]
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, advmod->1, dobj->4], [], [amod->3]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Alice looked for her friend Jade in the crowd. Since she always wears a red turban, Alice spotted her quickly. {
    Tokens: [alice, looked, for, her, friend, jade, in, the, crowd, ., since, she, always, wears, a, red, turban, ,, alice, spotted, her, quickly, .]
    Lemmatized tokens: [Alice, look, for, she, friend, Jade, in, the, crowd, ., since, she, always, wear, a, red, turban, ,, Alice, spot, she, quickly, .]
    POS tags: [NNP, VBD, IN, PRP$, NN, NNP, IN, DT, NN, ., IN, PRP, RB, VBZ, DT, JJ, NN, ,, NNP, VBD, PRP$, RB, .]
    NER tags: [PERSON, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [nsubj->0, nmod:for->5, punct->9], [], [], [], [case->2, nmod:poss->3, compound->4, nmod:in->8], [], [], [case->6, det->7], [], [], [], [], [advmod->12, dobj->16, mark->10, nsubj->11], [], [], [det->14, amod->15], [], [], [advcl->13, punct->17, nsubj->18, dobj->20, advmod->21, punct->22], [], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If  person B has good luck or person C is obvious, person B spots person C quickly {
    Tokens: [if, person, b, has, good, luck, or, person, c, is, obvious, ,, person, b, spots, person, c, quickly]
    Lemmatized tokens: [if, person, b, have, good, luck, or, person, c, be, obvious, ,, person, b, spot, person, c, quickly]
    POS tags: [IN, NN, NN, VBD-AUX, JJ, NN, CC, NN, NN, VBD-AUX, JJ, ,, NN, NN, NNS, NN, NN, RB]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, advmod->17, nsubj->2, dobj->5, dobj->8], [], [amod->4, cc->6, conj:or->8, acl:relcl->10, punct->11, appos->14], [], [], [compound->7], [], [cop->9], [], [], [], [dep->16, compound->12, compound->13], [], [compound->15], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: If person B wears a red turban,  person B is obvious. {
    Tokens: [if, person, b, wears, a, red, turban, ,, person, b, is, obvious, .]
    Lemmatized tokens: [if, person, b, wear, a, red, turban, ,, person, b, be, obvious, .]
    POS tags: [IN, NN, NN, VBZ, DT, JJ, NN, ,, NN, NN, VBD-AUX, JJ, .]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [compound->1], [mark->0, nsubj->2, dobj->6], [], [], [det->4, amod->5], [], [], [compound->8], [], [advcl->3, punct->7, nsubj->9, cop->10, punct->12], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who always wears a red turban {
    Tokens: [who, always, wears, a, red, turban]
    Lemmatized tokens: [who, always, wear, a, red, turban]
    POS tags: [WP, RB, VBZ, DT, JJ, NN]
    NER tags: [O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null]
    Dependency children: [[], [], [nsubj->0, advmod->1, dobj->5], [], [], [det->3, amod->4]]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: During a game of tag, Ethan chased Luke because he was "it". {
    Tokens: [during, a, game, of, tag, ,, ethan, chased, luke, because, he, was, ``, it, '', .]
    Lemmatized tokens: [during, a, game, of, tag, ,, Ethan, chase, Luke, because, he, be, ``, it, '', .]
    POS tags: [IN, DT, NN, IN, NN, ,, NNP, VBD, NNP, IN, PRP, VBD-AUX, ``, PRP, '', .]
    NER tags: [O, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [case->0, det->1, nmod:of->4], [], [case->3], [], [], [punct->15, nmod:during->2, punct->5, nsubj->6, dobj->8, advcl->13], [], [], [], [], [], [mark->9, nsubj->10, cop->11, punct->12, punct->14], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: During a game of tag, if person B is a 'it', person B might chase somebody and somebody might run from person B. {
    Tokens: [during, a, game, of, tag, ,, if, person, b, is, a, `, it, ', ,, person, b, might, chase, somebody, and, somebody, might, run, from, person, b.]
    Lemmatized tokens: [during, a, game, of, tag, ,, if, person, b, be, a, `, it, ', ,, person, b, might, chase, somebody, and, somebody, might, run, from, person, B.]
    POS tags: [IN, DT, NN, IN, NN, ,, IN, NN, NN, VBD-AUX, DT, ``, PRP, '', ,, NN, NN, VBD-AUX, VB, NN, CC, NN, VBD-AUX, VB, IN, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [case->0, det->1, nmod:of->4], [], [case->3], [], [], [], [compound->7], [], [mark->6, nsubj->8, cop->9, punct->11, dep->12, punct->13], [], [], [], [], [], [compound->15], [], [nsubj->16, aux->17, nmod:during->2, dobj->19, punct->5, dobj->21, advcl->10, punct->14], [cc->20, conj:and->21, acl:relcl->23], [], [], [], [aux->22, nmod:from->26], [], [], [case->24, compound->25]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was "it" {
    Tokens: [who, was, ``, it, '']
    Lemmatized tokens: [who, be, ``, it, '']
    POS tags: [WP, VBD-AUX, ``, PRP, '']
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[cop->1, punct->2, nsubj->3, punct->4], [], [], [], []]
  }


  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: During a game of tag, Ethan ran from Luke because he was "it". {
    Tokens: [during, a, game, of, tag, ,, ethan, ran, from, luke, because, he, was, ``, it, '', .]
    Lemmatized tokens: [during, a, game, of, tag, ,, Ethan, run, from, Luke, because, he, be, ``, it, '', .]
    POS tags: [IN, DT, NN, IN, NN, ,, NNP, VBD, IN, NNP, IN, PRP, VBD-AUX, ``, PRP, '', .]
    NER tags: [O, O, O, O, O, O, PERSON, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [case->0, det->1, nmod:of->4], [], [case->3], [], [], [punct->16, nmod:during->2, punct->5, nsubj->6, nmod:from->9, advcl->14], [], [case->8], [], [], [], [], [punct->15, mark->10, nsubj->11, cop->12, punct->13], [], []]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: During a game of tag, if person B is a 'it', person B might chase somebody and somebody might run from person B. {
    Tokens: [during, a, game, of, tag, ,, if, person, b, is, a, `, it, ', ,, person, b, might, chase, somebody, and, somebody, might, run, from, person, b.]
    Lemmatized tokens: [during, a, game, of, tag, ,, if, person, b, be, a, `, it, ', ,, person, b, might, chase, somebody, and, somebody, might, run, from, person, B.]
    POS tags: [IN, DT, NN, IN, NN, ,, IN, NN, NN, VBD-AUX, DT, ``, PRP, '', ,, NN, NN, VBD-AUX, VB, NN, CC, NN, VBD-AUX, VB, IN, NN, NNP]
    NER tags: [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, O]
    NER values: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
    Dependency children: [[], [], [case->0, det->1, nmod:of->4], [], [case->3], [], [], [], [compound->7], [], [mark->6, nsubj->8, cop->9, punct->11, dep->12, punct->13], [], [], [], [], [], [compound->15], [], [nsubj->16, aux->17, nmod:during->2, dobj->19, punct->5, dobj->21, advcl->10, punct->14], [cc->20, conj:and->21, acl:relcl->23], [], [], [], [aux->22, nmod:from->26], [], [], [case->24, compound->25]]
  }

  Parser.parse: parse {
    Parser.ensureExecuted 
  }
  Parser.setEvaluation: 0 candidates 
  Example: Who was "it" {
    Tokens: [who, was, ``, it, '']
    Lemmatized tokens: [who, be, ``, it, '']
    POS tags: [WP, VBD-AUX, ``, PRP, '']
    NER tags: [O, O, O, O, O]
    NER values: [null, null, null, null, null]
    Dependency children: [[cop->1, punct->2, nsubj->3, punct->4], [], [], [], []]
  }

