(declare-sort person)
(declare-const Paul person)
(declare-const George person)
(declare-const he person)
(declare-rel successful (person ))
(declare-rel try (person ))
(declare-rel call (person person ))
(declare-rel available (person ))
(assert (not (= Paul George)))
(assert (not (= Paul he)))
(assert (not (= George he)))
(assert (forall ((x person)) (or (= x Paul) (= x George) (= x he) )))
(assert (forall ((a person) (b person) (c person) ) (=> (and (not (= a b)) (not (= a c)) (not (= b c)) ) (=> (and (try b ) (call b c ) ) (and (successful b ) (available c ) ) ))))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (=> (and (successful a ) (available b ) ) (and (try a ) (call a b ) ) ))))
(assert (= (successful Paul) (and (not (successful George)) (not (successful he)) )))
(assert (= (successful George) (and (not (successful Paul)) (not (successful he)) )))
(assert (= (successful he) (and (not (successful Paul)) (not (successful George)) )))
(assert (try Paul ))
(assert (call Paul George ))
(assert (not (successful Paul)))
(check-sat)
