(declare-sort thing)
(declare-const personal_somebody_problem thing)
(declare-const personal_problem thing)
(declare-const know thing)
(declare-const personal_b_problem thing)
(declare-sort person)
(declare-const nosy person)
(assert (not (= personal_somebody_problem personal_problem)))
(assert (not (= personal_somebody_problem know)))
(assert (not (= personal_somebody_problem personal_b_problem)))
(assert (not (= personal_problem know)))
(assert (not (= personal_problem personal_b_problem)))
(assert (not (= know personal_b_problem)))
(assert (not (= know nosy)))
(assert (forall ((x thing)) (or (= x personal_somebody_problem) (= x personal_problem) (= x know) (= x personal_b_problem) )))
(assert (forall ((x person)) (or (= x know) (= x nosy) )))
(declare-rel know_about (person thing ))
(declare-rel know_1 (person ))
(declare-rel nosy (person ))
(declare-rel indiscreet (person ))
(declare-rel posses_tt (thing thing))
(declare-rel posses_pt (person thing))
(assert (forall ((a person) ) (= (nosy a)  (exists ((b person)) (and (know_about a personal_problem) (posses_pt b personal_problem) ) ))))
(assert (forall ((b person) ) (= (indiscreet b)  (exists ((a person)) (and (know_about a personal_problem) (posses_pt b personal_problem) ) ))))
(assert (forall ((b person) ) (= (know_about b problem ) (know_1 b ))))
(assert (= (nosy know ) (not (nosy nosy )) ))
(assert (= (nosy nosy ) (not (nosy know )) ))
(assert (know_about Susan personal_problem )   )
(assert (not (nosy know)))
(check-sat)
