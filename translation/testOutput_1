(declare-sort thing)
(declare-const help thing)
(declare-sort person)
(declare-const Joan person)
(declare-const Susan person)
(declare-const she person)
(declare-rel make (person ))
(declare-rel thank (person person ))
(declare-rel give_to (person thing person ))
(declare-rel receive_from (person thing person ))
(declare-rel receive (person thing ))
(assert (not (= Joan Susan)))
(assert (not (= Joan she)))
(assert (not (= Susan she)))
(assert (forall ((x thing)) (= x help)))
(assert (forall ((x person)) (or (= x Joan) (= x Susan) (= x she) )))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (=> (or (give_to a help b ) (receive_from b help a ) ) (and (make b ) (thank b a ) ) ))))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (=> (and (make a ) (thank a b ) ) (or (give_to b help a ) (receive_from a help b ) ) ))))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (=> (give_to a help b ) (receive_from b help a ) ))))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (=> (receive_from a help b ) (give_to b help a ) ))))
(assert (forall ((a person) ) (=> (=> (receive a help ) (receive a help ) )))
(assert (forall ((a person) ) (=> (=> (receive a help ) (receive a help ) )))
(assert (= (give Joan help) (not (give Susan help)) ))
(assert (= (give Susan help) (not (give Joan help)) ))
(assert (make Joan ))
(assert (thank Joan Susan ))
(assert (not (give Joan help)))
(check-sat)
