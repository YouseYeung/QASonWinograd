(declare-sort thing)
(declare-sort person)
(declare-const Noun_woman person)
(declare-const Noun_girl person)
(declare-const Noun_she_p person)
(declare-const Noun_she_chest thing)
(declare-const Noun_she_t thing)
(declare-const Noun_chest thing)
(assert (not (= Noun_woman Noun_girl)))
(assert (not (= Noun_woman Noun_she_p)))
(assert (not (= Noun_girl Noun_she_p)))
(assert (not (= Noun_she_chest Noun_she_t)))
(assert (not (= Noun_she_chest Noun_chest)))
(assert (not (= Noun_she_t Noun_chest)))
(assert (forall ((x person)) (or (= x Noun_woman) (= x Noun_girl) (= x Noun_she_p) )))
(assert (forall ((x thing)) (or (= x Noun_she_chest) (= x Noun_she_t) (= x Noun_chest) )))
(declare-rel Verb_reject (person ))
(declare-rel Verb_reject_1 (person ))
(declare-rel Verb_not_reject (person ))
(declare-rel Verb_hold (person person ))
(declare-rel Verb_hold_1 (person ))
(declare-rel Verb_hold_2 (person person ))
(declare-rel Verb_not_hold (person person ))
(declare-rel Verb_will (person person ))
(declare-rel Verb_will_1 (person ))
(declare-rel Verb_will_2 (person person ))
(declare-rel Verb_not_will (person person ))
(declare-rel Verb_hold_against (person person thing ))
(declare-rel Verb_not_hold_against (person person thing ))
(declare-rel Verb_belong_to (thing person ))
(declare-rel Verb_belong_1 (thing ))
(declare-rel Verb_belong_2 (thing person ))
(declare-rel Verb_not_belong_to (thing person ))
(declare-rel Verb_possess_pt (person thing))
(declare-rel Verb_possess_tt (thing thing))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (= (Verb_hold b a)  (Verb_reject a) ))))
(assert (forall ((b person) ) (= (Verb_reject b ) (not (Verb_not_reject b )))))
(assert (forall ((b person) (c person) ) (= (Verb_hold b c ) (not (Verb_not_hold b c )))))
(assert (forall ((a person) ) (= (Verb_will a)  (Verb_reject a) )))
(assert (forall ((b person) ) (= (Verb_reject b ) (not (Verb_not_reject b )))))
(assert (forall ((b person) (c person) ) (= (Verb_will b c ) (not (Verb_not_will b c )))))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (= (and (Verb_hold_against a b Noun_chest) (Verb_possess_pt Noun_she_p Noun_chest) (Verb_possess_tt Noun_she_t Noun_chest)  )  (Verb_belong_to Noun_chest a) ))))
(assert (forall ((b person) (c person) ) (= (Verb_hold_against b c Noun_chest ) (not (Verb_not_hold_against b c Noun_chest )))))
(assert (forall ((c person) ) (= (Verb_belong_to Noun_chest c ) (not (Verb_not_belong_to Noun_chest c )))))
(assert (forall ((b person) ) (= (Verb_reject b ) (Verb_reject_1 b ))))
(assert (forall ((b person) (c person) ) (=> (Verb_hold b c ) (Verb_hold_1 b ))))
(assert (forall ((b person) (c person) ) (= (Verb_hold b c ) (Verb_hold_2 b c ))))
(assert (forall ((b person) (c person) ) (=> (Verb_will b c ) (Verb_will_1 b ))))
(assert (forall ((b person) (c person) ) (= (Verb_will b c ) (Verb_will_2 b c ))))
(assert (forall ((c person) ) (=> (Verb_belong_to Noun_chest c ) (Verb_belong_1 Noun_chest ))))
(assert (forall ((c person) ) (= (Verb_belong_to Noun_chest c ) (Verb_belong_2 Noun_chest c ))))
(assert (and (Verb_hold_against Noun_woman Noun_girl Noun_chest )    (Verb_possess_pt Noun_she_p Noun_chest) (Verb_possess_tt Noun_she_t Noun_chest) ))
(assert (not (Verb_possess_tt Noun_girl Noun_chest))
(check-sat)
