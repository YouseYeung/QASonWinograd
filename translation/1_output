(declare-sort person)
(declare-const I person)
(declare-sort thing)
(declare-const water thing)
(declare-const bottle thing)
(declare-const cup thing)
(declare-const it thing)
(assert (not (= water bottle)))
(assert (not (= water cup)))
(assert (not (= water it)))
(assert (not (= bottle cup)))
(assert (not (= bottle it)))
(assert (not (= cup it)))
(assert (forall ((x person)) (= x I)))
(assert (forall ((x thing)) (or (= x water) (= x bottle) (= x cup) (= x it) )))
(declare-rel empty (thing ))
(declare-rel pour_into (person thing thing thing ))
(declare-rel pour_1 (person ))
(declare-rel pour_2 (person thing ))
(declare-rel pour_3 (person thing thing ))
(declare-rel pour_4 (person thing thing thing ))
(declare-rel full (thing ))
(assert (forall ((a thing) (d thing) ) (=> (not (= a d)) (=> (exists ((b person) (c thing)) (pour_into b c a d))   (and (empty a) (full d)) ))))
(assert (forall ((b person) (c thing) (d thing) (e thing) ) (=> (pour_into b c d e ) (pour_1 b ))))
(assert (forall ((b person) (c thing) (d thing) (e thing) ) (=> (pour_into b c d e ) (pour_2 b c ))))
(assert (forall ((b person) (c thing) (d thing) (e thing) ) (=> (pour_into b c d e ) (pour_3 b c d ))))
(assert (forall ((b person) (c thing) (d thing) (e thing) ) (= (pour_into b c d e ) (pour_4 b c d e ))))
(assert (= (full water ) (and (not (full bottle )) (not (full cup )) )))
(assert (= (full bottle ) (and (not (full water )) (not (full cup )) )))
(assert (= (full cup ) (and (not (full water )) (not (full bottle )) )))
(assert (pour_4 I water bottle cup ) )
(assert (not  (full water )))
(check-sat)
