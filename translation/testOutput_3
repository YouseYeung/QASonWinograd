(declare-sort thing)
(declare-const personal_somebody_problem thing)
(declare-const personal_problem thing)
(declare-const personal_Ann_problem thing)
(declare-const Ann_t thing)
(declare-const personal_b_problem thing)
(declare-sort person)
(declare-const Susan person)
(declare-const Ann_p person)
(declare-const she person)
(assert (not (= personal_somebody_problem personal_problem)))
(assert (not (= personal_somebody_problem personal_Ann_problem)))
(assert (not (= personal_somebody_problem Ann_t)))
(assert (not (= personal_somebody_problem personal_b_problem)))
(assert (not (= personal_problem personal_Ann_problem)))
(assert (not (= personal_problem Ann_t)))
(assert (not (= personal_problem personal_b_problem)))
(assert (not (= personal_Ann_problem Ann_t)))
(assert (not (= personal_Ann_problem personal_b_problem)))
(assert (not (= Ann_t personal_b_problem)))
(assert (not (= Susan Ann_p)))
(assert (not (= Susan she)))
(assert (not (= Ann_p she)))
(assert (forall ((x thing)) (or (= x personal_somebody_problem) (= x personal_problem) (= x personal_Ann_problem) (= x Ann_t) (= x personal_b_problem) )))
(assert (forall ((x person)) (or (= x Susan) (= x Ann_p) (= x she) )))
(declare-rel know_about (person thing ))
(declare-rel know_1 (person ))
(declare-rel nosy (person ))
(declare-rel indiscreet (person ))
(declare-rel posses_tt (thing thing))
(declare-rel posses_pt (person thing))
(assert (forall ((a person) ) (= (nosy a)  (exists ((b person)) (and (know_about a personal_problem) (posses_pt b personal_problem) ) ))))
(assert (forall ((b person) ) (= (indiscreet b)  (exists ((a person)) (and (know_about a personal_problem) (posses_pt b personal_problem) ) ))))
(assert (forall ((b person) ) (= (know_about b personal_problem ) (know_1 b ))))
(assert (= (nosy Susan ) (and (not (nosy Ann_p )) (not (nosy she )) )))
(assert (= (nosy Ann_p ) (and (not (nosy Susan )) (not (nosy she )) )))
(assert (= (nosy she ) (and (not (nosy Susan )) (not (nosy Ann_p )) )))
(assert (and (know_about Susan personal_problem )   (posses_pt Ann_p personal_problem) (posses_tt Ann_t personal_problem) ))
(assert (not (nosy she)))
(check-sat)
