(declare-sort thing)
(declare-const favor thing)
(declare-sort person)
(declare-const James person)
(declare-const Robert person)
(declare-const he person)
(assert (not (= James Robert)))
(assert (not (= James he)))
(assert (not (= Robert he)))
(assert (forall ((x thing)) (= x favor)))
(assert (forall ((x person)) (or (= x James) (= x Robert) (= x he) )))
(declare-rel ask_for (person person thing ))
(declare-rel ask (person person ))
(declare-rel refuse (person ))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (=> (ask_for a b favor)  (or (refuse a) (refuse b)) ))))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (=> (or (refuse a) (refuse b))  (ask_for a b favor) ))))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (=> (refuse b)  (ask_for a b favor) ))))
(assert (forall ((a person) (b person) ) (= (ask_for a b favor ) (ask a b ))))
(assert (= (refuse James ) (and (not (refuse Robert )) (not (refuse he )) )))
(assert (= (refuse Robert ) (and (not (refuse James )) (not (refuse he )) )))
(assert (= (refuse he ) (and (not (refuse James )) (not (refuse Robert )) )))
(assert (ask James Robert ))
(assert (not (refuse he)))
(check-sat)
