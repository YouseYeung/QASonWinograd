(declare-sort thing)
(declare-const George thing)
(declare-sort person)
(declare-const Paul person)
(declare-const call person)
(declare-const George person)
(declare-const he person)
(declare-rel successful (person ))
(declare-rel try (person thing person ))
(declare-rel call (person ))
(declare-rel available (person ))
(assert (not (= Paul call)))
(assert (not (= Paul George)))
(assert (not (= Paul he)))
(assert (not (= call George)))
(assert (not (= call he)))
(assert (not (= George he)))
(assert (forall ((x thing)) (= x George)))
(assert (forall ((x person)) (or (= x Paul) (= x call) (= x George) (= x he) )))
(assert (forall ((a person) (b person) (c person) ) (=> (and (not (= a b)) (not (= a c)) (not (= b c)) ) (=> (try a callc ) (call c ) (and (successful a ) (available c ) ) ))))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (=> (and (successful a ) (available b ) ) (try a callb ) (call b ) ))))
(assert (= (successful Paul) (and (not (successful call)) (not (successful George)) (not (successful he)) )))
(assert (= (successful call) (and (not (successful Paul)) (not (successful George)) (not (successful he)) )))
(assert (= (successful George) (and (not (successful Paul)) (not (successful call)) (not (successful he)) )))
(assert (= (successful he) (and (not (successful Paul)) (not (successful call)) (not (successful George)) )))
(assert (try Paul call George ))
(assert (call George ))
(assert (not (successful George)))
(check-sat)
