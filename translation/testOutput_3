<<<<<<< HEAD
(declare-sort thing)
(declare-const help thing)
(declare-sort person)
(declare-const Joan person)
(declare-const Susan person)
(declare-const she person)
(assert (not (= Joan Susan)))
(assert (not (= Joan she)))
(assert (not (= Susan she)))
(assert (forall ((x thing)) (= x help)))
(assert (forall ((x person)) (or (= x Joan) (= x Susan) (= x she) )))
(declare-rel make (person ))
(declare-rel thank (person person ))
(declare-rel give_to (person thing person ))
(declare-rel give_1 (person ))
(declare-rel give_2 (person thing ))
(declare-rel receive_from (person thing person ))
(declare-rel receive_1 (person ))
(declare-rel receive_2 (person thing ))
(declare-rel give_1 (person ))
(declare-rel give_2 (person thing ))
(declare-rel receive_1 (person ))
(declare-rel receive_2 (person thing ))
(declare-rel receive_1 (person ))
(declare-rel receive_2 (person thing ))
(declare-rel receive (person thing ))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (=> (or (give_to b help a) (receive_from a help b))  (and (make a) (thank a b) )))))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (=> (and (make a) (thank a b) ) (or (give_to b help a) (receive_from a help b)) ))))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (=> (and (make a) (thank a b) ) (receive_from a help b) ))))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (= (give_to a help b)  (receive_from b help a) ))))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (= (receive_from a help b)  (receive a help) ))))
(assert (forall ((b person) (d person) ) (= (give_to b help d ) (give_1 b ))))
(assert (forall ((b person) (d person) ) (= (give_to b help d ) (give_2 b help ))))
(assert (forall ((b person) (d person) ) (= (receive_from b help d ) (receive_1 b ))))
(assert (forall ((b person) (d person) ) (= (receive_from b help d ) (receive_2 b help ))))
(assert (make Joan ))
(assert (thank Joan Susan ))
(assert (not (give_2 she help)))
=======
(declare-sort person)
(declare-const I person)
(declare-sort thing)
(declare-const water thing)
(declare-const bottle thing)
(declare-const it thing)
(assert (not (= water bottle)))
(assert (not (= water it)))
(assert (not (= bottle it)))
(assert (forall ((x person)) (= x I)))
(assert (forall ((x thing)) (or (= x water) (= x bottle) (= x it) )))
(declare-rel empty (thing ))
(declare-rel pour_into (person thing thing ))
(declare-rel pour (person thing ))
(declare-rel full (thing ))
(assert (forall ((a thing) (d thing) ) (=> (not (= a d)) (=>  (c thing)) (pour_into b c d)  (and (empty a) (full d)) ))))
(assert (forall ((a person) (b thing) (c thing) ) (= (pour_into a b c ) (pour a b ))))
(assert (= (full water ) (and (not (full bottle )) (not (full it )) )))
(assert (= (full bottle ) (and (not (full water )) (not (full it )) )))
(assert (= (full it ) (and (not (full water )) (not (full bottle )) )))
(assert (pour I water bottle ))
(assert (not (full it)))
>>>>>>> fc72ca9f687ee0a2829db6ee3b35e88bf90c2b8e
(check-sat)
