(declare-sort thing)
(declare-const personal_somebody_problem thing)
(declare-const personal_problem thing)
(declare-const personal_Ann_problem thing)
(declare-const Ann__t thing)
(declare-const personal_b_problem thing)
(declare-sort person)
(declare-const Susan person)
(declare-const Ann__pp person)
(declare-const she person)
(assert (not (= personal_somebody_problem personal_problem)))
(assert (not (= personal_somebody_problem personal_Ann_problem)))
(assert (not (= personal_somebody_problem Ann__t)))
(assert (not (= personal_somebody_problem personal_b_problem)))
(assert (not (= personal_problem personal_Ann_problem)))
(assert (not (= personal_problem Ann__t)))
(assert (not (= personal_problem personal_b_problem)))
(assert (not (= personal_Ann_problem Ann__t)))
(assert (not (= personal_Ann_problem personal_b_problem)))
(assert (not (= Ann__t personal_b_problem)))
(assert (not (= Susan Ann__pp)))
(assert (not (= Susan she)))
(assert (not (= Susan Ann__pp)))
(assert (not (= Ann__pp she)))
(assert (not (= Ann__pp Ann__pp)))
(assert (not (= she Ann__pp)))
(assert (forall ((x thing)) (or (= x personal_somebody_problem) (= x personal_problem) (= x personal_Ann_problem) (= x Ann__t) (= x personal_b_problem) )))
(assert (forall ((x person)) (or (= x Susan) (= x Ann__pp) (= x she) (= x Ann__pp) )))
(declare-rel know_about (person thing ))
(declare-rel know_1 (person ))
(declare-rel nosy (person ))
(declare-rel indiscreet (person ))
(declare-rel posses_tt (thing thing))
(declare-rel posses_pt (person thing))
(assert (forall ((a person) ) (= (nosy a)  (exists ((b person)) (and (know_about a personal_problem) (posses_pt b personal_problem) ) ))))
(assert (forall ((b person) ) (= (indiscreet b)  (exists ((a person)) (and (know_about a personal_problem) (posses_pt b personal_problem) ) ))))
(assert (forall ((b person) ) (= (know_about b problem ) (know_1 b ))))
(assert (= (nosy Susan ) (and (not (nosy Ann__pp )) (not (nosy she )) )))
(assert (= (nosy Ann__pp ) (and (not (nosy Susan )) (not (nosy she )) )))
(assert (= (nosy she ) (and (not (nosy Susan )) (not (nosy Ann__pp )) )))
(assert (and (know_about Susan personal_problem )   (posses_pt Ann_p personal_problem) (posses_tt Ann_t personal_problem) )
(assert (not (nosy Ann__pp)))
(check-sat)
