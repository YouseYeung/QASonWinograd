(declare-sort thing)
(declare-const question thing)
(declare-const it thing)
(declare-sort person)
(declare-const lawyer person)
(declare-const witness person)
(declare-const he person)
(assert (not (= question it)))
(assert (not (= lawyer witness)))
(assert (not (= lawyer he)))
(assert (not (= witness he)))
(assert (forall ((x thing)) (or (= x question) (= x it) )))
(assert (forall ((x person)) (or (= x lawyer) (= x witness) (= x he) )))
(declare-rel answer (person thing ))
(declare-rel ask (person person thing ))
(declare-rel repeat_again (person thing ))
(declare-rel repeat_ (person ))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (=> (ask b a question)  (and (repeat_again b question) (answer a question)) ))))
(assert (forall ((a person) ) (=> (repeat_again a question ) (repeat_ a ))))
(assert (= (answer lawyer question ) (and (not (answer witness question )) (not (answer he question )) )))
(assert (= (answer witness question ) (and (not (answer lawyer question )) (not (answer he question )) )))
(assert (= (answer he question ) (and (not (answer lawyer question )) (not (answer witness question )) )))
(assert (ask lawyer witness question ))
(assert (not (answer witness question)))
(check-sat)
