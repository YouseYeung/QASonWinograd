(declare-sort thing)
(declare-const benefit thing)
(declare-const lot thing)
(declare-const money thing)
(declare-sort person)
(declare-const con_artist person)
(declare-const fooling_Sam person)
(declare-const he person)
(assert (not (= benefit lot)))
(assert (not (= benefit money)))
(assert (not (= lot money)))
(assert (not (= con_artist fooling_Sam)))
(assert (not (= con_artist he)))
(assert (not (= fooling_Sam he)))
(assert (forall ((x thing)) (or (= x benefit) (= x lot) (= x money) )))
(assert (forall ((x person)) (or (= x con_artist) (= x fooling_Sam) (= x he) )))
(declare-rel succeed (person person ))
(declare-rel lose (person thing ))
(declare-rel fool (person ))
(declare-rel get (person thing ))
(assert (forall ((a person) (b person) ) (=> (not (= a b)) (=> (and (succeed a b) (fool b) ) (and (get a benefit) (lose b benefit)) ))))
(assert (forall ((a person) ) (= (get a money)  (get a benefit) )))
(assert (forall ((a person) ) (= (lose a money)  (lose a benefit) )))
(assert (= (get con_artist money ) (not (get fooling_Sam money )) ))
(assert (= (get fooling_Sam money ) (not (get con_artist money )) ))
(assert (succeed con_artist fooling_Sam ) )
(assert (not (get fooling_Sam money )))
(check-sat)
