(declare-sort thing)
(declare-const personal_somebody_problem thing)
(declare-const personal_b_problem thing)
(declare-sort person)
(declare-const Susan person)
(declare-const she person)
(assert (not (= personal_somebody_problem personal_b_problem)))
(assert (not (= Susan she)))
(assert (forall ((x thing)) (or (= x personal_somebody_problem) (= x personal_b_problem) )))
(assert (forall ((x person)) (or (= x Susan) (= x she) )))
(declare-rel know_about (person person thing ))
(declare-rel know_1 (person ))
(declare-rel know_2 (person person ))
(declare-rel nosy (person ))
(declare-rel indiscreet (person ))
(assert (forall ((a person) ) (= (nosy a)  (and (exist ((c person)) (know_about a c personal_somebody_problem) (indiscreet a) (exist ((c person)) (know_about c a personal_b_problem) )))))
(assert (forall ((b person) (c person) ) (= (know_about b c problem ) (know_1 b ))))
(assert (forall ((b person) (c person) ) (= (know_about b c problem ) (know_2 b c ))))
(assert (= (nosy Susan ) (not (nosy she )) )))
(assert (= (nosy she ) (not (nosy Susan )) )))
(assert (not (nosy she)))
(check-sat)
